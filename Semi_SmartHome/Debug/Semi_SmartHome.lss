
Semi_SmartHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003254  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a6  00800060  00003254  000032e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800106  00800106  0000338e  2**0
                  ALLOC
  3 .stab         00003180  00000000  00000000  00003390  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012e6  00000000  00000000  00006510  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000077f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007936  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007aa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000096ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a5da  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b388  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b4e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b775  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bf43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 9f 09 	jmp	0x133e	; 0x133e <__vector_1>
       8:	0c 94 d2 09 	jmp	0x13a4	; 0x13a4 <__vector_2>
       c:	0c 94 05 0a 	jmp	0x140a	; 0x140a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 c1 06 	jmp	0xd82	; 0xd82 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e5       	ldi	r30, 0x54	; 84
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 30       	cpi	r26, 0x06	; 6
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e0       	ldi	r26, 0x06	; 6
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 31       	cpi	r26, 0x12	; 18
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 db 13 	call	0x27b6	; 0x27b6 <main>
      8a:	0c 94 28 19 	jmp	0x3250	; 0x3250 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f1 18 	jmp	0x31e2	; 0x31e2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa ed       	ldi	r26, 0xDA	; 218
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0d 19 	jmp	0x321a	; 0x321a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fd 18 	jmp	0x31fa	; 0x31fa <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 19 19 	jmp	0x3232	; 0x3232 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fd 18 	jmp	0x31fa	; 0x31fa <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 19 19 	jmp	0x3232	; 0x3232 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f1 18 	jmp	0x31e2	; 0x31e2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a ed       	ldi	r24, 0xDA	; 218
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0d 19 	jmp	0x321a	; 0x321a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fd 18 	jmp	0x31fa	; 0x31fa <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 19 19 	jmp	0x3232	; 0x3232 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 fd 18 	jmp	0x31fa	; 0x31fa <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 19 19 	jmp	0x3232	; 0x3232 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 fd 18 	jmp	0x31fa	; 0x31fa <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 19 19 	jmp	0x3232	; 0x3232 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 01 19 	jmp	0x3202	; 0x3202 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 1d 19 	jmp	0x323a	; 0x323a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:


static u8 ADC_u8BusyFlag = IDLE;

void ADC_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	/*Initializing the Reference voltage configuration*/
#if REFERENCE_SELECTION == AVCC
	SET_BIT(ADMUX, ADMUX_REFS0);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, ADMUX_REFS1);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24
#endif


	/*Initializing the result adjustment mode according to the resolution configuration*/
#if ADC_RESOLUTION == EIGHT_BITS
	SET_BIT(ADMUX, ADMUX_ADLAR);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 62       	ori	r24, 0x20	; 32
     b76:	8c 93       	st	X, r24

#endif

	/*Implementing the Auto-trigger mode configuration*/
#if ADC_AUTO_TRIGGER == DISABLED
	CLR_BIT(ADCSRA, ADCSRA_ADATE);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	8f 7d       	andi	r24, 0xDF	; 223
     b84:	8c 93       	st	X, r24
#endif


	/*Implementing the Interrupt enable mode configuration*/
#if ADC_INTERRUPT_ENABLE == DISABLED
	CLR_BIT(ADCSRA, ADCSRA_ADIE);
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	87 7f       	andi	r24, 0xF7	; 247
     b92:	8c 93       	st	X, r24
#endif



	/*Initializing the Prescaler configuration*/
	ADCSRA &= PRESCALER_MASK;
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	88 7f       	andi	r24, 0xF8	; 248
     ba0:	8c 93       	st	X, r24
	ADCSRA |= PRESCALER_SELECTION;
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	87 60       	ori	r24, 0x07	; 7
     bae:	8c 93       	st	X, r24
#endif*/



	/*Enabling the ADC*/
	SET_BIT(ADCSRA, ADCSRA_ADEN);
     bb0:	a6 e2       	ldi	r26, 0x26	; 38
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e6 e2       	ldi	r30, 0x26	; 38
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	80 68       	ori	r24, 0x80	; 128
     bbc:	8c 93       	st	X, r24

}
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <ADC_u8StartConversionSynch>:


u8 ADC_u8StartConversionSynch(u8 Copy_u8Channel, u16* Copy_pu16Result)
{
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
     bcc:	28 97       	sbiw	r28, 0x08	; 8
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	f8 94       	cli
     bd2:	de bf       	out	0x3e, r29	; 62
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	cd bf       	out	0x3d, r28	; 61
     bd8:	8e 83       	std	Y+6, r24	; 0x06
     bda:	78 87       	std	Y+8, r23	; 0x08
     bdc:	6f 83       	std	Y+7, r22	; 0x07

	u8 Local_u8ErrorState = OK;
     bde:	1d 82       	std	Y+5, r1	; 0x05

	if (Copy_pu16Result != NULL)
     be0:	8f 81       	ldd	r24, Y+7	; 0x07
     be2:	98 85       	ldd	r25, Y+8	; 0x08
     be4:	00 97       	sbiw	r24, 0x00	; 0
     be6:	09 f4       	brne	.+2      	; 0xbea <ADC_u8StartConversionSynch+0x26>
     be8:	6b c0       	rjmp	.+214    	; 0xcc0 <ADC_u8StartConversionSynch+0xfc>
	{
		/*check if ADC is not busy*/
		if (ADC_u8BusyFlag == IDLE)
     bea:	80 91 e2 00 	lds	r24, 0x00E2
     bee:	84 30       	cpi	r24, 0x04	; 4
     bf0:	09 f0       	breq	.+2      	; 0xbf4 <ADC_u8StartConversionSynch+0x30>
     bf2:	63 c0       	rjmp	.+198    	; 0xcba <ADC_u8StartConversionSynch+0xf6>
		{
			u32 Local_u32TimeoutCounter = 0u;
     bf4:	19 82       	std	Y+1, r1	; 0x01
     bf6:	1a 82       	std	Y+2, r1	; 0x02
     bf8:	1b 82       	std	Y+3, r1	; 0x03
     bfa:	1c 82       	std	Y+4, r1	; 0x04

			/*ADC is now Busy*/
			ADC_u8BusyFlag = BUSY;
     bfc:	85 e0       	ldi	r24, 0x05	; 5
     bfe:	80 93 e2 00 	sts	0x00E2, r24


			/*Setting the required channel*/
			ADMUX &= CHANNEL_MASK;
     c02:	a7 e2       	ldi	r26, 0x27	; 39
     c04:	b0 e0       	ldi	r27, 0x00	; 0
     c06:	e7 e2       	ldi	r30, 0x27	; 39
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	80 7e       	andi	r24, 0xE0	; 224
     c0e:	8c 93       	st	X, r24
			ADMUX |= Copy_u8Channel;
     c10:	a7 e2       	ldi	r26, 0x27	; 39
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	e7 e2       	ldi	r30, 0x27	; 39
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	90 81       	ld	r25, Z
     c1a:	8e 81       	ldd	r24, Y+6	; 0x06
     c1c:	89 2b       	or	r24, r25
     c1e:	8c 93       	st	X, r24

			/*ADC Start Conversion*/
			SET_BIT(ADCSRA, ADCSRA_ADSC);
     c20:	a6 e2       	ldi	r26, 0x26	; 38
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	e6 e2       	ldi	r30, 0x26	; 38
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	80 64       	ori	r24, 0x40	; 64
     c2c:	8c 93       	st	X, r24
     c2e:	0b c0       	rjmp	.+22     	; 0xc46 <ADC_u8StartConversionSynch+0x82>

			/*waiting for the conversion done flag or timeout is passed*/
			while ((GET_BIT(ADCSRA, ADCSRA_ADIF) == 0) && (Local_u32TimeoutCounter < ADC_u32TIMEOUT))
			{
				Local_u32TimeoutCounter++;
     c30:	89 81       	ldd	r24, Y+1	; 0x01
     c32:	9a 81       	ldd	r25, Y+2	; 0x02
     c34:	ab 81       	ldd	r26, Y+3	; 0x03
     c36:	bc 81       	ldd	r27, Y+4	; 0x04
     c38:	01 96       	adiw	r24, 0x01	; 1
     c3a:	a1 1d       	adc	r26, r1
     c3c:	b1 1d       	adc	r27, r1
     c3e:	89 83       	std	Y+1, r24	; 0x01
     c40:	9a 83       	std	Y+2, r25	; 0x02
     c42:	ab 83       	std	Y+3, r26	; 0x03
     c44:	bc 83       	std	Y+4, r27	; 0x04

			/*ADC Start Conversion*/
			SET_BIT(ADCSRA, ADCSRA_ADSC);

			/*waiting for the conversion done flag or timeout is passed*/
			while ((GET_BIT(ADCSRA, ADCSRA_ADIF) == 0) && (Local_u32TimeoutCounter < ADC_u32TIMEOUT))
     c46:	e6 e2       	ldi	r30, 0x26	; 38
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	82 95       	swap	r24
     c4e:	8f 70       	andi	r24, 0x0F	; 15
     c50:	88 2f       	mov	r24, r24
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	81 70       	andi	r24, 0x01	; 1
     c56:	90 70       	andi	r25, 0x00	; 0
     c58:	00 97       	sbiw	r24, 0x00	; 0
     c5a:	61 f4       	brne	.+24     	; 0xc74 <ADC_u8StartConversionSynch+0xb0>
     c5c:	89 81       	ldd	r24, Y+1	; 0x01
     c5e:	9a 81       	ldd	r25, Y+2	; 0x02
     c60:	ab 81       	ldd	r26, Y+3	; 0x03
     c62:	bc 81       	ldd	r27, Y+4	; 0x04
     c64:	80 35       	cpi	r24, 0x50	; 80
     c66:	23 ec       	ldi	r18, 0xC3	; 195
     c68:	92 07       	cpc	r25, r18
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	a2 07       	cpc	r26, r18
     c6e:	20 e0       	ldi	r18, 0x00	; 0
     c70:	b2 07       	cpc	r27, r18
     c72:	f0 f2       	brcs	.-68     	; 0xc30 <ADC_u8StartConversionSynch+0x6c>
			{
				Local_u32TimeoutCounter++;
			}

			if (Local_u32TimeoutCounter >= ADC_u32TIMEOUT)
     c74:	89 81       	ldd	r24, Y+1	; 0x01
     c76:	9a 81       	ldd	r25, Y+2	; 0x02
     c78:	ab 81       	ldd	r26, Y+3	; 0x03
     c7a:	bc 81       	ldd	r27, Y+4	; 0x04
     c7c:	80 35       	cpi	r24, 0x50	; 80
     c7e:	23 ec       	ldi	r18, 0xC3	; 195
     c80:	92 07       	cpc	r25, r18
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	a2 07       	cpc	r26, r18
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	b2 07       	cpc	r27, r18
     c8a:	18 f0       	brcs	.+6      	; 0xc92 <ADC_u8StartConversionSynch+0xce>
			{
				/*Loop is broken because flag isn't raised until time out is passed*/
				Local_u8ErrorState = TIMEOUT_ERR;
     c8c:	83 e0       	ldi	r24, 0x03	; 3
     c8e:	8d 83       	std	Y+5, r24	; 0x05
     c90:	19 c0       	rjmp	.+50     	; 0xcc4 <ADC_u8StartConversionSynch+0x100>
			else
			{
				/*Loop is broken because flag is raised before timeout is passed*/

				/*Clearing the flag after conversion done*/
					SET_BIT(ADCSRA, ADCSRA_ADIF);
     c92:	a6 e2       	ldi	r26, 0x26	; 38
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	e6 e2       	ldi	r30, 0x26	; 38
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	80 61       	ori	r24, 0x10	; 16
     c9e:	8c 93       	st	X, r24

				#if ADC_RESOLUTION == EIGHT_BITS
					*Copy_pu16Result = ADCH;
     ca0:	e5 e2       	ldi	r30, 0x25	; 37
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	88 2f       	mov	r24, r24
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	ef 81       	ldd	r30, Y+7	; 0x07
     cac:	f8 85       	ldd	r31, Y+8	; 0x08
     cae:	91 83       	std	Z+1, r25	; 0x01
     cb0:	80 83       	st	Z, r24
					*Copy_pu16Result = ADC;

				#endif

					/*ADC is now Idle*/
					ADC_u8BusyFlag = IDLE;
     cb2:	84 e0       	ldi	r24, 0x04	; 4
     cb4:	80 93 e2 00 	sts	0x00E2, r24
     cb8:	05 c0       	rjmp	.+10     	; 0xcc4 <ADC_u8StartConversionSynch+0x100>
		}


		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
     cba:	86 e0       	ldi	r24, 0x06	; 6
     cbc:	8d 83       	std	Y+5, r24	; 0x05
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <ADC_u8StartConversionSynch+0x100>
		}
	}

	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
     cc0:	82 e0       	ldi	r24, 0x02	; 2
     cc2:	8d 83       	std	Y+5, r24	; 0x05
	}


	return Local_u8ErrorState;
     cc4:	8d 81       	ldd	r24, Y+5	; 0x05

}
     cc6:	28 96       	adiw	r28, 0x08	; 8
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	f8 94       	cli
     ccc:	de bf       	out	0x3e, r29	; 62
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	cd bf       	out	0x3d, r28	; 61
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	08 95       	ret

00000cd8 <ADC_u8StartConversionAsynch>:




u8 ADC_u8StartConversionAsynch(u8 Copy_u8Channel, u16* Copy_pu16Result, void(*Copy_pvNotificationFunc)(void))
{
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	00 d0       	rcall	.+0      	; 0xcde <ADC_u8StartConversionAsynch+0x6>
     cde:	00 d0       	rcall	.+0      	; 0xce0 <ADC_u8StartConversionAsynch+0x8>
     ce0:	00 d0       	rcall	.+0      	; 0xce2 <ADC_u8StartConversionAsynch+0xa>
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
     ce6:	8a 83       	std	Y+2, r24	; 0x02
     ce8:	7c 83       	std	Y+4, r23	; 0x04
     cea:	6b 83       	std	Y+3, r22	; 0x03
     cec:	5e 83       	std	Y+6, r21	; 0x06
     cee:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = OK;
     cf0:	19 82       	std	Y+1, r1	; 0x01

	if ((Copy_pu16Result != NULL) && (Copy_pvNotificationFunc != NULL))
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	9c 81       	ldd	r25, Y+4	; 0x04
     cf6:	00 97       	sbiw	r24, 0x00	; 0
     cf8:	c1 f1       	breq	.+112    	; 0xd6a <ADC_u8StartConversionAsynch+0x92>
     cfa:	8d 81       	ldd	r24, Y+5	; 0x05
     cfc:	9e 81       	ldd	r25, Y+6	; 0x06
     cfe:	00 97       	sbiw	r24, 0x00	; 0
     d00:	a1 f1       	breq	.+104    	; 0xd6a <ADC_u8StartConversionAsynch+0x92>
	{

		if (ADC_u8BusyFlag == IDLE)
     d02:	80 91 e2 00 	lds	r24, 0x00E2
     d06:	84 30       	cpi	r24, 0x04	; 4
     d08:	69 f5       	brne	.+90     	; 0xd64 <ADC_u8StartConversionAsynch+0x8c>
		{
			/*ADC is now Busy*/
			ADC_u8BusyFlag = BUSY;
     d0a:	85 e0       	ldi	r24, 0x05	; 5
     d0c:	80 93 e2 00 	sts	0x00E2, r24

			/*Initializes the result pointer globally*/
			ADC_pu16ConversionResult = Copy_pu16Result;
     d10:	8b 81       	ldd	r24, Y+3	; 0x03
     d12:	9c 81       	ldd	r25, Y+4	; 0x04
     d14:	90 93 07 01 	sts	0x0107, r25
     d18:	80 93 06 01 	sts	0x0106, r24

			/*Initializes the result pointer globally*/
			ADC_pvNotificationFunc = Copy_pvNotificationFunc;
     d1c:	8d 81       	ldd	r24, Y+5	; 0x05
     d1e:	9e 81       	ldd	r25, Y+6	; 0x06
     d20:	90 93 09 01 	sts	0x0109, r25
     d24:	80 93 08 01 	sts	0x0108, r24

			/*Setting the required channel*/
			ADMUX &= CHANNEL_MASK;
     d28:	a7 e2       	ldi	r26, 0x27	; 39
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e7 e2       	ldi	r30, 0x27	; 39
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	80 7e       	andi	r24, 0xE0	; 224
     d34:	8c 93       	st	X, r24
			ADMUX |= Copy_u8Channel;
     d36:	a7 e2       	ldi	r26, 0x27	; 39
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	e7 e2       	ldi	r30, 0x27	; 39
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	90 81       	ld	r25, Z
     d40:	8a 81       	ldd	r24, Y+2	; 0x02
     d42:	89 2b       	or	r24, r25
     d44:	8c 93       	st	X, r24

			/*ADC Start Conversion*/
			SET_BIT(ADCSRA, ADCSRA_ADSC);
     d46:	a6 e2       	ldi	r26, 0x26	; 38
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e6 e2       	ldi	r30, 0x26	; 38
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	80 64       	ori	r24, 0x40	; 64
     d52:	8c 93       	st	X, r24

			/*Enable the ADC conversion complete interrupt*/
			SET_BIT(ADCSRA, ADCSRA_ADIE);
     d54:	a6 e2       	ldi	r26, 0x26	; 38
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e6 e2       	ldi	r30, 0x26	; 38
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	88 60       	ori	r24, 0x08	; 8
     d60:	8c 93       	st	X, r24
     d62:	05 c0       	rjmp	.+10     	; 0xd6e <ADC_u8StartConversionAsynch+0x96>

		}

		else
		{
			Local_u8ErrorState = BUSY_STATE_ERR;
     d64:	86 e0       	ldi	r24, 0x06	; 6
     d66:	89 83       	std	Y+1, r24	; 0x01
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <ADC_u8StartConversionAsynch+0x96>

	}

	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
     d6a:	82 e0       	ldi	r24, 0x02	; 2
     d6c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d70:	26 96       	adiw	r28, 0x06	; 6
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	de bf       	out	0x3e, r29	; 62
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	cd bf       	out	0x3d, r28	; 61
     d7c:	cf 91       	pop	r28
     d7e:	df 91       	pop	r29
     d80:	08 95       	ret

00000d82 <__vector_16>:
 *@brief ADC Conversion complete ISR
 *
 */
void __vector_16 (void) __attribute__((signal));
void __vector_16 (void)
{
     d82:	1f 92       	push	r1
     d84:	0f 92       	push	r0
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	0f 92       	push	r0
     d8a:	11 24       	eor	r1, r1
     d8c:	2f 93       	push	r18
     d8e:	3f 93       	push	r19
     d90:	4f 93       	push	r20
     d92:	5f 93       	push	r21
     d94:	6f 93       	push	r22
     d96:	7f 93       	push	r23
     d98:	8f 93       	push	r24
     d9a:	9f 93       	push	r25
     d9c:	af 93       	push	r26
     d9e:	bf 93       	push	r27
     da0:	ef 93       	push	r30
     da2:	ff 93       	push	r31
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
	if (ADC_pu16ConversionResult != NULL)
     dac:	80 91 06 01 	lds	r24, 0x0106
     db0:	90 91 07 01 	lds	r25, 0x0107
     db4:	00 97       	sbiw	r24, 0x00	; 0
     db6:	59 f0       	breq	.+22     	; 0xdce <__vector_16+0x4c>
	{
		#if ADC_RESOLUTION == EIGHT_BITS
			*ADC_pu16ConversionResult = ADCH;
     db8:	a0 91 06 01 	lds	r26, 0x0106
     dbc:	b0 91 07 01 	lds	r27, 0x0107
     dc0:	e5 e2       	ldi	r30, 0x25	; 37
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	88 2f       	mov	r24, r24
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	8d 93       	st	X+, r24
     dcc:	9c 93       	st	X, r25
		/*just to follow MESRA rules*/
		/*ADC_puConversionResult is NULL*/
	}

	/*Disable the ADC conversion complete interrupt*/
	CLR_BIT(ADCSRA, ADCSRA_ADIE);
     dce:	a6 e2       	ldi	r26, 0x26	; 38
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e6 e2       	ldi	r30, 0x26	; 38
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	87 7f       	andi	r24, 0xF7	; 247
     dda:	8c 93       	st	X, r24


	/*ADC is now Idle*/
	ADC_u8BusyFlag = IDLE;
     ddc:	84 e0       	ldi	r24, 0x04	; 4
     dde:	80 93 e2 00 	sts	0x00E2, r24

	/*Invoke the application notification function*/
	if (ADC_pvNotificationFunc != NULL)
     de2:	80 91 08 01 	lds	r24, 0x0108
     de6:	90 91 09 01 	lds	r25, 0x0109
     dea:	00 97       	sbiw	r24, 0x00	; 0
     dec:	29 f0       	breq	.+10     	; 0xdf8 <__vector_16+0x76>
	{
		ADC_pvNotificationFunc();
     dee:	e0 91 08 01 	lds	r30, 0x0108
     df2:	f0 91 09 01 	lds	r31, 0x0109
     df6:	09 95       	icall

	else
	{
		/*ADC_pvNotificationFunc is NULL*/
	}
}
     df8:	cf 91       	pop	r28
     dfa:	df 91       	pop	r29
     dfc:	ff 91       	pop	r31
     dfe:	ef 91       	pop	r30
     e00:	bf 91       	pop	r27
     e02:	af 91       	pop	r26
     e04:	9f 91       	pop	r25
     e06:	8f 91       	pop	r24
     e08:	7f 91       	pop	r23
     e0a:	6f 91       	pop	r22
     e0c:	5f 91       	pop	r21
     e0e:	4f 91       	pop	r20
     e10:	3f 91       	pop	r19
     e12:	2f 91       	pop	r18
     e14:	0f 90       	pop	r0
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	0f 90       	pop	r0
     e1a:	1f 90       	pop	r1
     e1c:	18 95       	reti

00000e1e <Buzzer_Init>:
#include "Buzzer.h"
#include "GPIO.h"
#include "registers.h"


void Buzzer_Init(){
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
	DioSetPinDirection(portB,pin7,OUTPUT);
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	67 e0       	ldi	r22, 0x07	; 7
     e2a:	41 e0       	ldi	r20, 0x01	; 1
     e2c:	0e 94 38 0a 	call	0x1470	; 0x1470 <DioSetPinDirection>
}
     e30:	cf 91       	pop	r28
     e32:	df 91       	pop	r29
     e34:	08 95       	ret

00000e36 <Buzzer_ON>:
void Buzzer_ON(){
     e36:	df 93       	push	r29
     e38:	cf 93       	push	r28
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
	DioSetPinValue(portB,pin7,HIGH);
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	67 e0       	ldi	r22, 0x07	; 7
     e42:	41 e0       	ldi	r20, 0x01	; 1
     e44:	0e 94 3c 0b 	call	0x1678	; 0x1678 <DioSetPinValue>
}
     e48:	cf 91       	pop	r28
     e4a:	df 91       	pop	r29
     e4c:	08 95       	ret

00000e4e <Buzzer_OFF>:
void Buzzer_OFF(){
     e4e:	df 93       	push	r29
     e50:	cf 93       	push	r28
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
	DioSetPinValue(portB,pin7,LOW);
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	67 e0       	ldi	r22, 0x07	; 7
     e5a:	40 e0       	ldi	r20, 0x00	; 0
     e5c:	0e 94 3c 0b 	call	0x1678	; 0x1678 <DioSetPinValue>
}
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <timer_Init>:

#include "registers.h"
#include "GPIO.h"
#include "DC_Motor.h"

static void timer_Init(void){
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
	// Fast PWM
	//Set OC0 on compare match, clear OC0 at BOTTOM,(inverting mode)
	// prescaler -> /8
	TCCR0 = (1<<6)| (1<<3) | (1<<5) | (1<<1);// | (1<<4);
     e6e:	e3 e5       	ldi	r30, 0x53	; 83
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	8a e6       	ldi	r24, 0x6A	; 106
     e74:	80 83       	st	Z, r24
	TCNT0 = 0;
     e76:	e2 e5       	ldi	r30, 0x52	; 82
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	10 82       	st	Z, r1
	OCR0 = 255;
     e7c:	ec e5       	ldi	r30, 0x5C	; 92
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	8f ef       	ldi	r24, 0xFF	; 255
     e82:	80 83       	st	Z, r24

}
     e84:	cf 91       	pop	r28
     e86:	df 91       	pop	r29
     e88:	08 95       	ret

00000e8a <DC_MotorInit>:

void DC_MotorInit(void){
     e8a:	df 93       	push	r29
     e8c:	cf 93       	push	r28
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
	DioSetPinDirection(portB,pin1,OUTPUT);
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	61 e0       	ldi	r22, 0x01	; 1
     e96:	41 e0       	ldi	r20, 0x01	; 1
     e98:	0e 94 38 0a 	call	0x1470	; 0x1470 <DioSetPinDirection>
	DioSetPinDirection(portB,pin2,OUTPUT);
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	62 e0       	ldi	r22, 0x02	; 2
     ea0:	41 e0       	ldi	r20, 0x01	; 1
     ea2:	0e 94 38 0a 	call	0x1470	; 0x1470 <DioSetPinDirection>

	// OC0 pin
	DioSetPinDirection(portB,pin3,OUTPUT);
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	63 e0       	ldi	r22, 0x03	; 3
     eaa:	41 e0       	ldi	r20, 0x01	; 1
     eac:	0e 94 38 0a 	call	0x1470	; 0x1470 <DioSetPinDirection>
	timer_Init();
     eb0:	0e 94 33 07 	call	0xe66	; 0xe66 <timer_Init>
	DioSetPinValue(portB,pin1,LOW);
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	61 e0       	ldi	r22, 0x01	; 1
     eb8:	40 e0       	ldi	r20, 0x00	; 0
     eba:	0e 94 3c 0b 	call	0x1678	; 0x1678 <DioSetPinValue>
	DioSetPinValue(portB,pin2,LOW);
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	62 e0       	ldi	r22, 0x02	; 2
     ec2:	40 e0       	ldi	r20, 0x00	; 0
     ec4:	0e 94 3c 0b 	call	0x1678	; 0x1678 <DioSetPinValue>
}
     ec8:	cf 91       	pop	r28
     eca:	df 91       	pop	r29
     ecc:	08 95       	ret

00000ece <DC_MotorRotate>:

void DC_MotorRotate(u8 Copy_u8DutyCycle){
     ece:	df 93       	push	r29
     ed0:	cf 93       	push	r28
     ed2:	0f 92       	push	r0
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
     ed8:	89 83       	std	Y+1, r24	; 0x01
	OCR0= (u8)(((u16)(Copy_u8DutyCycle*255))/(100));
     eda:	ec e5       	ldi	r30, 0x5C	; 92
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	48 2f       	mov	r20, r24
     ee2:	50 e0       	ldi	r21, 0x00	; 0
     ee4:	ca 01       	movw	r24, r20
     ee6:	9c 01       	movw	r18, r24
     ee8:	22 0f       	add	r18, r18
     eea:	33 1f       	adc	r19, r19
     eec:	c9 01       	movw	r24, r18
     eee:	96 95       	lsr	r25
     ef0:	98 2f       	mov	r25, r24
     ef2:	88 27       	eor	r24, r24
     ef4:	97 95       	ror	r25
     ef6:	87 95       	ror	r24
     ef8:	82 1b       	sub	r24, r18
     efa:	93 0b       	sbc	r25, r19
     efc:	84 0f       	add	r24, r20
     efe:	95 1f       	adc	r25, r21
     f00:	24 e6       	ldi	r18, 0x64	; 100
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	b9 01       	movw	r22, r18
     f06:	0e 94 a0 18 	call	0x3140	; 0x3140 <__udivmodhi4>
     f0a:	cb 01       	movw	r24, r22
     f0c:	80 83       	st	Z, r24
	//OCR0 = (Copy_u8DutyCycle/100) * 255 ;
	DioSetPinValue(portB,pin1,HIGH);
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	61 e0       	ldi	r22, 0x01	; 1
     f12:	41 e0       	ldi	r20, 0x01	; 1
     f14:	0e 94 3c 0b 	call	0x1678	; 0x1678 <DioSetPinValue>
	DioSetPinValue(portB,pin2,LOW);
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	62 e0       	ldi	r22, 0x02	; 2
     f1c:	40 e0       	ldi	r20, 0x00	; 0
     f1e:	0e 94 3c 0b 	call	0x1678	; 0x1678 <DioSetPinValue>
}
     f22:	0f 90       	pop	r0
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <DC_MotorOff>:
void DC_MotorOff(void){
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62

	DioSetPinValue(portB,pin1,LOW);
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	40 e0       	ldi	r20, 0x00	; 0
     f38:	0e 94 3c 0b 	call	0x1678	; 0x1678 <DioSetPinValue>
	DioSetPinValue(portB,pin2,LOW);
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	62 e0       	ldi	r22, 0x02	; 2
     f40:	40 e0       	ldi	r20, 0x00	; 0
     f42:	0e 94 3c 0b 	call	0x1678	; 0x1678 <DioSetPinValue>
}
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <EXTI_voidInitInt0>:
static void (*EXTI_pfINTFunctionPtr[3])(void) = {NULL}; /*Array of ptrs to functions to hold ISR callbacks */



void EXTI_voidInitInt0(void)
{
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
#elif INT0_SENSE_CTRL == EXTI_ON_CHANGE
	SET_BIT(MCUCR, MCUCR_ISC00);
	CLR_BIT(MCUCR, MCUCR_ISC01);

#elif INT0_SENSE_CTRL == EXTI_FALLING_EDGE
	CLR_BIT(MCUCR, MCUCR_ISC00);
     f54:	a5 e5       	ldi	r26, 0x55	; 85
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e5 e5       	ldi	r30, 0x55	; 85
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	8e 7f       	andi	r24, 0xFE	; 254
     f60:	8c 93       	st	X, r24
	SET_BIT(MCUCR, MCUCR_ISC01);
     f62:	a5 e5       	ldi	r26, 0x55	; 85
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e5 e5       	ldi	r30, 0x55	; 85
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	82 60       	ori	r24, 0x02	; 2
     f6e:	8c 93       	st	X, r24

#endif

	/*implement INT0 Initial state configuration*/
#if INT0_INITIAL_STATE == DISABLED
	CLR_BIT(GICR, GICR_INT0);
     f70:	ab e5       	ldi	r26, 0x5B	; 91
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	eb e5       	ldi	r30, 0x5B	; 91
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	8f 7b       	andi	r24, 0xBF	; 191
     f7c:	8c 93       	st	X, r24
#elif INT0_INITIAL_STATE == ENABLED
	SET_BIT(GICR, GICR_INT0);
#else
#error Wrong INT0 Initial State Configuration Option
#endif
}
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	08 95       	ret

00000f84 <EXTI_voidInitInt1>:

void EXTI_voidInitInt1(void)
{
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
#elif INT1_SENSE_CTRL == EXTI_ON_CHANGE
	  SET_BIT(MCUCR, MCUCR_ISC10);
	  CLR_BIT(MCUCR, MCUCR_ISC11);

#elif INT1_SENSE_CTRL == EXTI_FALLING_EDGE
	  CLR_BIT(MCUCR, MCUCR_ISC10);
     f8c:	a5 e5       	ldi	r26, 0x55	; 85
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e5 e5       	ldi	r30, 0x55	; 85
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	8b 7f       	andi	r24, 0xFB	; 251
     f98:	8c 93       	st	X, r24
	  SET_BIT(MCUCR, MCUCR_ISC11);
     f9a:	a5 e5       	ldi	r26, 0x55	; 85
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e5 e5       	ldi	r30, 0x55	; 85
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	88 60       	ori	r24, 0x08	; 8
     fa6:	8c 93       	st	X, r24
#error Wrong INT1_SENSE_CTRL Configuration Option
#endif

	/*implement INT1 Initial state configuration*/
#if INT1_INITIAL_STATE == DISABLED
	CLR_BIT(GICR, GICR_INT1);
     fa8:	ab e5       	ldi	r26, 0x5B	; 91
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	eb e5       	ldi	r30, 0x5B	; 91
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	8f 77       	andi	r24, 0x7F	; 127
     fb4:	8c 93       	st	X, r24
SET_BIT(GICR, GICR_INT1);
#else
#error Wrong INT1 Initial State Configuration Option
#endif

}
     fb6:	cf 91       	pop	r28
     fb8:	df 91       	pop	r29
     fba:	08 95       	ret

00000fbc <EXTI_voidInitInt2>:


void EXTI_voidInitInt2(void)
{
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
	/*implement INT2 sense control configuration*/
#if INT2_SENSE_CTRL == EXTI_FALLING_EDGE
	  CLR_BIT(MCUCSR, MCUCSR_ISC2);
     fc4:	a4 e5       	ldi	r26, 0x54	; 84
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e4 e5       	ldi	r30, 0x54	; 84
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	8f 7b       	andi	r24, 0xBF	; 191
     fd0:	8c 93       	st	X, r24

	/*implement INT2 Initial state configuration*/
#if INT2_INITIAL_STATE == DISABLED
	CLR_BIT(GICR, GICR_INT2);
#elif INT2_INITIAL_STATE == ENABLED
SET_BIT(GICR, GICR_INT2);
     fd2:	ab e5       	ldi	r26, 0x5B	; 91
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	eb e5       	ldi	r30, 0x5B	; 91
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	80 62       	ori	r24, 0x20	; 32
     fde:	8c 93       	st	X, r24
#else
#error Wrong INT2 Initial State Configuration Option
#endif
}
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	08 95       	ret

00000fe6 <EXTI_SetSenseCtrl>:



u8 EXTI_SetSenseCtrl(u8 Copy_u8IntNum, u8 Copy_u8SenseType)
{
     fe6:	df 93       	push	r29
     fe8:	cf 93       	push	r28
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
     fee:	2b 97       	sbiw	r28, 0x0b	; 11
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	f8 94       	cli
     ff4:	de bf       	out	0x3e, r29	; 62
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	cd bf       	out	0x3d, r28	; 61
     ffa:	8a 83       	std	Y+2, r24	; 0x02
     ffc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = OK;
     ffe:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8IntNum)
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	3b 87       	std	Y+11, r19	; 0x0b
    1008:	2a 87       	std	Y+10, r18	; 0x0a
    100a:	8a 85       	ldd	r24, Y+10	; 0x0a
    100c:	9b 85       	ldd	r25, Y+11	; 0x0b
    100e:	81 30       	cpi	r24, 0x01	; 1
    1010:	91 05       	cpc	r25, r1
    1012:	09 f4       	brne	.+2      	; 0x1016 <EXTI_SetSenseCtrl+0x30>
    1014:	6a c0       	rjmp	.+212    	; 0x10ea <EXTI_SetSenseCtrl+0x104>
    1016:	2a 85       	ldd	r18, Y+10	; 0x0a
    1018:	3b 85       	ldd	r19, Y+11	; 0x0b
    101a:	22 30       	cpi	r18, 0x02	; 2
    101c:	31 05       	cpc	r19, r1
    101e:	09 f4       	brne	.+2      	; 0x1022 <EXTI_SetSenseCtrl+0x3c>
    1020:	c3 c0       	rjmp	.+390    	; 0x11a8 <EXTI_SetSenseCtrl+0x1c2>
    1022:	8a 85       	ldd	r24, Y+10	; 0x0a
    1024:	9b 85       	ldd	r25, Y+11	; 0x0b
    1026:	00 97       	sbiw	r24, 0x00	; 0
    1028:	09 f0       	breq	.+2      	; 0x102c <EXTI_SetSenseCtrl+0x46>
    102a:	e0 c0       	rjmp	.+448    	; 0x11ec <EXTI_SetSenseCtrl+0x206>
	{
	case EXTI_INT0:
		switch(Copy_u8SenseType)
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	39 87       	std	Y+9, r19	; 0x09
    1034:	28 87       	std	Y+8, r18	; 0x08
    1036:	88 85       	ldd	r24, Y+8	; 0x08
    1038:	99 85       	ldd	r25, Y+9	; 0x09
    103a:	82 30       	cpi	r24, 0x02	; 2
    103c:	91 05       	cpc	r25, r1
    103e:	29 f1       	breq	.+74     	; 0x108a <EXTI_SetSenseCtrl+0xa4>
    1040:	28 85       	ldd	r18, Y+8	; 0x08
    1042:	39 85       	ldd	r19, Y+9	; 0x09
    1044:	23 30       	cpi	r18, 0x03	; 3
    1046:	31 05       	cpc	r19, r1
    1048:	34 f4       	brge	.+12     	; 0x1056 <EXTI_SetSenseCtrl+0x70>
    104a:	88 85       	ldd	r24, Y+8	; 0x08
    104c:	99 85       	ldd	r25, Y+9	; 0x09
    104e:	81 30       	cpi	r24, 0x01	; 1
    1050:	91 05       	cpc	r25, r1
    1052:	61 f0       	breq	.+24     	; 0x106c <EXTI_SetSenseCtrl+0x86>
    1054:	47 c0       	rjmp	.+142    	; 0x10e4 <EXTI_SetSenseCtrl+0xfe>
    1056:	28 85       	ldd	r18, Y+8	; 0x08
    1058:	39 85       	ldd	r19, Y+9	; 0x09
    105a:	23 30       	cpi	r18, 0x03	; 3
    105c:	31 05       	cpc	r19, r1
    105e:	21 f1       	breq	.+72     	; 0x10a8 <EXTI_SetSenseCtrl+0xc2>
    1060:	88 85       	ldd	r24, Y+8	; 0x08
    1062:	99 85       	ldd	r25, Y+9	; 0x09
    1064:	84 30       	cpi	r24, 0x04	; 4
    1066:	91 05       	cpc	r25, r1
    1068:	71 f1       	breq	.+92     	; 0x10c6 <EXTI_SetSenseCtrl+0xe0>
    106a:	3c c0       	rjmp	.+120    	; 0x10e4 <EXTI_SetSenseCtrl+0xfe>
		{
		case EXTI_LOW_LEVEL: CLR_BIT(MCUCR, MCUCR_ISC00); CLR_BIT(MCUCR, MCUCR_ISC01); break;
    106c:	a5 e5       	ldi	r26, 0x55	; 85
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e5 e5       	ldi	r30, 0x55	; 85
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	8e 7f       	andi	r24, 0xFE	; 254
    1078:	8c 93       	st	X, r24
    107a:	a5 e5       	ldi	r26, 0x55	; 85
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e5 e5       	ldi	r30, 0x55	; 85
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	8d 7f       	andi	r24, 0xFD	; 253
    1086:	8c 93       	st	X, r24
    1088:	b1 c0       	rjmp	.+354    	; 0x11ec <EXTI_SetSenseCtrl+0x206>
		case EXTI_ON_CHANGE: SET_BIT(MCUCR, MCUCR_ISC00); CLR_BIT(MCUCR, MCUCR_ISC01); break;
    108a:	a5 e5       	ldi	r26, 0x55	; 85
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e5 e5       	ldi	r30, 0x55	; 85
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	81 60       	ori	r24, 0x01	; 1
    1096:	8c 93       	st	X, r24
    1098:	a5 e5       	ldi	r26, 0x55	; 85
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e5 e5       	ldi	r30, 0x55	; 85
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	8d 7f       	andi	r24, 0xFD	; 253
    10a4:	8c 93       	st	X, r24
    10a6:	a2 c0       	rjmp	.+324    	; 0x11ec <EXTI_SetSenseCtrl+0x206>
		case EXTI_FALLING_EDGE: CLR_BIT(MCUCR, MCUCR_ISC00); SET_BIT(MCUCR, MCUCR_ISC01); break;
    10a8:	a5 e5       	ldi	r26, 0x55	; 85
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e5 e5       	ldi	r30, 0x55	; 85
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	8e 7f       	andi	r24, 0xFE	; 254
    10b4:	8c 93       	st	X, r24
    10b6:	a5 e5       	ldi	r26, 0x55	; 85
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e5 e5       	ldi	r30, 0x55	; 85
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	82 60       	ori	r24, 0x02	; 2
    10c2:	8c 93       	st	X, r24
    10c4:	93 c0       	rjmp	.+294    	; 0x11ec <EXTI_SetSenseCtrl+0x206>
		case EXTI_RISING_EDGE: SET_BIT(MCUCR, MCUCR_ISC00); SET_BIT(MCUCR, MCUCR_ISC01); break;
    10c6:	a5 e5       	ldi	r26, 0x55	; 85
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e5 e5       	ldi	r30, 0x55	; 85
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	81 60       	ori	r24, 0x01	; 1
    10d2:	8c 93       	st	X, r24
    10d4:	a5 e5       	ldi	r26, 0x55	; 85
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e5 e5       	ldi	r30, 0x55	; 85
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	82 60       	ori	r24, 0x02	; 2
    10e0:	8c 93       	st	X, r24
    10e2:	84 c0       	rjmp	.+264    	; 0x11ec <EXTI_SetSenseCtrl+0x206>
		default: Local_u8ErrorState = NOK;
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	89 83       	std	Y+1, r24	; 0x01
    10e8:	81 c0       	rjmp	.+258    	; 0x11ec <EXTI_SetSenseCtrl+0x206>
		} break;

	case EXTI_INT1:
		switch(Copy_u8SenseType)
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	3f 83       	std	Y+7, r19	; 0x07
    10f2:	2e 83       	std	Y+6, r18	; 0x06
    10f4:	8e 81       	ldd	r24, Y+6	; 0x06
    10f6:	9f 81       	ldd	r25, Y+7	; 0x07
    10f8:	82 30       	cpi	r24, 0x02	; 2
    10fa:	91 05       	cpc	r25, r1
    10fc:	29 f1       	breq	.+74     	; 0x1148 <EXTI_SetSenseCtrl+0x162>
    10fe:	2e 81       	ldd	r18, Y+6	; 0x06
    1100:	3f 81       	ldd	r19, Y+7	; 0x07
    1102:	23 30       	cpi	r18, 0x03	; 3
    1104:	31 05       	cpc	r19, r1
    1106:	34 f4       	brge	.+12     	; 0x1114 <EXTI_SetSenseCtrl+0x12e>
    1108:	8e 81       	ldd	r24, Y+6	; 0x06
    110a:	9f 81       	ldd	r25, Y+7	; 0x07
    110c:	81 30       	cpi	r24, 0x01	; 1
    110e:	91 05       	cpc	r25, r1
    1110:	61 f0       	breq	.+24     	; 0x112a <EXTI_SetSenseCtrl+0x144>
    1112:	47 c0       	rjmp	.+142    	; 0x11a2 <EXTI_SetSenseCtrl+0x1bc>
    1114:	2e 81       	ldd	r18, Y+6	; 0x06
    1116:	3f 81       	ldd	r19, Y+7	; 0x07
    1118:	23 30       	cpi	r18, 0x03	; 3
    111a:	31 05       	cpc	r19, r1
    111c:	21 f1       	breq	.+72     	; 0x1166 <EXTI_SetSenseCtrl+0x180>
    111e:	8e 81       	ldd	r24, Y+6	; 0x06
    1120:	9f 81       	ldd	r25, Y+7	; 0x07
    1122:	84 30       	cpi	r24, 0x04	; 4
    1124:	91 05       	cpc	r25, r1
    1126:	71 f1       	breq	.+92     	; 0x1184 <EXTI_SetSenseCtrl+0x19e>
    1128:	3c c0       	rjmp	.+120    	; 0x11a2 <EXTI_SetSenseCtrl+0x1bc>
		{
		case EXTI_LOW_LEVEL: CLR_BIT(MCUCR, MCUCR_ISC10); CLR_BIT(MCUCR, MCUCR_ISC11); break;
    112a:	a5 e5       	ldi	r26, 0x55	; 85
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e5 e5       	ldi	r30, 0x55	; 85
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	8b 7f       	andi	r24, 0xFB	; 251
    1136:	8c 93       	st	X, r24
    1138:	a5 e5       	ldi	r26, 0x55	; 85
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e5 e5       	ldi	r30, 0x55	; 85
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	87 7f       	andi	r24, 0xF7	; 247
    1144:	8c 93       	st	X, r24
    1146:	52 c0       	rjmp	.+164    	; 0x11ec <EXTI_SetSenseCtrl+0x206>
		case EXTI_ON_CHANGE: SET_BIT(MCUCR, MCUCR_ISC10); CLR_BIT(MCUCR, MCUCR_ISC11); break;
    1148:	a5 e5       	ldi	r26, 0x55	; 85
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e5 e5       	ldi	r30, 0x55	; 85
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	84 60       	ori	r24, 0x04	; 4
    1154:	8c 93       	st	X, r24
    1156:	a5 e5       	ldi	r26, 0x55	; 85
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e5 e5       	ldi	r30, 0x55	; 85
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	87 7f       	andi	r24, 0xF7	; 247
    1162:	8c 93       	st	X, r24
    1164:	43 c0       	rjmp	.+134    	; 0x11ec <EXTI_SetSenseCtrl+0x206>
		case EXTI_FALLING_EDGE: CLR_BIT(MCUCR, MCUCR_ISC10); SET_BIT(MCUCR, MCUCR_ISC11); break;
    1166:	a5 e5       	ldi	r26, 0x55	; 85
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e5 e5       	ldi	r30, 0x55	; 85
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	8b 7f       	andi	r24, 0xFB	; 251
    1172:	8c 93       	st	X, r24
    1174:	a5 e5       	ldi	r26, 0x55	; 85
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e5 e5       	ldi	r30, 0x55	; 85
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	88 60       	ori	r24, 0x08	; 8
    1180:	8c 93       	st	X, r24
    1182:	34 c0       	rjmp	.+104    	; 0x11ec <EXTI_SetSenseCtrl+0x206>
		case EXTI_RISING_EDGE: SET_BIT(MCUCR, MCUCR_ISC10); SET_BIT(MCUCR, MCUCR_ISC11); break;
    1184:	a5 e5       	ldi	r26, 0x55	; 85
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e5 e5       	ldi	r30, 0x55	; 85
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	84 60       	ori	r24, 0x04	; 4
    1190:	8c 93       	st	X, r24
    1192:	a5 e5       	ldi	r26, 0x55	; 85
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e5 e5       	ldi	r30, 0x55	; 85
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	88 60       	ori	r24, 0x08	; 8
    119e:	8c 93       	st	X, r24
    11a0:	25 c0       	rjmp	.+74     	; 0x11ec <EXTI_SetSenseCtrl+0x206>
		default: Local_u8ErrorState = NOK;
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	89 83       	std	Y+1, r24	; 0x01
    11a6:	22 c0       	rjmp	.+68     	; 0x11ec <EXTI_SetSenseCtrl+0x206>
		} break;

	case EXTI_INT2:
		switch(Copy_u8SenseType)
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	3d 83       	std	Y+5, r19	; 0x05
    11b0:	2c 83       	std	Y+4, r18	; 0x04
    11b2:	8c 81       	ldd	r24, Y+4	; 0x04
    11b4:	9d 81       	ldd	r25, Y+5	; 0x05
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	91 05       	cpc	r25, r1
    11ba:	31 f0       	breq	.+12     	; 0x11c8 <EXTI_SetSenseCtrl+0x1e2>
    11bc:	2c 81       	ldd	r18, Y+4	; 0x04
    11be:	3d 81       	ldd	r19, Y+5	; 0x05
    11c0:	22 30       	cpi	r18, 0x02	; 2
    11c2:	31 05       	cpc	r19, r1
    11c4:	49 f0       	breq	.+18     	; 0x11d8 <EXTI_SetSenseCtrl+0x1f2>
    11c6:	10 c0       	rjmp	.+32     	; 0x11e8 <EXTI_SetSenseCtrl+0x202>
		{
		case EXTI_LOW_LEVEL: CLR_BIT(MCUCSR, MCUCSR_ISC2);break;
    11c8:	a4 e5       	ldi	r26, 0x54	; 84
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	e4 e5       	ldi	r30, 0x54	; 84
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	8f 7b       	andi	r24, 0xBF	; 191
    11d4:	8c 93       	st	X, r24
    11d6:	0a c0       	rjmp	.+20     	; 0x11ec <EXTI_SetSenseCtrl+0x206>
		case EXTI_ON_CHANGE: SET_BIT(MCUCSR, MCUCSR_ISC2);break;
    11d8:	a4 e5       	ldi	r26, 0x54	; 84
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e4 e5       	ldi	r30, 0x54	; 84
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	80 64       	ori	r24, 0x40	; 64
    11e4:	8c 93       	st	X, r24
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <EXTI_SetSenseCtrl+0x206>
		default: Local_u8ErrorState = NOK;
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	89 83       	std	Y+1, r24	; 0x01
		} break;

	}


	return Local_u8ErrorState;
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ee:	2b 96       	adiw	r28, 0x0b	; 11
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	08 95       	ret

00001200 <EXTI_Enable>:

u8 EXTI_Enable(u8 Copy_u8IntNum)
{
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	00 d0       	rcall	.+0      	; 0x1206 <EXTI_Enable+0x6>
    1206:	00 d0       	rcall	.+0      	; 0x1208 <EXTI_Enable+0x8>
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    120e:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8IntNum)
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	3c 83       	std	Y+4, r19	; 0x04
    1218:	2b 83       	std	Y+3, r18	; 0x03
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	9c 81       	ldd	r25, Y+4	; 0x04
    121e:	81 30       	cpi	r24, 0x01	; 1
    1220:	91 05       	cpc	r25, r1
    1222:	89 f0       	breq	.+34     	; 0x1246 <EXTI_Enable+0x46>
    1224:	2b 81       	ldd	r18, Y+3	; 0x03
    1226:	3c 81       	ldd	r19, Y+4	; 0x04
    1228:	22 30       	cpi	r18, 0x02	; 2
    122a:	31 05       	cpc	r19, r1
    122c:	a1 f0       	breq	.+40     	; 0x1256 <EXTI_Enable+0x56>
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	9c 81       	ldd	r25, Y+4	; 0x04
    1232:	00 97       	sbiw	r24, 0x00	; 0
    1234:	c1 f4       	brne	.+48     	; 0x1266 <EXTI_Enable+0x66>
	{
	case EXTI_INT0: SET_BIT(GICR, GICR_INT0); break;
    1236:	ab e5       	ldi	r26, 0x5B	; 91
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	eb e5       	ldi	r30, 0x5B	; 91
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	80 64       	ori	r24, 0x40	; 64
    1242:	8c 93       	st	X, r24
    1244:	12 c0       	rjmp	.+36     	; 0x126a <EXTI_Enable+0x6a>
	case EXTI_INT1: SET_BIT(GICR, GICR_INT1); break;
    1246:	ab e5       	ldi	r26, 0x5B	; 91
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	eb e5       	ldi	r30, 0x5B	; 91
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	80 68       	ori	r24, 0x80	; 128
    1252:	8c 93       	st	X, r24
    1254:	0a c0       	rjmp	.+20     	; 0x126a <EXTI_Enable+0x6a>
	case EXTI_INT2: SET_BIT(GICR, GICR_INT2); break;
    1256:	ab e5       	ldi	r26, 0x5B	; 91
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	eb e5       	ldi	r30, 0x5B	; 91
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	80 62       	ori	r24, 0x20	; 32
    1262:	8c 93       	st	X, r24
    1264:	02 c0       	rjmp	.+4      	; 0x126a <EXTI_Enable+0x6a>
	default: Local_u8ErrorState = NOK;
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_u8ErrorState;
    126a:	89 81       	ldd	r24, Y+1	; 0x01
}
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <EXTI_Disable>:

u8 EXTI_Disable(u8 Copy_u8IntNum)
{
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	00 d0       	rcall	.+0      	; 0x1280 <EXTI_Disable+0x6>
    1280:	00 d0       	rcall	.+0      	; 0x1282 <EXTI_Disable+0x8>
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    1288:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8IntNum)
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	3c 83       	std	Y+4, r19	; 0x04
    1292:	2b 83       	std	Y+3, r18	; 0x03
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	9c 81       	ldd	r25, Y+4	; 0x04
    1298:	81 30       	cpi	r24, 0x01	; 1
    129a:	91 05       	cpc	r25, r1
    129c:	89 f0       	breq	.+34     	; 0x12c0 <EXTI_Disable+0x46>
    129e:	2b 81       	ldd	r18, Y+3	; 0x03
    12a0:	3c 81       	ldd	r19, Y+4	; 0x04
    12a2:	22 30       	cpi	r18, 0x02	; 2
    12a4:	31 05       	cpc	r19, r1
    12a6:	a1 f0       	breq	.+40     	; 0x12d0 <EXTI_Disable+0x56>
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	9c 81       	ldd	r25, Y+4	; 0x04
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	c1 f4       	brne	.+48     	; 0x12e0 <EXTI_Disable+0x66>
	{
	case EXTI_INT0: CLR_BIT(GICR, GICR_INT0); break;
    12b0:	ab e5       	ldi	r26, 0x5B	; 91
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	eb e5       	ldi	r30, 0x5B	; 91
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	8f 7b       	andi	r24, 0xBF	; 191
    12bc:	8c 93       	st	X, r24
    12be:	12 c0       	rjmp	.+36     	; 0x12e4 <EXTI_Disable+0x6a>
	case EXTI_INT1: CLR_BIT(GICR, GICR_INT1); break;
    12c0:	ab e5       	ldi	r26, 0x5B	; 91
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	eb e5       	ldi	r30, 0x5B	; 91
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	8f 77       	andi	r24, 0x7F	; 127
    12cc:	8c 93       	st	X, r24
    12ce:	0a c0       	rjmp	.+20     	; 0x12e4 <EXTI_Disable+0x6a>
	case EXTI_INT2: CLR_BIT(GICR, GICR_INT2); break;
    12d0:	ab e5       	ldi	r26, 0x5B	; 91
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	eb e5       	ldi	r30, 0x5B	; 91
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	8f 7d       	andi	r24, 0xDF	; 223
    12dc:	8c 93       	st	X, r24
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <EXTI_Disable+0x6a>
	default: Local_u8ErrorState = NOK;
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_u8ErrorState;
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	08 95       	ret

000012f4 <EXTI_SetCallBack>:


u8 EXTI_SetCallBack(u8 Copy_u8IntNum, void (*Copy_pfFuncPtr)(void))
{
    12f4:	df 93       	push	r29
    12f6:	cf 93       	push	r28
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <EXTI_SetCallBack+0x6>
    12fa:	00 d0       	rcall	.+0      	; 0x12fc <EXTI_SetCallBack+0x8>
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	8a 83       	std	Y+2, r24	; 0x02
    1302:	7c 83       	std	Y+4, r23	; 0x04
    1304:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8ErrorState = OK;
    1306:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pfFuncPtr != NULL)
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	9c 81       	ldd	r25, Y+4	; 0x04
    130c:	00 97       	sbiw	r24, 0x00	; 0
    130e:	69 f0       	breq	.+26     	; 0x132a <EXTI_SetCallBack+0x36>
	{
		EXTI_pfINTFunctionPtr[Copy_u8IntNum] = Copy_pfFuncPtr;
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	88 2f       	mov	r24, r24
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	fc 01       	movw	r30, r24
    131c:	e6 5f       	subi	r30, 0xF6	; 246
    131e:	fe 4f       	sbci	r31, 0xFE	; 254
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	9c 81       	ldd	r25, Y+4	; 0x04
    1324:	91 83       	std	Z+1, r25	; 0x01
    1326:	80 83       	st	Z, r24
    1328:	02 c0       	rjmp	.+4      	; 0x132e <EXTI_SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorState = NOK;
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    132e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <__vector_1>:
/**
 * @brief INT0 ISR
 */
void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
    133e:	1f 92       	push	r1
    1340:	0f 92       	push	r0
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	0f 92       	push	r0
    1346:	11 24       	eor	r1, r1
    1348:	2f 93       	push	r18
    134a:	3f 93       	push	r19
    134c:	4f 93       	push	r20
    134e:	5f 93       	push	r21
    1350:	6f 93       	push	r22
    1352:	7f 93       	push	r23
    1354:	8f 93       	push	r24
    1356:	9f 93       	push	r25
    1358:	af 93       	push	r26
    135a:	bf 93       	push	r27
    135c:	ef 93       	push	r30
    135e:	ff 93       	push	r31
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pfINTFunctionPtr[EXTI_INT0] != NULL)
    1368:	80 91 0a 01 	lds	r24, 0x010A
    136c:	90 91 0b 01 	lds	r25, 0x010B
    1370:	00 97       	sbiw	r24, 0x00	; 0
    1372:	29 f0       	breq	.+10     	; 0x137e <__vector_1+0x40>
	{
		EXTI_pfINTFunctionPtr[EXTI_INT0]();
    1374:	e0 91 0a 01 	lds	r30, 0x010A
    1378:	f0 91 0b 01 	lds	r31, 0x010B
    137c:	09 95       	icall
	}
}
    137e:	cf 91       	pop	r28
    1380:	df 91       	pop	r29
    1382:	ff 91       	pop	r31
    1384:	ef 91       	pop	r30
    1386:	bf 91       	pop	r27
    1388:	af 91       	pop	r26
    138a:	9f 91       	pop	r25
    138c:	8f 91       	pop	r24
    138e:	7f 91       	pop	r23
    1390:	6f 91       	pop	r22
    1392:	5f 91       	pop	r21
    1394:	4f 91       	pop	r20
    1396:	3f 91       	pop	r19
    1398:	2f 91       	pop	r18
    139a:	0f 90       	pop	r0
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	0f 90       	pop	r0
    13a0:	1f 90       	pop	r1
    13a2:	18 95       	reti

000013a4 <__vector_2>:
/**
 * @brief INT1 ISR
 */
void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
    13a4:	1f 92       	push	r1
    13a6:	0f 92       	push	r0
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	0f 92       	push	r0
    13ac:	11 24       	eor	r1, r1
    13ae:	2f 93       	push	r18
    13b0:	3f 93       	push	r19
    13b2:	4f 93       	push	r20
    13b4:	5f 93       	push	r21
    13b6:	6f 93       	push	r22
    13b8:	7f 93       	push	r23
    13ba:	8f 93       	push	r24
    13bc:	9f 93       	push	r25
    13be:	af 93       	push	r26
    13c0:	bf 93       	push	r27
    13c2:	ef 93       	push	r30
    13c4:	ff 93       	push	r31
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pfINTFunctionPtr[EXTI_INT1] != NULL)
    13ce:	80 91 0c 01 	lds	r24, 0x010C
    13d2:	90 91 0d 01 	lds	r25, 0x010D
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	29 f0       	breq	.+10     	; 0x13e4 <__vector_2+0x40>
	{
		EXTI_pfINTFunctionPtr[EXTI_INT1]();
    13da:	e0 91 0c 01 	lds	r30, 0x010C
    13de:	f0 91 0d 01 	lds	r31, 0x010D
    13e2:	09 95       	icall
	}
}
    13e4:	cf 91       	pop	r28
    13e6:	df 91       	pop	r29
    13e8:	ff 91       	pop	r31
    13ea:	ef 91       	pop	r30
    13ec:	bf 91       	pop	r27
    13ee:	af 91       	pop	r26
    13f0:	9f 91       	pop	r25
    13f2:	8f 91       	pop	r24
    13f4:	7f 91       	pop	r23
    13f6:	6f 91       	pop	r22
    13f8:	5f 91       	pop	r21
    13fa:	4f 91       	pop	r20
    13fc:	3f 91       	pop	r19
    13fe:	2f 91       	pop	r18
    1400:	0f 90       	pop	r0
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	0f 90       	pop	r0
    1406:	1f 90       	pop	r1
    1408:	18 95       	reti

0000140a <__vector_3>:
/**
 * @brief INT2 ISR
 */
void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
    140a:	1f 92       	push	r1
    140c:	0f 92       	push	r0
    140e:	0f b6       	in	r0, 0x3f	; 63
    1410:	0f 92       	push	r0
    1412:	11 24       	eor	r1, r1
    1414:	2f 93       	push	r18
    1416:	3f 93       	push	r19
    1418:	4f 93       	push	r20
    141a:	5f 93       	push	r21
    141c:	6f 93       	push	r22
    141e:	7f 93       	push	r23
    1420:	8f 93       	push	r24
    1422:	9f 93       	push	r25
    1424:	af 93       	push	r26
    1426:	bf 93       	push	r27
    1428:	ef 93       	push	r30
    142a:	ff 93       	push	r31
    142c:	df 93       	push	r29
    142e:	cf 93       	push	r28
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pfINTFunctionPtr[EXTI_INT2] != NULL)
    1434:	80 91 0e 01 	lds	r24, 0x010E
    1438:	90 91 0f 01 	lds	r25, 0x010F
    143c:	00 97       	sbiw	r24, 0x00	; 0
    143e:	29 f0       	breq	.+10     	; 0x144a <__vector_3+0x40>
	{
		EXTI_pfINTFunctionPtr[EXTI_INT2]();
    1440:	e0 91 0e 01 	lds	r30, 0x010E
    1444:	f0 91 0f 01 	lds	r31, 0x010F
    1448:	09 95       	icall
	}
}
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	ff 91       	pop	r31
    1450:	ef 91       	pop	r30
    1452:	bf 91       	pop	r27
    1454:	af 91       	pop	r26
    1456:	9f 91       	pop	r25
    1458:	8f 91       	pop	r24
    145a:	7f 91       	pop	r23
    145c:	6f 91       	pop	r22
    145e:	5f 91       	pop	r21
    1460:	4f 91       	pop	r20
    1462:	3f 91       	pop	r19
    1464:	2f 91       	pop	r18
    1466:	0f 90       	pop	r0
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	0f 90       	pop	r0
    146c:	1f 90       	pop	r1
    146e:	18 95       	reti

00001470 <DioSetPinDirection>:
#include "GPIO.h"
#include "registers.h"


 void DioSetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
 {
    1470:	df 93       	push	r29
    1472:	cf 93       	push	r28
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
    1478:	27 97       	sbiw	r28, 0x07	; 7
    147a:	0f b6       	in	r0, 0x3f	; 63
    147c:	f8 94       	cli
    147e:	de bf       	out	0x3e, r29	; 62
    1480:	0f be       	out	0x3f, r0	; 63
    1482:	cd bf       	out	0x3d, r28	; 61
    1484:	89 83       	std	Y+1, r24	; 0x01
    1486:	6a 83       	std	Y+2, r22	; 0x02
    1488:	4b 83       	std	Y+3, r20	; 0x03


	 if (Copy_u8Pin <= pin7)
    148a:	8a 81       	ldd	r24, Y+2	; 0x02
    148c:	88 30       	cpi	r24, 0x08	; 8
    148e:	08 f0       	brcs	.+2      	; 0x1492 <DioSetPinDirection+0x22>
    1490:	ea c0       	rjmp	.+468    	; 0x1666 <DioSetPinDirection+0x1f6>
	 {

		 if (Copy_u8Direction == INPUT)
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	88 23       	and	r24, r24
    1496:	09 f0       	breq	.+2      	; 0x149a <DioSetPinDirection+0x2a>
    1498:	74 c0       	rjmp	.+232    	; 0x1582 <DioSetPinDirection+0x112>
		 {
			 switch (Copy_u8Port)
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	3f 83       	std	Y+7, r19	; 0x07
    14a2:	2e 83       	std	Y+6, r18	; 0x06
    14a4:	8e 81       	ldd	r24, Y+6	; 0x06
    14a6:	9f 81       	ldd	r25, Y+7	; 0x07
    14a8:	81 30       	cpi	r24, 0x01	; 1
    14aa:	91 05       	cpc	r25, r1
    14ac:	59 f1       	breq	.+86     	; 0x1504 <DioSetPinDirection+0x94>
    14ae:	2e 81       	ldd	r18, Y+6	; 0x06
    14b0:	3f 81       	ldd	r19, Y+7	; 0x07
    14b2:	22 30       	cpi	r18, 0x02	; 2
    14b4:	31 05       	cpc	r19, r1
    14b6:	2c f4       	brge	.+10     	; 0x14c2 <DioSetPinDirection+0x52>
    14b8:	8e 81       	ldd	r24, Y+6	; 0x06
    14ba:	9f 81       	ldd	r25, Y+7	; 0x07
    14bc:	00 97       	sbiw	r24, 0x00	; 0
    14be:	69 f0       	breq	.+26     	; 0x14da <DioSetPinDirection+0x6a>
    14c0:	d2 c0       	rjmp	.+420    	; 0x1666 <DioSetPinDirection+0x1f6>
    14c2:	2e 81       	ldd	r18, Y+6	; 0x06
    14c4:	3f 81       	ldd	r19, Y+7	; 0x07
    14c6:	22 30       	cpi	r18, 0x02	; 2
    14c8:	31 05       	cpc	r19, r1
    14ca:	89 f1       	breq	.+98     	; 0x152e <DioSetPinDirection+0xbe>
    14cc:	8e 81       	ldd	r24, Y+6	; 0x06
    14ce:	9f 81       	ldd	r25, Y+7	; 0x07
    14d0:	83 30       	cpi	r24, 0x03	; 3
    14d2:	91 05       	cpc	r25, r1
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <DioSetPinDirection+0x68>
    14d6:	40 c0       	rjmp	.+128    	; 0x1558 <DioSetPinDirection+0xe8>
    14d8:	c6 c0       	rjmp	.+396    	; 0x1666 <DioSetPinDirection+0x1f6>
			 {
			 	 case portA: CLR_BIT(DDRA, Copy_u8Pin); break;
    14da:	aa e3       	ldi	r26, 0x3A	; 58
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	ea e3       	ldi	r30, 0x3A	; 58
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	48 2f       	mov	r20, r24
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	02 2e       	mov	r0, r18
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <DioSetPinDirection+0x88>
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	0a 94       	dec	r0
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <DioSetPinDirection+0x84>
    14fc:	80 95       	com	r24
    14fe:	84 23       	and	r24, r20
    1500:	8c 93       	st	X, r24
    1502:	b1 c0       	rjmp	.+354    	; 0x1666 <DioSetPinDirection+0x1f6>
			 	 case portB: CLR_BIT(DDRB, Copy_u8Pin); break;
    1504:	a7 e3       	ldi	r26, 0x37	; 55
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e7 e3       	ldi	r30, 0x37	; 55
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	48 2f       	mov	r20, r24
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	02 2e       	mov	r0, r18
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <DioSetPinDirection+0xb2>
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	0a 94       	dec	r0
    1524:	e2 f7       	brpl	.-8      	; 0x151e <DioSetPinDirection+0xae>
    1526:	80 95       	com	r24
    1528:	84 23       	and	r24, r20
    152a:	8c 93       	st	X, r24
    152c:	9c c0       	rjmp	.+312    	; 0x1666 <DioSetPinDirection+0x1f6>
			 	 case portC: CLR_BIT(DDRC, Copy_u8Pin); break;
    152e:	a4 e3       	ldi	r26, 0x34	; 52
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	e4 e3       	ldi	r30, 0x34	; 52
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	48 2f       	mov	r20, r24
    153a:	8a 81       	ldd	r24, Y+2	; 0x02
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	02 2e       	mov	r0, r18
    1546:	02 c0       	rjmp	.+4      	; 0x154c <DioSetPinDirection+0xdc>
    1548:	88 0f       	add	r24, r24
    154a:	99 1f       	adc	r25, r25
    154c:	0a 94       	dec	r0
    154e:	e2 f7       	brpl	.-8      	; 0x1548 <DioSetPinDirection+0xd8>
    1550:	80 95       	com	r24
    1552:	84 23       	and	r24, r20
    1554:	8c 93       	st	X, r24
    1556:	87 c0       	rjmp	.+270    	; 0x1666 <DioSetPinDirection+0x1f6>
			 	 case portD: CLR_BIT(DDRD, Copy_u8Pin); break;
    1558:	a1 e3       	ldi	r26, 0x31	; 49
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	e1 e3       	ldi	r30, 0x31	; 49
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	48 2f       	mov	r20, r24
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	02 2e       	mov	r0, r18
    1570:	02 c0       	rjmp	.+4      	; 0x1576 <DioSetPinDirection+0x106>
    1572:	88 0f       	add	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	0a 94       	dec	r0
    1578:	e2 f7       	brpl	.-8      	; 0x1572 <DioSetPinDirection+0x102>
    157a:	80 95       	com	r24
    157c:	84 23       	and	r24, r20
    157e:	8c 93       	st	X, r24
    1580:	72 c0       	rjmp	.+228    	; 0x1666 <DioSetPinDirection+0x1f6>
			 	 default:  break;

			 }
		 }

		 else if (Copy_u8Direction == OUTPUT)
    1582:	8b 81       	ldd	r24, Y+3	; 0x03
    1584:	81 30       	cpi	r24, 0x01	; 1
    1586:	09 f0       	breq	.+2      	; 0x158a <DioSetPinDirection+0x11a>
    1588:	6e c0       	rjmp	.+220    	; 0x1666 <DioSetPinDirection+0x1f6>
		 {
			 switch(Copy_u8Port)
    158a:	89 81       	ldd	r24, Y+1	; 0x01
    158c:	28 2f       	mov	r18, r24
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	3d 83       	std	Y+5, r19	; 0x05
    1592:	2c 83       	std	Y+4, r18	; 0x04
    1594:	8c 81       	ldd	r24, Y+4	; 0x04
    1596:	9d 81       	ldd	r25, Y+5	; 0x05
    1598:	81 30       	cpi	r24, 0x01	; 1
    159a:	91 05       	cpc	r25, r1
    159c:	49 f1       	breq	.+82     	; 0x15f0 <DioSetPinDirection+0x180>
    159e:	2c 81       	ldd	r18, Y+4	; 0x04
    15a0:	3d 81       	ldd	r19, Y+5	; 0x05
    15a2:	22 30       	cpi	r18, 0x02	; 2
    15a4:	31 05       	cpc	r19, r1
    15a6:	2c f4       	brge	.+10     	; 0x15b2 <DioSetPinDirection+0x142>
    15a8:	8c 81       	ldd	r24, Y+4	; 0x04
    15aa:	9d 81       	ldd	r25, Y+5	; 0x05
    15ac:	00 97       	sbiw	r24, 0x00	; 0
    15ae:	61 f0       	breq	.+24     	; 0x15c8 <DioSetPinDirection+0x158>
    15b0:	5a c0       	rjmp	.+180    	; 0x1666 <DioSetPinDirection+0x1f6>
    15b2:	2c 81       	ldd	r18, Y+4	; 0x04
    15b4:	3d 81       	ldd	r19, Y+5	; 0x05
    15b6:	22 30       	cpi	r18, 0x02	; 2
    15b8:	31 05       	cpc	r19, r1
    15ba:	71 f1       	breq	.+92     	; 0x1618 <DioSetPinDirection+0x1a8>
    15bc:	8c 81       	ldd	r24, Y+4	; 0x04
    15be:	9d 81       	ldd	r25, Y+5	; 0x05
    15c0:	83 30       	cpi	r24, 0x03	; 3
    15c2:	91 05       	cpc	r25, r1
    15c4:	e9 f1       	breq	.+122    	; 0x1640 <DioSetPinDirection+0x1d0>
    15c6:	4f c0       	rjmp	.+158    	; 0x1666 <DioSetPinDirection+0x1f6>
			 {
				 case portA: SET_BIT(DDRA, Copy_u8Pin); break;
    15c8:	aa e3       	ldi	r26, 0x3A	; 58
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	ea e3       	ldi	r30, 0x3A	; 58
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	48 2f       	mov	r20, r24
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	02 2e       	mov	r0, r18
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <DioSetPinDirection+0x176>
    15e2:	88 0f       	add	r24, r24
    15e4:	99 1f       	adc	r25, r25
    15e6:	0a 94       	dec	r0
    15e8:	e2 f7       	brpl	.-8      	; 0x15e2 <DioSetPinDirection+0x172>
    15ea:	84 2b       	or	r24, r20
    15ec:	8c 93       	st	X, r24
    15ee:	3b c0       	rjmp	.+118    	; 0x1666 <DioSetPinDirection+0x1f6>
			 	 case portB: SET_BIT(DDRB, Copy_u8Pin); break;
    15f0:	a7 e3       	ldi	r26, 0x37	; 55
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e7 e3       	ldi	r30, 0x37	; 55
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	48 2f       	mov	r20, r24
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	02 2e       	mov	r0, r18
    1608:	02 c0       	rjmp	.+4      	; 0x160e <DioSetPinDirection+0x19e>
    160a:	88 0f       	add	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	0a 94       	dec	r0
    1610:	e2 f7       	brpl	.-8      	; 0x160a <DioSetPinDirection+0x19a>
    1612:	84 2b       	or	r24, r20
    1614:	8c 93       	st	X, r24
    1616:	27 c0       	rjmp	.+78     	; 0x1666 <DioSetPinDirection+0x1f6>
			 	 case portC: SET_BIT(DDRC, Copy_u8Pin); break;
    1618:	a4 e3       	ldi	r26, 0x34	; 52
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	e4 e3       	ldi	r30, 0x34	; 52
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	48 2f       	mov	r20, r24
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	02 2e       	mov	r0, r18
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <DioSetPinDirection+0x1c6>
    1632:	88 0f       	add	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	0a 94       	dec	r0
    1638:	e2 f7       	brpl	.-8      	; 0x1632 <DioSetPinDirection+0x1c2>
    163a:	84 2b       	or	r24, r20
    163c:	8c 93       	st	X, r24
    163e:	13 c0       	rjmp	.+38     	; 0x1666 <DioSetPinDirection+0x1f6>
			 	 case portD: SET_BIT(DDRD, Copy_u8Pin); break;
    1640:	a1 e3       	ldi	r26, 0x31	; 49
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	e1 e3       	ldi	r30, 0x31	; 49
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	48 2f       	mov	r20, r24
    164c:	8a 81       	ldd	r24, Y+2	; 0x02
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	02 2e       	mov	r0, r18
    1658:	02 c0       	rjmp	.+4      	; 0x165e <DioSetPinDirection+0x1ee>
    165a:	88 0f       	add	r24, r24
    165c:	99 1f       	adc	r25, r25
    165e:	0a 94       	dec	r0
    1660:	e2 f7       	brpl	.-8      	; 0x165a <DioSetPinDirection+0x1ea>
    1662:	84 2b       	or	r24, r20
    1664:	8c 93       	st	X, r24
	 else
	 {

	 }

 }
    1666:	27 96       	adiw	r28, 0x07	; 7
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	f8 94       	cli
    166c:	de bf       	out	0x3e, r29	; 62
    166e:	0f be       	out	0x3f, r0	; 63
    1670:	cd bf       	out	0x3d, r28	; 61
    1672:	cf 91       	pop	r28
    1674:	df 91       	pop	r29
    1676:	08 95       	ret

00001678 <DioSetPinValue>:

 void DioSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
 {
    1678:	df 93       	push	r29
    167a:	cf 93       	push	r28
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
    1680:	27 97       	sbiw	r28, 0x07	; 7
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	f8 94       	cli
    1686:	de bf       	out	0x3e, r29	; 62
    1688:	0f be       	out	0x3f, r0	; 63
    168a:	cd bf       	out	0x3d, r28	; 61
    168c:	89 83       	std	Y+1, r24	; 0x01
    168e:	6a 83       	std	Y+2, r22	; 0x02
    1690:	4b 83       	std	Y+3, r20	; 0x03


	 	 if (Copy_u8Pin <= pin7)
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	88 30       	cpi	r24, 0x08	; 8
    1696:	08 f0       	brcs	.+2      	; 0x169a <DioSetPinValue+0x22>
    1698:	ea c0       	rjmp	.+468    	; 0x186e <DioSetPinValue+0x1f6>
	 	 {

	 		 if (Copy_u8Value == HIGH)
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	81 30       	cpi	r24, 0x01	; 1
    169e:	09 f0       	breq	.+2      	; 0x16a2 <DioSetPinValue+0x2a>
    16a0:	6f c0       	rjmp	.+222    	; 0x1780 <DioSetPinValue+0x108>
	 		 {
	 			 switch (Copy_u8Port)
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	3f 83       	std	Y+7, r19	; 0x07
    16aa:	2e 83       	std	Y+6, r18	; 0x06
    16ac:	8e 81       	ldd	r24, Y+6	; 0x06
    16ae:	9f 81       	ldd	r25, Y+7	; 0x07
    16b0:	81 30       	cpi	r24, 0x01	; 1
    16b2:	91 05       	cpc	r25, r1
    16b4:	49 f1       	breq	.+82     	; 0x1708 <DioSetPinValue+0x90>
    16b6:	2e 81       	ldd	r18, Y+6	; 0x06
    16b8:	3f 81       	ldd	r19, Y+7	; 0x07
    16ba:	22 30       	cpi	r18, 0x02	; 2
    16bc:	31 05       	cpc	r19, r1
    16be:	2c f4       	brge	.+10     	; 0x16ca <DioSetPinValue+0x52>
    16c0:	8e 81       	ldd	r24, Y+6	; 0x06
    16c2:	9f 81       	ldd	r25, Y+7	; 0x07
    16c4:	00 97       	sbiw	r24, 0x00	; 0
    16c6:	61 f0       	breq	.+24     	; 0x16e0 <DioSetPinValue+0x68>
    16c8:	d2 c0       	rjmp	.+420    	; 0x186e <DioSetPinValue+0x1f6>
    16ca:	2e 81       	ldd	r18, Y+6	; 0x06
    16cc:	3f 81       	ldd	r19, Y+7	; 0x07
    16ce:	22 30       	cpi	r18, 0x02	; 2
    16d0:	31 05       	cpc	r19, r1
    16d2:	71 f1       	breq	.+92     	; 0x1730 <DioSetPinValue+0xb8>
    16d4:	8e 81       	ldd	r24, Y+6	; 0x06
    16d6:	9f 81       	ldd	r25, Y+7	; 0x07
    16d8:	83 30       	cpi	r24, 0x03	; 3
    16da:	91 05       	cpc	r25, r1
    16dc:	e9 f1       	breq	.+122    	; 0x1758 <DioSetPinValue+0xe0>
    16de:	c7 c0       	rjmp	.+398    	; 0x186e <DioSetPinValue+0x1f6>
	 			 {
	 			 	 case portA: SET_BIT(PORTA, Copy_u8Pin); break;
    16e0:	ab e3       	ldi	r26, 0x3B	; 59
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	eb e3       	ldi	r30, 0x3B	; 59
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	48 2f       	mov	r20, r24
    16ec:	8a 81       	ldd	r24, Y+2	; 0x02
    16ee:	28 2f       	mov	r18, r24
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	02 2e       	mov	r0, r18
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <DioSetPinValue+0x86>
    16fa:	88 0f       	add	r24, r24
    16fc:	99 1f       	adc	r25, r25
    16fe:	0a 94       	dec	r0
    1700:	e2 f7       	brpl	.-8      	; 0x16fa <DioSetPinValue+0x82>
    1702:	84 2b       	or	r24, r20
    1704:	8c 93       	st	X, r24
    1706:	b3 c0       	rjmp	.+358    	; 0x186e <DioSetPinValue+0x1f6>
	 			 	 case portB: SET_BIT(PORTB, Copy_u8Pin); break;
    1708:	a8 e3       	ldi	r26, 0x38	; 56
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	e8 e3       	ldi	r30, 0x38	; 56
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	48 2f       	mov	r20, r24
    1714:	8a 81       	ldd	r24, Y+2	; 0x02
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	02 2e       	mov	r0, r18
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <DioSetPinValue+0xae>
    1722:	88 0f       	add	r24, r24
    1724:	99 1f       	adc	r25, r25
    1726:	0a 94       	dec	r0
    1728:	e2 f7       	brpl	.-8      	; 0x1722 <DioSetPinValue+0xaa>
    172a:	84 2b       	or	r24, r20
    172c:	8c 93       	st	X, r24
    172e:	9f c0       	rjmp	.+318    	; 0x186e <DioSetPinValue+0x1f6>
	 			 	 case portC: SET_BIT(PORTC, Copy_u8Pin); break;
    1730:	a5 e3       	ldi	r26, 0x35	; 53
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	e5 e3       	ldi	r30, 0x35	; 53
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	48 2f       	mov	r20, r24
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	02 2e       	mov	r0, r18
    1748:	02 c0       	rjmp	.+4      	; 0x174e <DioSetPinValue+0xd6>
    174a:	88 0f       	add	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	0a 94       	dec	r0
    1750:	e2 f7       	brpl	.-8      	; 0x174a <DioSetPinValue+0xd2>
    1752:	84 2b       	or	r24, r20
    1754:	8c 93       	st	X, r24
    1756:	8b c0       	rjmp	.+278    	; 0x186e <DioSetPinValue+0x1f6>
	 			 	 case portD: SET_BIT(PORTD, Copy_u8Pin); break;
    1758:	a2 e3       	ldi	r26, 0x32	; 50
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	e2 e3       	ldi	r30, 0x32	; 50
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	48 2f       	mov	r20, r24
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	28 2f       	mov	r18, r24
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	02 2e       	mov	r0, r18
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <DioSetPinValue+0xfe>
    1772:	88 0f       	add	r24, r24
    1774:	99 1f       	adc	r25, r25
    1776:	0a 94       	dec	r0
    1778:	e2 f7       	brpl	.-8      	; 0x1772 <DioSetPinValue+0xfa>
    177a:	84 2b       	or	r24, r20
    177c:	8c 93       	st	X, r24
    177e:	77 c0       	rjmp	.+238    	; 0x186e <DioSetPinValue+0x1f6>
	 			 	 default:  break;

	 			 }
	 		 }

	 		 else if (Copy_u8Value == LOW)
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	88 23       	and	r24, r24
    1784:	09 f0       	breq	.+2      	; 0x1788 <DioSetPinValue+0x110>
    1786:	73 c0       	rjmp	.+230    	; 0x186e <DioSetPinValue+0x1f6>
	 		 {
	 			 switch(Copy_u8Port)
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	3d 83       	std	Y+5, r19	; 0x05
    1790:	2c 83       	std	Y+4, r18	; 0x04
    1792:	8c 81       	ldd	r24, Y+4	; 0x04
    1794:	9d 81       	ldd	r25, Y+5	; 0x05
    1796:	81 30       	cpi	r24, 0x01	; 1
    1798:	91 05       	cpc	r25, r1
    179a:	59 f1       	breq	.+86     	; 0x17f2 <DioSetPinValue+0x17a>
    179c:	2c 81       	ldd	r18, Y+4	; 0x04
    179e:	3d 81       	ldd	r19, Y+5	; 0x05
    17a0:	22 30       	cpi	r18, 0x02	; 2
    17a2:	31 05       	cpc	r19, r1
    17a4:	2c f4       	brge	.+10     	; 0x17b0 <DioSetPinValue+0x138>
    17a6:	8c 81       	ldd	r24, Y+4	; 0x04
    17a8:	9d 81       	ldd	r25, Y+5	; 0x05
    17aa:	00 97       	sbiw	r24, 0x00	; 0
    17ac:	69 f0       	breq	.+26     	; 0x17c8 <DioSetPinValue+0x150>
    17ae:	5f c0       	rjmp	.+190    	; 0x186e <DioSetPinValue+0x1f6>
    17b0:	2c 81       	ldd	r18, Y+4	; 0x04
    17b2:	3d 81       	ldd	r19, Y+5	; 0x05
    17b4:	22 30       	cpi	r18, 0x02	; 2
    17b6:	31 05       	cpc	r19, r1
    17b8:	89 f1       	breq	.+98     	; 0x181c <DioSetPinValue+0x1a4>
    17ba:	8c 81       	ldd	r24, Y+4	; 0x04
    17bc:	9d 81       	ldd	r25, Y+5	; 0x05
    17be:	83 30       	cpi	r24, 0x03	; 3
    17c0:	91 05       	cpc	r25, r1
    17c2:	09 f4       	brne	.+2      	; 0x17c6 <DioSetPinValue+0x14e>
    17c4:	40 c0       	rjmp	.+128    	; 0x1846 <DioSetPinValue+0x1ce>
    17c6:	53 c0       	rjmp	.+166    	; 0x186e <DioSetPinValue+0x1f6>
	 			 {
	 				 case portA: CLR_BIT(PORTA, Copy_u8Pin); break;
    17c8:	ab e3       	ldi	r26, 0x3B	; 59
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	eb e3       	ldi	r30, 0x3B	; 59
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	48 2f       	mov	r20, r24
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	28 2f       	mov	r18, r24
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	02 2e       	mov	r0, r18
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <DioSetPinValue+0x16e>
    17e2:	88 0f       	add	r24, r24
    17e4:	99 1f       	adc	r25, r25
    17e6:	0a 94       	dec	r0
    17e8:	e2 f7       	brpl	.-8      	; 0x17e2 <DioSetPinValue+0x16a>
    17ea:	80 95       	com	r24
    17ec:	84 23       	and	r24, r20
    17ee:	8c 93       	st	X, r24
    17f0:	3e c0       	rjmp	.+124    	; 0x186e <DioSetPinValue+0x1f6>
	 			 	 case portB: CLR_BIT(PORTB, Copy_u8Pin); break;
    17f2:	a8 e3       	ldi	r26, 0x38	; 56
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	e8 e3       	ldi	r30, 0x38	; 56
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	48 2f       	mov	r20, r24
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	28 2f       	mov	r18, r24
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	02 2e       	mov	r0, r18
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <DioSetPinValue+0x198>
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	0a 94       	dec	r0
    1812:	e2 f7       	brpl	.-8      	; 0x180c <DioSetPinValue+0x194>
    1814:	80 95       	com	r24
    1816:	84 23       	and	r24, r20
    1818:	8c 93       	st	X, r24
    181a:	29 c0       	rjmp	.+82     	; 0x186e <DioSetPinValue+0x1f6>
	 			 	 case portC: CLR_BIT(PORTC, Copy_u8Pin); break;
    181c:	a5 e3       	ldi	r26, 0x35	; 53
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	e5 e3       	ldi	r30, 0x35	; 53
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	48 2f       	mov	r20, r24
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	28 2f       	mov	r18, r24
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	02 2e       	mov	r0, r18
    1834:	02 c0       	rjmp	.+4      	; 0x183a <DioSetPinValue+0x1c2>
    1836:	88 0f       	add	r24, r24
    1838:	99 1f       	adc	r25, r25
    183a:	0a 94       	dec	r0
    183c:	e2 f7       	brpl	.-8      	; 0x1836 <DioSetPinValue+0x1be>
    183e:	80 95       	com	r24
    1840:	84 23       	and	r24, r20
    1842:	8c 93       	st	X, r24
    1844:	14 c0       	rjmp	.+40     	; 0x186e <DioSetPinValue+0x1f6>
	 			 	 case portD: CLR_BIT(PORTD, Copy_u8Pin); break;
    1846:	a2 e3       	ldi	r26, 0x32	; 50
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e2 e3       	ldi	r30, 0x32	; 50
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	48 2f       	mov	r20, r24
    1852:	8a 81       	ldd	r24, Y+2	; 0x02
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	81 e0       	ldi	r24, 0x01	; 1
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	02 2e       	mov	r0, r18
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <DioSetPinValue+0x1ec>
    1860:	88 0f       	add	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	0a 94       	dec	r0
    1866:	e2 f7       	brpl	.-8      	; 0x1860 <DioSetPinValue+0x1e8>
    1868:	80 95       	com	r24
    186a:	84 23       	and	r24, r20
    186c:	8c 93       	st	X, r24
	 	 else
	 	 {

	 	 }

 }
    186e:	27 96       	adiw	r28, 0x07	; 7
    1870:	0f b6       	in	r0, 0x3f	; 63
    1872:	f8 94       	cli
    1874:	de bf       	out	0x3e, r29	; 62
    1876:	0f be       	out	0x3f, r0	; 63
    1878:	cd bf       	out	0x3d, r28	; 61
    187a:	cf 91       	pop	r28
    187c:	df 91       	pop	r29
    187e:	08 95       	ret

00001880 <DioGetPinValue>:

 void DioGetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_pu8Value)

 {
    1880:	df 93       	push	r29
    1882:	cf 93       	push	r28
    1884:	00 d0       	rcall	.+0      	; 0x1886 <DioGetPinValue+0x6>
    1886:	00 d0       	rcall	.+0      	; 0x1888 <DioGetPinValue+0x8>
    1888:	00 d0       	rcall	.+0      	; 0x188a <DioGetPinValue+0xa>
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    188e:	89 83       	std	Y+1, r24	; 0x01
    1890:	6a 83       	std	Y+2, r22	; 0x02
    1892:	5c 83       	std	Y+4, r21	; 0x04
    1894:	4b 83       	std	Y+3, r20	; 0x03


	 if (Copy_pu8Value != NULL)
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	9c 81       	ldd	r25, Y+4	; 0x04
    189a:	00 97       	sbiw	r24, 0x00	; 0
    189c:	09 f4       	brne	.+2      	; 0x18a0 <DioGetPinValue+0x20>
    189e:	74 c0       	rjmp	.+232    	; 0x1988 <DioGetPinValue+0x108>
	 {

		 if (Copy_u8Pin <= pin7)
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	88 30       	cpi	r24, 0x08	; 8
    18a4:	08 f0       	brcs	.+2      	; 0x18a8 <DioGetPinValue+0x28>
    18a6:	70 c0       	rjmp	.+224    	; 0x1988 <DioGetPinValue+0x108>
		 {
			 switch (Copy_u8Port)
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	28 2f       	mov	r18, r24
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	3e 83       	std	Y+6, r19	; 0x06
    18b0:	2d 83       	std	Y+5, r18	; 0x05
    18b2:	4d 81       	ldd	r20, Y+5	; 0x05
    18b4:	5e 81       	ldd	r21, Y+6	; 0x06
    18b6:	41 30       	cpi	r20, 0x01	; 1
    18b8:	51 05       	cpc	r21, r1
    18ba:	59 f1       	breq	.+86     	; 0x1912 <DioGetPinValue+0x92>
    18bc:	8d 81       	ldd	r24, Y+5	; 0x05
    18be:	9e 81       	ldd	r25, Y+6	; 0x06
    18c0:	82 30       	cpi	r24, 0x02	; 2
    18c2:	91 05       	cpc	r25, r1
    18c4:	34 f4       	brge	.+12     	; 0x18d2 <DioGetPinValue+0x52>
    18c6:	2d 81       	ldd	r18, Y+5	; 0x05
    18c8:	3e 81       	ldd	r19, Y+6	; 0x06
    18ca:	21 15       	cp	r18, r1
    18cc:	31 05       	cpc	r19, r1
    18ce:	69 f0       	breq	.+26     	; 0x18ea <DioGetPinValue+0x6a>
    18d0:	5b c0       	rjmp	.+182    	; 0x1988 <DioGetPinValue+0x108>
    18d2:	4d 81       	ldd	r20, Y+5	; 0x05
    18d4:	5e 81       	ldd	r21, Y+6	; 0x06
    18d6:	42 30       	cpi	r20, 0x02	; 2
    18d8:	51 05       	cpc	r21, r1
    18da:	79 f1       	breq	.+94     	; 0x193a <DioGetPinValue+0xba>
    18dc:	8d 81       	ldd	r24, Y+5	; 0x05
    18de:	9e 81       	ldd	r25, Y+6	; 0x06
    18e0:	83 30       	cpi	r24, 0x03	; 3
    18e2:	91 05       	cpc	r25, r1
    18e4:	09 f4       	brne	.+2      	; 0x18e8 <DioGetPinValue+0x68>
    18e6:	3d c0       	rjmp	.+122    	; 0x1962 <DioGetPinValue+0xe2>
    18e8:	4f c0       	rjmp	.+158    	; 0x1988 <DioGetPinValue+0x108>
			 {
			 	 case portA:  *Copy_pu8Value = GET_BIT(PINA, Copy_u8Pin); break;
    18ea:	e9 e3       	ldi	r30, 0x39	; 57
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	28 2f       	mov	r18, r24
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	88 2f       	mov	r24, r24
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	a9 01       	movw	r20, r18
    18fc:	02 c0       	rjmp	.+4      	; 0x1902 <DioGetPinValue+0x82>
    18fe:	55 95       	asr	r21
    1900:	47 95       	ror	r20
    1902:	8a 95       	dec	r24
    1904:	e2 f7       	brpl	.-8      	; 0x18fe <DioGetPinValue+0x7e>
    1906:	ca 01       	movw	r24, r20
    1908:	81 70       	andi	r24, 0x01	; 1
    190a:	eb 81       	ldd	r30, Y+3	; 0x03
    190c:	fc 81       	ldd	r31, Y+4	; 0x04
    190e:	80 83       	st	Z, r24
    1910:	3b c0       	rjmp	.+118    	; 0x1988 <DioGetPinValue+0x108>
			 	 case portB:  *Copy_pu8Value = GET_BIT(PINB, Copy_u8Pin); break;
    1912:	e6 e3       	ldi	r30, 0x36	; 54
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	28 2f       	mov	r18, r24
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	88 2f       	mov	r24, r24
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	a9 01       	movw	r20, r18
    1924:	02 c0       	rjmp	.+4      	; 0x192a <DioGetPinValue+0xaa>
    1926:	55 95       	asr	r21
    1928:	47 95       	ror	r20
    192a:	8a 95       	dec	r24
    192c:	e2 f7       	brpl	.-8      	; 0x1926 <DioGetPinValue+0xa6>
    192e:	ca 01       	movw	r24, r20
    1930:	81 70       	andi	r24, 0x01	; 1
    1932:	eb 81       	ldd	r30, Y+3	; 0x03
    1934:	fc 81       	ldd	r31, Y+4	; 0x04
    1936:	80 83       	st	Z, r24
    1938:	27 c0       	rjmp	.+78     	; 0x1988 <DioGetPinValue+0x108>
			 	 case portC:  *Copy_pu8Value = GET_BIT(PINC, Copy_u8Pin); break;
    193a:	e3 e3       	ldi	r30, 0x33	; 51
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	8a 81       	ldd	r24, Y+2	; 0x02
    1946:	88 2f       	mov	r24, r24
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	a9 01       	movw	r20, r18
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <DioGetPinValue+0xd2>
    194e:	55 95       	asr	r21
    1950:	47 95       	ror	r20
    1952:	8a 95       	dec	r24
    1954:	e2 f7       	brpl	.-8      	; 0x194e <DioGetPinValue+0xce>
    1956:	ca 01       	movw	r24, r20
    1958:	81 70       	andi	r24, 0x01	; 1
    195a:	eb 81       	ldd	r30, Y+3	; 0x03
    195c:	fc 81       	ldd	r31, Y+4	; 0x04
    195e:	80 83       	st	Z, r24
    1960:	13 c0       	rjmp	.+38     	; 0x1988 <DioGetPinValue+0x108>
			 	 case portD:  *Copy_pu8Value = GET_BIT(PIND, Copy_u8Pin); break;
    1962:	e0 e3       	ldi	r30, 0x30	; 48
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	28 2f       	mov	r18, r24
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	88 2f       	mov	r24, r24
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	a9 01       	movw	r20, r18
    1974:	02 c0       	rjmp	.+4      	; 0x197a <DioGetPinValue+0xfa>
    1976:	55 95       	asr	r21
    1978:	47 95       	ror	r20
    197a:	8a 95       	dec	r24
    197c:	e2 f7       	brpl	.-8      	; 0x1976 <DioGetPinValue+0xf6>
    197e:	ca 01       	movw	r24, r20
    1980:	81 70       	andi	r24, 0x01	; 1
    1982:	eb 81       	ldd	r30, Y+3	; 0x03
    1984:	fc 81       	ldd	r31, Y+4	; 0x04
    1986:	80 83       	st	Z, r24
	 else
	 {

	 }

 }
    1988:	26 96       	adiw	r28, 0x06	; 6
    198a:	0f b6       	in	r0, 0x3f	; 63
    198c:	f8 94       	cli
    198e:	de bf       	out	0x3e, r29	; 62
    1990:	0f be       	out	0x3f, r0	; 63
    1992:	cd bf       	out	0x3d, r28	; 61
    1994:	cf 91       	pop	r28
    1996:	df 91       	pop	r29
    1998:	08 95       	ret

0000199a <DioSetPortDirection>:

 void DioSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
 {
    199a:	df 93       	push	r29
    199c:	cf 93       	push	r28
    199e:	00 d0       	rcall	.+0      	; 0x19a0 <DioSetPortDirection+0x6>
    19a0:	00 d0       	rcall	.+0      	; 0x19a2 <DioSetPortDirection+0x8>
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
    19a6:	89 83       	std	Y+1, r24	; 0x01
    19a8:	6a 83       	std	Y+2, r22	; 0x02

	 switch (Copy_u8Port)
    19aa:	89 81       	ldd	r24, Y+1	; 0x01
    19ac:	28 2f       	mov	r18, r24
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	3c 83       	std	Y+4, r19	; 0x04
    19b2:	2b 83       	std	Y+3, r18	; 0x03
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	9c 81       	ldd	r25, Y+4	; 0x04
    19b8:	81 30       	cpi	r24, 0x01	; 1
    19ba:	91 05       	cpc	r25, r1
    19bc:	d1 f0       	breq	.+52     	; 0x19f2 <DioSetPortDirection+0x58>
    19be:	2b 81       	ldd	r18, Y+3	; 0x03
    19c0:	3c 81       	ldd	r19, Y+4	; 0x04
    19c2:	22 30       	cpi	r18, 0x02	; 2
    19c4:	31 05       	cpc	r19, r1
    19c6:	2c f4       	brge	.+10     	; 0x19d2 <DioSetPortDirection+0x38>
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	9c 81       	ldd	r25, Y+4	; 0x04
    19cc:	00 97       	sbiw	r24, 0x00	; 0
    19ce:	61 f0       	breq	.+24     	; 0x19e8 <DioSetPortDirection+0x4e>
    19d0:	1e c0       	rjmp	.+60     	; 0x1a0e <DioSetPortDirection+0x74>
    19d2:	2b 81       	ldd	r18, Y+3	; 0x03
    19d4:	3c 81       	ldd	r19, Y+4	; 0x04
    19d6:	22 30       	cpi	r18, 0x02	; 2
    19d8:	31 05       	cpc	r19, r1
    19da:	81 f0       	breq	.+32     	; 0x19fc <DioSetPortDirection+0x62>
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	9c 81       	ldd	r25, Y+4	; 0x04
    19e0:	83 30       	cpi	r24, 0x03	; 3
    19e2:	91 05       	cpc	r25, r1
    19e4:	81 f0       	breq	.+32     	; 0x1a06 <DioSetPortDirection+0x6c>
    19e6:	13 c0       	rjmp	.+38     	; 0x1a0e <DioSetPortDirection+0x74>
	 {
	 	 case portA: DDRA = Copy_u8Direction; break;
    19e8:	ea e3       	ldi	r30, 0x3A	; 58
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	8a 81       	ldd	r24, Y+2	; 0x02
    19ee:	80 83       	st	Z, r24
    19f0:	0e c0       	rjmp	.+28     	; 0x1a0e <DioSetPortDirection+0x74>
	 	 case portB: DDRB = Copy_u8Direction; break;
    19f2:	e7 e3       	ldi	r30, 0x37	; 55
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	8a 81       	ldd	r24, Y+2	; 0x02
    19f8:	80 83       	st	Z, r24
    19fa:	09 c0       	rjmp	.+18     	; 0x1a0e <DioSetPortDirection+0x74>
	 	 case portC: DDRC = Copy_u8Direction; break;
    19fc:	e4 e3       	ldi	r30, 0x34	; 52
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	8a 81       	ldd	r24, Y+2	; 0x02
    1a02:	80 83       	st	Z, r24
    1a04:	04 c0       	rjmp	.+8      	; 0x1a0e <DioSetPortDirection+0x74>
	 	 case portD: DDRD = Copy_u8Direction; break;
    1a06:	e1 e3       	ldi	r30, 0x31	; 49
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	80 83       	st	Z, r24
	 	 default:  break;

	 }

 }
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	cf 91       	pop	r28
    1a18:	df 91       	pop	r29
    1a1a:	08 95       	ret

00001a1c <DioSetPortValue>:

void DioSetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
 {
    1a1c:	df 93       	push	r29
    1a1e:	cf 93       	push	r28
    1a20:	00 d0       	rcall	.+0      	; 0x1a22 <DioSetPortValue+0x6>
    1a22:	00 d0       	rcall	.+0      	; 0x1a24 <DioSetPortValue+0x8>
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
    1a28:	89 83       	std	Y+1, r24	; 0x01
    1a2a:	6a 83       	std	Y+2, r22	; 0x02


	 switch (Copy_u8Port)
    1a2c:	89 81       	ldd	r24, Y+1	; 0x01
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	3c 83       	std	Y+4, r19	; 0x04
    1a34:	2b 83       	std	Y+3, r18	; 0x03
    1a36:	8b 81       	ldd	r24, Y+3	; 0x03
    1a38:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3a:	81 30       	cpi	r24, 0x01	; 1
    1a3c:	91 05       	cpc	r25, r1
    1a3e:	d1 f0       	breq	.+52     	; 0x1a74 <DioSetPortValue+0x58>
    1a40:	2b 81       	ldd	r18, Y+3	; 0x03
    1a42:	3c 81       	ldd	r19, Y+4	; 0x04
    1a44:	22 30       	cpi	r18, 0x02	; 2
    1a46:	31 05       	cpc	r19, r1
    1a48:	2c f4       	brge	.+10     	; 0x1a54 <DioSetPortValue+0x38>
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4e:	00 97       	sbiw	r24, 0x00	; 0
    1a50:	61 f0       	breq	.+24     	; 0x1a6a <DioSetPortValue+0x4e>
    1a52:	1e c0       	rjmp	.+60     	; 0x1a90 <DioSetPortValue+0x74>
    1a54:	2b 81       	ldd	r18, Y+3	; 0x03
    1a56:	3c 81       	ldd	r19, Y+4	; 0x04
    1a58:	22 30       	cpi	r18, 0x02	; 2
    1a5a:	31 05       	cpc	r19, r1
    1a5c:	81 f0       	breq	.+32     	; 0x1a7e <DioSetPortValue+0x62>
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a60:	9c 81       	ldd	r25, Y+4	; 0x04
    1a62:	83 30       	cpi	r24, 0x03	; 3
    1a64:	91 05       	cpc	r25, r1
    1a66:	81 f0       	breq	.+32     	; 0x1a88 <DioSetPortValue+0x6c>
    1a68:	13 c0       	rjmp	.+38     	; 0x1a90 <DioSetPortValue+0x74>
	 {
	 	 case portA: PORTA = Copy_u8Value; break;
    1a6a:	eb e3       	ldi	r30, 0x3B	; 59
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a70:	80 83       	st	Z, r24
    1a72:	0e c0       	rjmp	.+28     	; 0x1a90 <DioSetPortValue+0x74>
	 	 case portB: PORTB = Copy_u8Value; break;
    1a74:	e8 e3       	ldi	r30, 0x38	; 56
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7a:	80 83       	st	Z, r24
    1a7c:	09 c0       	rjmp	.+18     	; 0x1a90 <DioSetPortValue+0x74>
	 	 case portC: PORTC = Copy_u8Value; break;
    1a7e:	e5 e3       	ldi	r30, 0x35	; 53
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	8a 81       	ldd	r24, Y+2	; 0x02
    1a84:	80 83       	st	Z, r24
    1a86:	04 c0       	rjmp	.+8      	; 0x1a90 <DioSetPortValue+0x74>
	  	 case portD: PORTD = Copy_u8Value; break;
    1a88:	e2 e3       	ldi	r30, 0x32	; 50
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	80 83       	st	Z, r24
	 	 default:  break;

	 }

 }
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	cf 91       	pop	r28
    1a9a:	df 91       	pop	r29
    1a9c:	08 95       	ret

00001a9e <DioTogglePinValue>:

void DioTogglePinValue(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    1a9e:	df 93       	push	r29
    1aa0:	cf 93       	push	r28
    1aa2:	00 d0       	rcall	.+0      	; 0x1aa4 <DioTogglePinValue+0x6>
    1aa4:	00 d0       	rcall	.+0      	; 0x1aa6 <DioTogglePinValue+0x8>
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    1aaa:	89 83       	std	Y+1, r24	; 0x01
    1aac:	6a 83       	std	Y+2, r22	; 0x02



	 	 if (Copy_u8Pin <= pin7)
    1aae:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab0:	88 30       	cpi	r24, 0x08	; 8
    1ab2:	08 f0       	brcs	.+2      	; 0x1ab6 <DioTogglePinValue+0x18>
    1ab4:	6e c0       	rjmp	.+220    	; 0x1b92 <DioTogglePinValue+0xf4>
	 	 {

	 		 switch (Copy_u8Port)
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01
    1ab8:	28 2f       	mov	r18, r24
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	3c 83       	std	Y+4, r19	; 0x04
    1abe:	2b 83       	std	Y+3, r18	; 0x03
    1ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac4:	81 30       	cpi	r24, 0x01	; 1
    1ac6:	91 05       	cpc	r25, r1
    1ac8:	49 f1       	breq	.+82     	; 0x1b1c <DioTogglePinValue+0x7e>
    1aca:	2b 81       	ldd	r18, Y+3	; 0x03
    1acc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ace:	22 30       	cpi	r18, 0x02	; 2
    1ad0:	31 05       	cpc	r19, r1
    1ad2:	2c f4       	brge	.+10     	; 0x1ade <DioTogglePinValue+0x40>
    1ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad8:	00 97       	sbiw	r24, 0x00	; 0
    1ada:	61 f0       	breq	.+24     	; 0x1af4 <DioTogglePinValue+0x56>
    1adc:	5a c0       	rjmp	.+180    	; 0x1b92 <DioTogglePinValue+0xf4>
    1ade:	2b 81       	ldd	r18, Y+3	; 0x03
    1ae0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ae2:	22 30       	cpi	r18, 0x02	; 2
    1ae4:	31 05       	cpc	r19, r1
    1ae6:	71 f1       	breq	.+92     	; 0x1b44 <DioTogglePinValue+0xa6>
    1ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aea:	9c 81       	ldd	r25, Y+4	; 0x04
    1aec:	83 30       	cpi	r24, 0x03	; 3
    1aee:	91 05       	cpc	r25, r1
    1af0:	e9 f1       	breq	.+122    	; 0x1b6c <DioTogglePinValue+0xce>
    1af2:	4f c0       	rjmp	.+158    	; 0x1b92 <DioTogglePinValue+0xf4>
	 		 {
			 	 case portA: TOG_BIT(PORTA, Copy_u8Pin); break;
    1af4:	ab e3       	ldi	r26, 0x3B	; 59
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	eb e3       	ldi	r30, 0x3B	; 59
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	48 2f       	mov	r20, r24
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	28 2f       	mov	r18, r24
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	02 2e       	mov	r0, r18
    1b0c:	02 c0       	rjmp	.+4      	; 0x1b12 <DioTogglePinValue+0x74>
    1b0e:	88 0f       	add	r24, r24
    1b10:	99 1f       	adc	r25, r25
    1b12:	0a 94       	dec	r0
    1b14:	e2 f7       	brpl	.-8      	; 0x1b0e <DioTogglePinValue+0x70>
    1b16:	84 27       	eor	r24, r20
    1b18:	8c 93       	st	X, r24
    1b1a:	3b c0       	rjmp	.+118    	; 0x1b92 <DioTogglePinValue+0xf4>
			 	 case portB: TOG_BIT(PORTB, Copy_u8Pin); break;
    1b1c:	a8 e3       	ldi	r26, 0x38	; 56
    1b1e:	b0 e0       	ldi	r27, 0x00	; 0
    1b20:	e8 e3       	ldi	r30, 0x38	; 56
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	48 2f       	mov	r20, r24
    1b28:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2a:	28 2f       	mov	r18, r24
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	02 2e       	mov	r0, r18
    1b34:	02 c0       	rjmp	.+4      	; 0x1b3a <DioTogglePinValue+0x9c>
    1b36:	88 0f       	add	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	0a 94       	dec	r0
    1b3c:	e2 f7       	brpl	.-8      	; 0x1b36 <DioTogglePinValue+0x98>
    1b3e:	84 27       	eor	r24, r20
    1b40:	8c 93       	st	X, r24
    1b42:	27 c0       	rjmp	.+78     	; 0x1b92 <DioTogglePinValue+0xf4>
			 	 case portC: TOG_BIT(PORTC, Copy_u8Pin); break;
    1b44:	a5 e3       	ldi	r26, 0x35	; 53
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	e5 e3       	ldi	r30, 0x35	; 53
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	48 2f       	mov	r20, r24
    1b50:	8a 81       	ldd	r24, Y+2	; 0x02
    1b52:	28 2f       	mov	r18, r24
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	02 2e       	mov	r0, r18
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <DioTogglePinValue+0xc4>
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	0a 94       	dec	r0
    1b64:	e2 f7       	brpl	.-8      	; 0x1b5e <DioTogglePinValue+0xc0>
    1b66:	84 27       	eor	r24, r20
    1b68:	8c 93       	st	X, r24
    1b6a:	13 c0       	rjmp	.+38     	; 0x1b92 <DioTogglePinValue+0xf4>
			 	 case portD: TOG_BIT(PORTD, Copy_u8Pin); break;
    1b6c:	a2 e3       	ldi	r26, 0x32	; 50
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	e2 e3       	ldi	r30, 0x32	; 50
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	48 2f       	mov	r20, r24
    1b78:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	02 2e       	mov	r0, r18
    1b84:	02 c0       	rjmp	.+4      	; 0x1b8a <DioTogglePinValue+0xec>
    1b86:	88 0f       	add	r24, r24
    1b88:	99 1f       	adc	r25, r25
    1b8a:	0a 94       	dec	r0
    1b8c:	e2 f7       	brpl	.-8      	; 0x1b86 <DioTogglePinValue+0xe8>
    1b8e:	84 27       	eor	r24, r20
    1b90:	8c 93       	st	X, r24

	 	 else
	 	 {

	 	 }
}
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	0f 90       	pop	r0
    1b9a:	cf 91       	pop	r28
    1b9c:	df 91       	pop	r29
    1b9e:	08 95       	ret

00001ba0 <GLobalInterruptEnable>:
#include "STD_Types.h"
#include "BIT_MATH.h"

#include "Global_Interface.h"
void GLobalInterruptEnable()
{
    1ba0:	df 93       	push	r29
    1ba2:	cf 93       	push	r28
    1ba4:	cd b7       	in	r28, 0x3d	; 61
    1ba6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GLOBAL_BIT);
    1ba8:	af e5       	ldi	r26, 0x5F	; 95
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	ef e5       	ldi	r30, 0x5F	; 95
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	80 68       	ori	r24, 0x80	; 128
    1bb4:	8c 93       	st	X, r24

}
    1bb6:	cf 91       	pop	r28
    1bb8:	df 91       	pop	r29
    1bba:	08 95       	ret

00001bbc <GLobalInterruptDisable>:
void GLobalInterruptDisable()
{
    1bbc:	df 93       	push	r29
    1bbe:	cf 93       	push	r28
    1bc0:	cd b7       	in	r28, 0x3d	; 61
    1bc2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GLOBAL_BIT);
    1bc4:	af e5       	ldi	r26, 0x5F	; 95
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	ef e5       	ldi	r30, 0x5F	; 95
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	8f 77       	andi	r24, 0x7F	; 127
    1bd0:	8c 93       	st	X, r24
}
    1bd2:	cf 91       	pop	r28
    1bd4:	df 91       	pop	r29
    1bd6:	08 95       	ret

00001bd8 <keyPad_Init>:
#include "GPIO.h"

#include "KeyPad.h"

void keyPad_Init(void)
{
    1bd8:	df 93       	push	r29
    1bda:	cf 93       	push	r28
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
	DioSetPortDirection(portC,0xF0);
    1be0:	82 e0       	ldi	r24, 0x02	; 2
    1be2:	60 ef       	ldi	r22, 0xF0	; 240
    1be4:	0e 94 cd 0c 	call	0x199a	; 0x199a <DioSetPortDirection>
	DioSetPortValue(portC,0b00001111);
    1be8:	82 e0       	ldi	r24, 0x02	; 2
    1bea:	6f e0       	ldi	r22, 0x0F	; 15
    1bec:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <DioSetPortValue>
}
    1bf0:	cf 91       	pop	r28
    1bf2:	df 91       	pop	r29
    1bf4:	08 95       	ret

00001bf6 <KeyPadGetPressedKey>:

/*required: All row pins are input pulled-up, and all columns pins are output high*/
u8 KeyPadGetPressedKey(void)
{
    1bf6:	df 93       	push	r29
    1bf8:	cf 93       	push	r28
    1bfa:	00 d0       	rcall	.+0      	; 0x1bfc <KeyPadGetPressedKey+0x6>
    1bfc:	00 d0       	rcall	.+0      	; 0x1bfe <KeyPadGetPressedKey+0x8>
    1bfe:	0f 92       	push	r0
    1c00:	cd b7       	in	r28, 0x3d	; 61
    1c02:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey = KPD_u8NO_PRESSED_KEY_VAL;
    1c04:	8f ef       	ldi	r24, 0xFF	; 255
    1c06:	8b 83       	std	Y+3, r24	; 0x03
	static u8 Local_u8ColArr[KPD_u8COL_NUM] = {KPD_u8COL1_PIN, KPD_u8COL2_PIN, KPD_u8COL3_PIN, KPD_u8COL4_PIN};
	static u8 Local_u8RowArr[KPD_u8ROW_NUM] = {KPD_u8ROW1_PIN, KPD_u8ROW2_PIN, KPD_u8ROW3_PIN, KPD_u8ROW4_PIN};
	static u8 Local_uKPDArr[KPD_u8ROW_NUM][KPD_u8COL_NUM] = KPD_u8BUTTON_ARR; /*static is used here to save stack memory, as it will be saved one time in .bss memory not the stack*/

	/*Activate column pins, and read the rows*/
	for (Local_u8ColCounter = 0; Local_u8ColCounter < KPD_u8COL_NUM; Local_u8ColCounter++)
    1c08:	19 82       	std	Y+1, r1	; 0x01
    1c0a:	5e c0       	rjmp	.+188    	; 0x1cc8 <KeyPadGetPressedKey+0xd2>
	{
		/*Activate the current column*/
		DioSetPinValue(KPD_u8COL_PORT, Local_u8ColArr[Local_u8ColCounter],  LOW);
    1c0c:	89 81       	ldd	r24, Y+1	; 0x01
    1c0e:	88 2f       	mov	r24, r24
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	fc 01       	movw	r30, r24
    1c14:	e9 50       	subi	r30, 0x09	; 9
    1c16:	ff 4f       	sbci	r31, 0xFF	; 255
    1c18:	90 81       	ld	r25, Z
    1c1a:	82 e0       	ldi	r24, 0x02	; 2
    1c1c:	69 2f       	mov	r22, r25
    1c1e:	40 e0       	ldi	r20, 0x00	; 0
    1c20:	0e 94 3c 0b 	call	0x1678	; 0x1678 <DioSetPinValue>

		for (Local_u8RowCounter = 0; Local_u8RowCounter < KPD_u8ROW_NUM; Local_u8RowCounter++)
    1c24:	1a 82       	std	Y+2, r1	; 0x02
    1c26:	3d c0       	rjmp	.+122    	; 0x1ca2 <KeyPadGetPressedKey+0xac>
		{
			/*Read the current row*/

			DioGetPinValue(KPD_u8ROW_PORT, Local_u8RowArr[Local_u8RowCounter], &Local_u8KeyState);
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	88 2f       	mov	r24, r24
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	fc 01       	movw	r30, r24
    1c30:	ed 50       	subi	r30, 0x0D	; 13
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	90 81       	ld	r25, Z
    1c36:	9e 01       	movw	r18, r28
    1c38:	2c 5f       	subi	r18, 0xFC	; 252
    1c3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c3c:	82 e0       	ldi	r24, 0x02	; 2
    1c3e:	69 2f       	mov	r22, r25
    1c40:	a9 01       	movw	r20, r18
    1c42:	0e 94 40 0c 	call	0x1880	; 0x1880 <DioGetPinValue>

			/*if current row is low, button is pressed*/
			if (Local_u8KeyState ==  LOW)
    1c46:	8c 81       	ldd	r24, Y+4	; 0x04
    1c48:	88 23       	and	r24, r24
    1c4a:	41 f5       	brne	.+80     	; 0x1c9c <KeyPadGetPressedKey+0xa6>
			{
				Local_u8PressedKey = Local_uKPDArr[Local_u8RowCounter][Local_u8ColCounter];
    1c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4e:	48 2f       	mov	r20, r24
    1c50:	50 e0       	ldi	r21, 0x00	; 0
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	28 2f       	mov	r18, r24
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	ca 01       	movw	r24, r20
    1c5a:	88 0f       	add	r24, r24
    1c5c:	99 1f       	adc	r25, r25
    1c5e:	88 0f       	add	r24, r24
    1c60:	99 1f       	adc	r25, r25
    1c62:	82 0f       	add	r24, r18
    1c64:	93 1f       	adc	r25, r19
    1c66:	fc 01       	movw	r30, r24
    1c68:	ed 51       	subi	r30, 0x1D	; 29
    1c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6c:	80 81       	ld	r24, Z
    1c6e:	8b 83       	std	Y+3, r24	; 0x03
    1c70:	0f c0       	rjmp	.+30     	; 0x1c90 <KeyPadGetPressedKey+0x9a>

				/*wait until key, is released*/
				while(Local_u8KeyState ==  LOW)
				{
					DioGetPinValue(KPD_u8ROW_PORT, Local_u8RowArr[Local_u8RowCounter], &Local_u8KeyState);
    1c72:	8a 81       	ldd	r24, Y+2	; 0x02
    1c74:	88 2f       	mov	r24, r24
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	fc 01       	movw	r30, r24
    1c7a:	ed 50       	subi	r30, 0x0D	; 13
    1c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7e:	90 81       	ld	r25, Z
    1c80:	9e 01       	movw	r18, r28
    1c82:	2c 5f       	subi	r18, 0xFC	; 252
    1c84:	3f 4f       	sbci	r19, 0xFF	; 255
    1c86:	82 e0       	ldi	r24, 0x02	; 2
    1c88:	69 2f       	mov	r22, r25
    1c8a:	a9 01       	movw	r20, r18
    1c8c:	0e 94 40 0c 	call	0x1880	; 0x1880 <DioGetPinValue>
			if (Local_u8KeyState ==  LOW)
			{
				Local_u8PressedKey = Local_uKPDArr[Local_u8RowCounter][Local_u8ColCounter];

				/*wait until key, is released*/
				while(Local_u8KeyState ==  LOW)
    1c90:	8c 81       	ldd	r24, Y+4	; 0x04
    1c92:	88 23       	and	r24, r24
    1c94:	71 f3       	breq	.-36     	; 0x1c72 <KeyPadGetPressedKey+0x7c>
				{
					DioGetPinValue(KPD_u8ROW_PORT, Local_u8RowArr[Local_u8RowCounter], &Local_u8KeyState);
				}

				return Local_u8PressedKey;
    1c96:	8b 81       	ldd	r24, Y+3	; 0x03
    1c98:	8d 83       	std	Y+5, r24	; 0x05
    1c9a:	1c c0       	rjmp	.+56     	; 0x1cd4 <KeyPadGetPressedKey+0xde>
	for (Local_u8ColCounter = 0; Local_u8ColCounter < KPD_u8COL_NUM; Local_u8ColCounter++)
	{
		/*Activate the current column*/
		DioSetPinValue(KPD_u8COL_PORT, Local_u8ColArr[Local_u8ColCounter],  LOW);

		for (Local_u8RowCounter = 0; Local_u8RowCounter < KPD_u8ROW_NUM; Local_u8RowCounter++)
    1c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9e:	8f 5f       	subi	r24, 0xFF	; 255
    1ca0:	8a 83       	std	Y+2, r24	; 0x02
    1ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca4:	84 30       	cpi	r24, 0x04	; 4
    1ca6:	08 f4       	brcc	.+2      	; 0x1caa <KeyPadGetPressedKey+0xb4>
    1ca8:	bf cf       	rjmp	.-130    	; 0x1c28 <KeyPadGetPressedKey+0x32>
				return Local_u8PressedKey;
			}
		}

		/*Deactivating the current column before activating the next*/
		DioSetPinValue(KPD_u8COL_PORT, Local_u8ColArr[Local_u8ColCounter], HIGH);
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	88 2f       	mov	r24, r24
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	fc 01       	movw	r30, r24
    1cb2:	e9 50       	subi	r30, 0x09	; 9
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	90 81       	ld	r25, Z
    1cb8:	82 e0       	ldi	r24, 0x02	; 2
    1cba:	69 2f       	mov	r22, r25
    1cbc:	41 e0       	ldi	r20, 0x01	; 1
    1cbe:	0e 94 3c 0b 	call	0x1678	; 0x1678 <DioSetPinValue>
	static u8 Local_u8ColArr[KPD_u8COL_NUM] = {KPD_u8COL1_PIN, KPD_u8COL2_PIN, KPD_u8COL3_PIN, KPD_u8COL4_PIN};
	static u8 Local_u8RowArr[KPD_u8ROW_NUM] = {KPD_u8ROW1_PIN, KPD_u8ROW2_PIN, KPD_u8ROW3_PIN, KPD_u8ROW4_PIN};
	static u8 Local_uKPDArr[KPD_u8ROW_NUM][KPD_u8COL_NUM] = KPD_u8BUTTON_ARR; /*static is used here to save stack memory, as it will be saved one time in .bss memory not the stack*/

	/*Activate column pins, and read the rows*/
	for (Local_u8ColCounter = 0; Local_u8ColCounter < KPD_u8COL_NUM; Local_u8ColCounter++)
    1cc2:	89 81       	ldd	r24, Y+1	; 0x01
    1cc4:	8f 5f       	subi	r24, 0xFF	; 255
    1cc6:	89 83       	std	Y+1, r24	; 0x01
    1cc8:	89 81       	ldd	r24, Y+1	; 0x01
    1cca:	84 30       	cpi	r24, 0x04	; 4
    1ccc:	08 f4       	brcc	.+2      	; 0x1cd0 <KeyPadGetPressedKey+0xda>
    1cce:	9e cf       	rjmp	.-196    	; 0x1c0c <KeyPadGetPressedKey+0x16>
		DioSetPinValue(KPD_u8COL_PORT, Local_u8ColArr[Local_u8ColCounter], HIGH);
	}



	return Local_u8PressedKey;
    1cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd2:	8d 83       	std	Y+5, r24	; 0x05
    1cd4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	cf 91       	pop	r28
    1ce2:	df 91       	pop	r29
    1ce4:	08 95       	ret

00001ce6 <voidSendEnablePulse>:
#include "LCD.h"
#include "LCD_private.h"
#include "LCD_config.h"

static void voidSendEnablePulse(void)
{
    1ce6:	df 93       	push	r29
    1ce8:	cf 93       	push	r28
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
    1cee:	2e 97       	sbiw	r28, 0x0e	; 14
    1cf0:	0f b6       	in	r0, 0x3f	; 63
    1cf2:	f8 94       	cli
    1cf4:	de bf       	out	0x3e, r29	; 62
    1cf6:	0f be       	out	0x3f, r0	; 63
    1cf8:	cd bf       	out	0x3d, r28	; 61
	/*Send enable pulse*/
	DioSetPinValue(LCD_CTRL_PORT, LCD_E_PIN, HIGH);
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	66 e0       	ldi	r22, 0x06	; 6
    1cfe:	41 e0       	ldi	r20, 0x01	; 1
    1d00:	0e 94 3c 0b 	call	0x1678	; 0x1678 <DioSetPinValue>
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	a0 e0       	ldi	r26, 0x00	; 0
    1d0a:	b0 e4       	ldi	r27, 0x40	; 64
    1d0c:	8b 87       	std	Y+11, r24	; 0x0b
    1d0e:	9c 87       	std	Y+12, r25	; 0x0c
    1d10:	ad 87       	std	Y+13, r26	; 0x0d
    1d12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d14:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d16:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	4a ef       	ldi	r20, 0xFA	; 250
    1d22:	54 e4       	ldi	r21, 0x44	; 68
    1d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	8f 83       	std	Y+7, r24	; 0x07
    1d2e:	98 87       	std	Y+8, r25	; 0x08
    1d30:	a9 87       	std	Y+9, r26	; 0x09
    1d32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d34:	6f 81       	ldd	r22, Y+7	; 0x07
    1d36:	78 85       	ldd	r23, Y+8	; 0x08
    1d38:	89 85       	ldd	r24, Y+9	; 0x09
    1d3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	40 e8       	ldi	r20, 0x80	; 128
    1d42:	5f e3       	ldi	r21, 0x3F	; 63
    1d44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d48:	88 23       	and	r24, r24
    1d4a:	2c f4       	brge	.+10     	; 0x1d56 <voidSendEnablePulse+0x70>
		__ticks = 1;
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	9e 83       	std	Y+6, r25	; 0x06
    1d52:	8d 83       	std	Y+5, r24	; 0x05
    1d54:	3f c0       	rjmp	.+126    	; 0x1dd4 <voidSendEnablePulse+0xee>
	else if (__tmp > 65535)
    1d56:	6f 81       	ldd	r22, Y+7	; 0x07
    1d58:	78 85       	ldd	r23, Y+8	; 0x08
    1d5a:	89 85       	ldd	r24, Y+9	; 0x09
    1d5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	3f ef       	ldi	r19, 0xFF	; 255
    1d62:	4f e7       	ldi	r20, 0x7F	; 127
    1d64:	57 e4       	ldi	r21, 0x47	; 71
    1d66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d6a:	18 16       	cp	r1, r24
    1d6c:	4c f5       	brge	.+82     	; 0x1dc0 <voidSendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d70:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	40 e2       	ldi	r20, 0x20	; 32
    1d7c:	51 e4       	ldi	r21, 0x41	; 65
    1d7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d82:	dc 01       	movw	r26, r24
    1d84:	cb 01       	movw	r24, r22
    1d86:	bc 01       	movw	r22, r24
    1d88:	cd 01       	movw	r24, r26
    1d8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	9e 83       	std	Y+6, r25	; 0x06
    1d94:	8d 83       	std	Y+5, r24	; 0x05
    1d96:	0f c0       	rjmp	.+30     	; 0x1db6 <voidSendEnablePulse+0xd0>
    1d98:	88 ec       	ldi	r24, 0xC8	; 200
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	9c 83       	std	Y+4, r25	; 0x04
    1d9e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1da0:	8b 81       	ldd	r24, Y+3	; 0x03
    1da2:	9c 81       	ldd	r25, Y+4	; 0x04
    1da4:	01 97       	sbiw	r24, 0x01	; 1
    1da6:	f1 f7       	brne	.-4      	; 0x1da4 <voidSendEnablePulse+0xbe>
    1da8:	9c 83       	std	Y+4, r25	; 0x04
    1daa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dac:	8d 81       	ldd	r24, Y+5	; 0x05
    1dae:	9e 81       	ldd	r25, Y+6	; 0x06
    1db0:	01 97       	sbiw	r24, 0x01	; 1
    1db2:	9e 83       	std	Y+6, r25	; 0x06
    1db4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db6:	8d 81       	ldd	r24, Y+5	; 0x05
    1db8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dba:	00 97       	sbiw	r24, 0x00	; 0
    1dbc:	69 f7       	brne	.-38     	; 0x1d98 <voidSendEnablePulse+0xb2>
    1dbe:	14 c0       	rjmp	.+40     	; 0x1de8 <voidSendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc2:	78 85       	ldd	r23, Y+8	; 0x08
    1dc4:	89 85       	ldd	r24, Y+9	; 0x09
    1dc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	9e 83       	std	Y+6, r25	; 0x06
    1dd2:	8d 83       	std	Y+5, r24	; 0x05
    1dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd8:	9a 83       	std	Y+2, r25	; 0x02
    1dda:	89 83       	std	Y+1, r24	; 0x01
    1ddc:	89 81       	ldd	r24, Y+1	; 0x01
    1dde:	9a 81       	ldd	r25, Y+2	; 0x02
    1de0:	01 97       	sbiw	r24, 0x01	; 1
    1de2:	f1 f7       	brne	.-4      	; 0x1de0 <voidSendEnablePulse+0xfa>
    1de4:	9a 83       	std	Y+2, r25	; 0x02
    1de6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DioSetPinValue(LCD_CTRL_PORT, LCD_E_PIN, LOW);
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	66 e0       	ldi	r22, 0x06	; 6
    1dec:	40 e0       	ldi	r20, 0x00	; 0
    1dee:	0e 94 3c 0b 	call	0x1678	; 0x1678 <DioSetPinValue>
}
    1df2:	2e 96       	adiw	r28, 0x0e	; 14
    1df4:	0f b6       	in	r0, 0x3f	; 63
    1df6:	f8 94       	cli
    1df8:	de bf       	out	0x3e, r29	; 62
    1dfa:	0f be       	out	0x3f, r0	; 63
    1dfc:	cd bf       	out	0x3d, r28	; 61
    1dfe:	cf 91       	pop	r28
    1e00:	df 91       	pop	r29
    1e02:	08 95       	ret

00001e04 <voidSetLCDHalfDataPort>:


static void voidSetLCDHalfDataPort(u8 Copy_u8Nipple)
{
    1e04:	df 93       	push	r29
    1e06:	cf 93       	push	r28
    1e08:	0f 92       	push	r0
    1e0a:	cd b7       	in	r28, 0x3d	; 61
    1e0c:	de b7       	in	r29, 0x3e	; 62
    1e0e:	89 83       	std	Y+1, r24	; 0x01
	DioSetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(Copy_u8Nipple,0));
    1e10:	89 81       	ldd	r24, Y+1	; 0x01
    1e12:	98 2f       	mov	r25, r24
    1e14:	91 70       	andi	r25, 0x01	; 1
    1e16:	83 e0       	ldi	r24, 0x03	; 3
    1e18:	64 e0       	ldi	r22, 0x04	; 4
    1e1a:	49 2f       	mov	r20, r25
    1e1c:	0e 94 3c 0b 	call	0x1678	; 0x1678 <DioSetPinValue>
	DioSetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(Copy_u8Nipple,1));
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
    1e22:	86 95       	lsr	r24
    1e24:	98 2f       	mov	r25, r24
    1e26:	91 70       	andi	r25, 0x01	; 1
    1e28:	83 e0       	ldi	r24, 0x03	; 3
    1e2a:	65 e0       	ldi	r22, 0x05	; 5
    1e2c:	49 2f       	mov	r20, r25
    1e2e:	0e 94 3c 0b 	call	0x1678	; 0x1678 <DioSetPinValue>
	DioSetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(Copy_u8Nipple,2));
    1e32:	89 81       	ldd	r24, Y+1	; 0x01
    1e34:	86 95       	lsr	r24
    1e36:	86 95       	lsr	r24
    1e38:	98 2f       	mov	r25, r24
    1e3a:	91 70       	andi	r25, 0x01	; 1
    1e3c:	83 e0       	ldi	r24, 0x03	; 3
    1e3e:	66 e0       	ldi	r22, 0x06	; 6
    1e40:	49 2f       	mov	r20, r25
    1e42:	0e 94 3c 0b 	call	0x1678	; 0x1678 <DioSetPinValue>
	DioSetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(Copy_u8Nipple,3));
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	86 95       	lsr	r24
    1e4a:	86 95       	lsr	r24
    1e4c:	86 95       	lsr	r24
    1e4e:	98 2f       	mov	r25, r24
    1e50:	91 70       	andi	r25, 0x01	; 1
    1e52:	83 e0       	ldi	r24, 0x03	; 3
    1e54:	67 e0       	ldi	r22, 0x07	; 7
    1e56:	49 2f       	mov	r20, r25
    1e58:	0e 94 3c 0b 	call	0x1678	; 0x1678 <DioSetPinValue>
}
    1e5c:	0f 90       	pop	r0
    1e5e:	cf 91       	pop	r28
    1e60:	df 91       	pop	r29
    1e62:	08 95       	ret

00001e64 <LCD_voidInit>:

void LCD_voidInit(void)
{
    1e64:	df 93       	push	r29
    1e66:	cf 93       	push	r28
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
    1e6c:	2e 97       	sbiw	r28, 0x0e	; 14
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	f8 94       	cli
    1e72:	de bf       	out	0x3e, r29	; 62
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	cd bf       	out	0x3d, r28	; 61
	DioSetPinDirection(portD,pin4,OUTPUT);
    1e78:	83 e0       	ldi	r24, 0x03	; 3
    1e7a:	64 e0       	ldi	r22, 0x04	; 4
    1e7c:	41 e0       	ldi	r20, 0x01	; 1
    1e7e:	0e 94 38 0a 	call	0x1470	; 0x1470 <DioSetPinDirection>
	DioSetPinDirection(portD,pin5,OUTPUT);
    1e82:	83 e0       	ldi	r24, 0x03	; 3
    1e84:	65 e0       	ldi	r22, 0x05	; 5
    1e86:	41 e0       	ldi	r20, 0x01	; 1
    1e88:	0e 94 38 0a 	call	0x1470	; 0x1470 <DioSetPinDirection>
	DioSetPinDirection(portD,pin6,OUTPUT);
    1e8c:	83 e0       	ldi	r24, 0x03	; 3
    1e8e:	66 e0       	ldi	r22, 0x06	; 6
    1e90:	41 e0       	ldi	r20, 0x01	; 1
    1e92:	0e 94 38 0a 	call	0x1470	; 0x1470 <DioSetPinDirection>
	DioSetPinDirection(portD,pin7,OUTPUT);
    1e96:	83 e0       	ldi	r24, 0x03	; 3
    1e98:	67 e0       	ldi	r22, 0x07	; 7
    1e9a:	41 e0       	ldi	r20, 0x01	; 1
    1e9c:	0e 94 38 0a 	call	0x1470	; 0x1470 <DioSetPinDirection>

	DioSetPinDirection(portB,pin5,OUTPUT);
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	65 e0       	ldi	r22, 0x05	; 5
    1ea4:	41 e0       	ldi	r20, 0x01	; 1
    1ea6:	0e 94 38 0a 	call	0x1470	; 0x1470 <DioSetPinDirection>
	DioSetPinDirection(portB,pin6,OUTPUT);
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	66 e0       	ldi	r22, 0x06	; 6
    1eae:	41 e0       	ldi	r20, 0x01	; 1
    1eb0:	0e 94 38 0a 	call	0x1470	; 0x1470 <DioSetPinDirection>
    1eb4:	80 e0       	ldi	r24, 0x00	; 0
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	a0 e2       	ldi	r26, 0x20	; 32
    1eba:	b2 e4       	ldi	r27, 0x42	; 66
    1ebc:	8b 87       	std	Y+11, r24	; 0x0b
    1ebe:	9c 87       	std	Y+12, r25	; 0x0c
    1ec0:	ad 87       	std	Y+13, r26	; 0x0d
    1ec2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ec6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ec8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eca:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	4a ef       	ldi	r20, 0xFA	; 250
    1ed2:	54 e4       	ldi	r21, 0x44	; 68
    1ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	8f 83       	std	Y+7, r24	; 0x07
    1ede:	98 87       	std	Y+8, r25	; 0x08
    1ee0:	a9 87       	std	Y+9, r26	; 0x09
    1ee2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ee4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee6:	78 85       	ldd	r23, Y+8	; 0x08
    1ee8:	89 85       	ldd	r24, Y+9	; 0x09
    1eea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	40 e8       	ldi	r20, 0x80	; 128
    1ef2:	5f e3       	ldi	r21, 0x3F	; 63
    1ef4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ef8:	88 23       	and	r24, r24
    1efa:	2c f4       	brge	.+10     	; 0x1f06 <LCD_voidInit+0xa2>
		__ticks = 1;
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	9e 83       	std	Y+6, r25	; 0x06
    1f02:	8d 83       	std	Y+5, r24	; 0x05
    1f04:	3f c0       	rjmp	.+126    	; 0x1f84 <LCD_voidInit+0x120>
	else if (__tmp > 65535)
    1f06:	6f 81       	ldd	r22, Y+7	; 0x07
    1f08:	78 85       	ldd	r23, Y+8	; 0x08
    1f0a:	89 85       	ldd	r24, Y+9	; 0x09
    1f0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	3f ef       	ldi	r19, 0xFF	; 255
    1f12:	4f e7       	ldi	r20, 0x7F	; 127
    1f14:	57 e4       	ldi	r21, 0x47	; 71
    1f16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f1a:	18 16       	cp	r1, r24
    1f1c:	4c f5       	brge	.+82     	; 0x1f70 <LCD_voidInit+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	40 e2       	ldi	r20, 0x20	; 32
    1f2c:	51 e4       	ldi	r21, 0x41	; 65
    1f2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	bc 01       	movw	r22, r24
    1f38:	cd 01       	movw	r24, r26
    1f3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	9e 83       	std	Y+6, r25	; 0x06
    1f44:	8d 83       	std	Y+5, r24	; 0x05
    1f46:	0f c0       	rjmp	.+30     	; 0x1f66 <LCD_voidInit+0x102>
    1f48:	88 ec       	ldi	r24, 0xC8	; 200
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	9c 83       	std	Y+4, r25	; 0x04
    1f4e:	8b 83       	std	Y+3, r24	; 0x03
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
    1f52:	9c 81       	ldd	r25, Y+4	; 0x04
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	f1 f7       	brne	.-4      	; 0x1f54 <LCD_voidInit+0xf0>
    1f58:	9c 83       	std	Y+4, r25	; 0x04
    1f5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f60:	01 97       	sbiw	r24, 0x01	; 1
    1f62:	9e 83       	std	Y+6, r25	; 0x06
    1f64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f66:	8d 81       	ldd	r24, Y+5	; 0x05
    1f68:	9e 81       	ldd	r25, Y+6	; 0x06
    1f6a:	00 97       	sbiw	r24, 0x00	; 0
    1f6c:	69 f7       	brne	.-38     	; 0x1f48 <LCD_voidInit+0xe4>
    1f6e:	14 c0       	rjmp	.+40     	; 0x1f98 <LCD_voidInit+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f70:	6f 81       	ldd	r22, Y+7	; 0x07
    1f72:	78 85       	ldd	r23, Y+8	; 0x08
    1f74:	89 85       	ldd	r24, Y+9	; 0x09
    1f76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	9e 83       	std	Y+6, r25	; 0x06
    1f82:	8d 83       	std	Y+5, r24	; 0x05
    1f84:	8d 81       	ldd	r24, Y+5	; 0x05
    1f86:	9e 81       	ldd	r25, Y+6	; 0x06
    1f88:	9a 83       	std	Y+2, r25	; 0x02
    1f8a:	89 83       	std	Y+1, r24	; 0x01
    1f8c:	89 81       	ldd	r24, Y+1	; 0x01
    1f8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f90:	01 97       	sbiw	r24, 0x01	; 1
    1f92:	f1 f7       	brne	.-4      	; 0x1f90 <LCD_voidInit+0x12c>
    1f94:	9a 83       	std	Y+2, r25	; 0x02
    1f96:	89 83       	std	Y+1, r24	; 0x01
	/*wait for more than 30ms after power is on*/
	_delay_ms(40);
	DioSetPinDirection(portD,pin4,OUTPUT);
    1f98:	83 e0       	ldi	r24, 0x03	; 3
    1f9a:	64 e0       	ldi	r22, 0x04	; 4
    1f9c:	41 e0       	ldi	r20, 0x01	; 1
    1f9e:	0e 94 38 0a 	call	0x1470	; 0x1470 <DioSetPinDirection>
	/*Function Set command: 2 lines, 5*7 font size*/
#if LCD_OP_MODE == EIGHT_BIT_MODE
	LCD_voidSendCmd(0b00111000);

#elif LCD_OP_MODE == FOUR_BIT_MODE
	voidSetLCDHalfDataPort(0b0010);
    1fa2:	82 e0       	ldi	r24, 0x02	; 2
    1fa4:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    1fa8:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b0010);
    1fac:	82 e0       	ldi	r24, 0x02	; 2
    1fae:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    1fb2:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <voidSendEnablePulse>
	voidSetLCDHalfDataPort(0b1000);
    1fb6:	88 e0       	ldi	r24, 0x08	; 8
    1fb8:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    1fbc:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <voidSendEnablePulse>

#endif
	/*we don't need to make another delay, as LCD_voidSendCmd have 2ms delay*/

	/*Display ON/OFF control: Display enable, Cursor and blink disable*/
	LCD_voidSendCmd(0b00001100);
    1fc0:	8c e0       	ldi	r24, 0x0C	; 12
    1fc2:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <LCD_voidSendCmd>

	/*Clearing The Display*/
	LCD_voidSendCmd(1);
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <LCD_voidSendCmd>
}
    1fcc:	2e 96       	adiw	r28, 0x0e	; 14
    1fce:	0f b6       	in	r0, 0x3f	; 63
    1fd0:	f8 94       	cli
    1fd2:	de bf       	out	0x3e, r29	; 62
    1fd4:	0f be       	out	0x3f, r0	; 63
    1fd6:	cd bf       	out	0x3d, r28	; 61
    1fd8:	cf 91       	pop	r28
    1fda:	df 91       	pop	r29
    1fdc:	08 95       	ret

00001fde <LCD_voidSendCmd>:
void LCD_voidSendCmd(u8 Copy_u8Cmd){
    1fde:	df 93       	push	r29
    1fe0:	cf 93       	push	r28
    1fe2:	0f 92       	push	r0
    1fe4:	cd b7       	in	r28, 0x3d	; 61
    1fe6:	de b7       	in	r29, 0x3e	; 62
    1fe8:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS pin to low for command mode*/
	DioSetPinValue(portB, LCD_RS_PIN, LOW);
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	65 e0       	ldi	r22, 0x05	; 5
    1fee:	40 e0       	ldi	r20, 0x00	; 0
    1ff0:	0e 94 3c 0b 	call	0x1678	; 0x1678 <DioSetPinValue>
	/*Send The command on data pins*/
	DioSetPortValue(LCD_DATA_PORT, Copy_u8Cmd);
	LCD_voidSendEnablePulse();

#elif LCD_OP_MODE == FOUR_BIT_MODE
	voidSetLCDHalfDataPort(Copy_u8Cmd >> 4); /*Send the 4 most bits to the LCD*/
    1ff4:	89 81       	ldd	r24, Y+1	; 0x01
    1ff6:	82 95       	swap	r24
    1ff8:	8f 70       	andi	r24, 0x0F	; 15
    1ffa:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    1ffe:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <voidSendEnablePulse>

	voidSetLCDHalfDataPort(Copy_u8Cmd);		/*Send the 4 least bits to the LCD*/
    2002:	89 81       	ldd	r24, Y+1	; 0x01
    2004:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    2008:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <voidSendEnablePulse>

#endif
}
    200c:	0f 90       	pop	r0
    200e:	cf 91       	pop	r28
    2010:	df 91       	pop	r29
    2012:	08 95       	ret

00002014 <LCD_voidSendData>:

void LCD_voidSendData(u8 Copy_u8Data){
    2014:	df 93       	push	r29
    2016:	cf 93       	push	r28
    2018:	0f 92       	push	r0
    201a:	cd b7       	in	r28, 0x3d	; 61
    201c:	de b7       	in	r29, 0x3e	; 62
    201e:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS pin to HIGH for data mode*/
	DioSetPinValue(portB, LCD_RS_PIN,HIGH);
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	65 e0       	ldi	r22, 0x05	; 5
    2024:	41 e0       	ldi	r20, 0x01	; 1
    2026:	0e 94 3c 0b 	call	0x1678	; 0x1678 <DioSetPinValue>
	/*Send The Data on data pins*/
	DioSetPortValue(LCD_DATA_PORT, Copy_u8Data);
	LCD_voidSendEnablePulse();

#elif LCD_OP_MODE == FOUR_BIT_MODE
	voidSetLCDHalfDataPort(Copy_u8Data >> 4);
    202a:	89 81       	ldd	r24, Y+1	; 0x01
    202c:	82 95       	swap	r24
    202e:	8f 70       	andi	r24, 0x0F	; 15
    2030:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    2034:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <voidSendEnablePulse>

	voidSetLCDHalfDataPort(Copy_u8Data);
    2038:	89 81       	ldd	r24, Y+1	; 0x01
    203a:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <voidSetLCDHalfDataPort>
	voidSendEnablePulse();
    203e:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <voidSendEnablePulse>

#endif
}
    2042:	0f 90       	pop	r0
    2044:	cf 91       	pop	r28
    2046:	df 91       	pop	r29
    2048:	08 95       	ret

0000204a <LCD_SendString>:

void LCD_SendString(const char* Copy_chString){
    204a:	df 93       	push	r29
    204c:	cf 93       	push	r28
    204e:	00 d0       	rcall	.+0      	; 0x2050 <LCD_SendString+0x6>
    2050:	0f 92       	push	r0
    2052:	cd b7       	in	r28, 0x3d	; 61
    2054:	de b7       	in	r29, 0x3e	; 62
    2056:	9b 83       	std	Y+3, r25	; 0x03
    2058:	8a 83       	std	Y+2, r24	; 0x02

	if (Copy_chString != NULL)
    205a:	8a 81       	ldd	r24, Y+2	; 0x02
    205c:	9b 81       	ldd	r25, Y+3	; 0x03
    205e:	00 97       	sbiw	r24, 0x00	; 0
    2060:	d9 f0       	breq	.+54     	; 0x2098 <LCD_SendString+0x4e>
	{
		u8 Local_u8Itterator = 0u;
    2062:	19 82       	std	Y+1, r1	; 0x01
    2064:	0e c0       	rjmp	.+28     	; 0x2082 <LCD_SendString+0x38>
		while (Copy_chString[Local_u8Itterator] != '\0')
		{
			LCD_voidSendData(Copy_chString[Local_u8Itterator]);
    2066:	89 81       	ldd	r24, Y+1	; 0x01
    2068:	28 2f       	mov	r18, r24
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	8a 81       	ldd	r24, Y+2	; 0x02
    206e:	9b 81       	ldd	r25, Y+3	; 0x03
    2070:	fc 01       	movw	r30, r24
    2072:	e2 0f       	add	r30, r18
    2074:	f3 1f       	adc	r31, r19
    2076:	80 81       	ld	r24, Z
    2078:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_voidSendData>
			Local_u8Itterator++;
    207c:	89 81       	ldd	r24, Y+1	; 0x01
    207e:	8f 5f       	subi	r24, 0xFF	; 255
    2080:	89 83       	std	Y+1, r24	; 0x01
void LCD_SendString(const char* Copy_chString){

	if (Copy_chString != NULL)
	{
		u8 Local_u8Itterator = 0u;
		while (Copy_chString[Local_u8Itterator] != '\0')
    2082:	89 81       	ldd	r24, Y+1	; 0x01
    2084:	28 2f       	mov	r18, r24
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	8a 81       	ldd	r24, Y+2	; 0x02
    208a:	9b 81       	ldd	r25, Y+3	; 0x03
    208c:	fc 01       	movw	r30, r24
    208e:	e2 0f       	add	r30, r18
    2090:	f3 1f       	adc	r31, r19
    2092:	80 81       	ld	r24, Z
    2094:	88 23       	and	r24, r24
    2096:	39 f7       	brne	.-50     	; 0x2066 <LCD_SendString+0x1c>
	{

	}


}
    2098:	0f 90       	pop	r0
    209a:	0f 90       	pop	r0
    209c:	0f 90       	pop	r0
    209e:	cf 91       	pop	r28
    20a0:	df 91       	pop	r29
    20a2:	08 95       	ret

000020a4 <LCD_voidSendNumber>:

void LCD_voidSendNumber(s32 Copy_s32Number){
    20a4:	df 93       	push	r29
    20a6:	cf 93       	push	r28
    20a8:	cd b7       	in	r28, 0x3d	; 61
    20aa:	de b7       	in	r29, 0x3e	; 62
    20ac:	61 97       	sbiw	r28, 0x11	; 17
    20ae:	0f b6       	in	r0, 0x3f	; 63
    20b0:	f8 94       	cli
    20b2:	de bf       	out	0x3e, r29	; 62
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	cd bf       	out	0x3d, r28	; 61
    20b8:	6e 87       	std	Y+14, r22	; 0x0e
    20ba:	7f 87       	std	Y+15, r23	; 0x0f
    20bc:	88 8b       	std	Y+16, r24	; 0x10
    20be:	99 8b       	std	Y+17, r25	; 0x11
	 char Local_chNumberArr[10];
		    u8 Local_u8RightDigit;
		    u8 Local_u8Counter1 = 0;
    20c0:	1a 82       	std	Y+2, r1	; 0x02
		    s8 Local_s8Counter2;

		    if (Copy_s32Number == 0)
    20c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    20c4:	9f 85       	ldd	r25, Y+15	; 0x0f
    20c6:	a8 89       	ldd	r26, Y+16	; 0x10
    20c8:	b9 89       	ldd	r27, Y+17	; 0x11
    20ca:	00 97       	sbiw	r24, 0x00	; 0
    20cc:	a1 05       	cpc	r26, r1
    20ce:	b1 05       	cpc	r27, r1
    20d0:	21 f4       	brne	.+8      	; 0x20da <LCD_voidSendNumber+0x36>
		    {
		    	LCD_voidSendData('0');
    20d2:	80 e3       	ldi	r24, 0x30	; 48
    20d4:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_voidSendData>
    20d8:	69 c0       	rjmp	.+210    	; 0x21ac <LCD_voidSendNumber+0x108>
		    	return;
		    }

		    else if (Copy_s32Number < 0)
    20da:	8e 85       	ldd	r24, Y+14	; 0x0e
    20dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    20de:	a8 89       	ldd	r26, Y+16	; 0x10
    20e0:	b9 89       	ldd	r27, Y+17	; 0x11
    20e2:	bb 23       	and	r27, r27
    20e4:	0c f0       	brlt	.+2      	; 0x20e8 <LCD_voidSendNumber+0x44>
    20e6:	43 c0       	rjmp	.+134    	; 0x216e <LCD_voidSendNumber+0xca>
		    {
		    	LCD_voidSendData('-');
    20e8:	8d e2       	ldi	r24, 0x2D	; 45
    20ea:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_voidSendData>
		    	Copy_s32Number *= -1;
    20ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    20f0:	9f 85       	ldd	r25, Y+15	; 0x0f
    20f2:	a8 89       	ldd	r26, Y+16	; 0x10
    20f4:	b9 89       	ldd	r27, Y+17	; 0x11
    20f6:	b0 95       	com	r27
    20f8:	a0 95       	com	r26
    20fa:	90 95       	com	r25
    20fc:	81 95       	neg	r24
    20fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2100:	af 4f       	sbci	r26, 0xFF	; 255
    2102:	bf 4f       	sbci	r27, 0xFF	; 255
    2104:	8e 87       	std	Y+14, r24	; 0x0e
    2106:	9f 87       	std	Y+15, r25	; 0x0f
    2108:	a8 8b       	std	Y+16, r26	; 0x10
    210a:	b9 8b       	std	Y+17, r27	; 0x11
    210c:	30 c0       	rjmp	.+96     	; 0x216e <LCD_voidSendNumber+0xca>
		    }

		    while (Copy_s32Number != 0)
		    {
		    	Local_u8RightDigit = Copy_s32Number % 10;		//Extracts the right most digit
    210e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2110:	9f 85       	ldd	r25, Y+15	; 0x0f
    2112:	a8 89       	ldd	r26, Y+16	; 0x10
    2114:	b9 89       	ldd	r27, Y+17	; 0x11
    2116:	2a e0       	ldi	r18, 0x0A	; 10
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	40 e0       	ldi	r20, 0x00	; 0
    211c:	50 e0       	ldi	r21, 0x00	; 0
    211e:	bc 01       	movw	r22, r24
    2120:	cd 01       	movw	r24, r26
    2122:	0e 94 b4 18 	call	0x3168	; 0x3168 <__divmodsi4>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	8b 83       	std	Y+3, r24	; 0x03
		    	Copy_s32Number /= 10;
    212c:	8e 85       	ldd	r24, Y+14	; 0x0e
    212e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2130:	a8 89       	ldd	r26, Y+16	; 0x10
    2132:	b9 89       	ldd	r27, Y+17	; 0x11
    2134:	2a e0       	ldi	r18, 0x0A	; 10
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	40 e0       	ldi	r20, 0x00	; 0
    213a:	50 e0       	ldi	r21, 0x00	; 0
    213c:	bc 01       	movw	r22, r24
    213e:	cd 01       	movw	r24, r26
    2140:	0e 94 b4 18 	call	0x3168	; 0x3168 <__divmodsi4>
    2144:	da 01       	movw	r26, r20
    2146:	c9 01       	movw	r24, r18
    2148:	8e 87       	std	Y+14, r24	; 0x0e
    214a:	9f 87       	std	Y+15, r25	; 0x0f
    214c:	a8 8b       	std	Y+16, r26	; 0x10
    214e:	b9 8b       	std	Y+17, r27	; 0x11
		    	Local_chNumberArr[Local_u8Counter1] = Local_u8RightDigit + '0';		//Store that dig in array
    2150:	8a 81       	ldd	r24, Y+2	; 0x02
    2152:	28 2f       	mov	r18, r24
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	8b 81       	ldd	r24, Y+3	; 0x03
    2158:	48 2f       	mov	r20, r24
    215a:	40 5d       	subi	r20, 0xD0	; 208
    215c:	ce 01       	movw	r24, r28
    215e:	04 96       	adiw	r24, 0x04	; 4
    2160:	fc 01       	movw	r30, r24
    2162:	e2 0f       	add	r30, r18
    2164:	f3 1f       	adc	r31, r19
    2166:	40 83       	st	Z, r20
		    	Local_u8Counter1++;
    2168:	8a 81       	ldd	r24, Y+2	; 0x02
    216a:	8f 5f       	subi	r24, 0xFF	; 255
    216c:	8a 83       	std	Y+2, r24	; 0x02
		    {
		    	LCD_voidSendData('-');
		    	Copy_s32Number *= -1;
		    }

		    while (Copy_s32Number != 0)
    216e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2170:	9f 85       	ldd	r25, Y+15	; 0x0f
    2172:	a8 89       	ldd	r26, Y+16	; 0x10
    2174:	b9 89       	ldd	r27, Y+17	; 0x11
    2176:	00 97       	sbiw	r24, 0x00	; 0
    2178:	a1 05       	cpc	r26, r1
    217a:	b1 05       	cpc	r27, r1
    217c:	41 f6       	brne	.-112    	; 0x210e <LCD_voidSendNumber+0x6a>
		    	Copy_s32Number /= 10;
		    	Local_chNumberArr[Local_u8Counter1] = Local_u8RightDigit + '0';		//Store that dig in array
		    	Local_u8Counter1++;
		    }

		    for (Local_s8Counter2 = Local_u8Counter1 - 1; Local_s8Counter2 >= 0; Local_s8Counter2--)
    217e:	8a 81       	ldd	r24, Y+2	; 0x02
    2180:	81 50       	subi	r24, 0x01	; 1
    2182:	89 83       	std	Y+1, r24	; 0x01
    2184:	10 c0       	rjmp	.+32     	; 0x21a6 <LCD_voidSendNumber+0x102>
		    {
		    	LCD_voidSendData(Local_chNumberArr[Local_s8Counter2]);
    2186:	89 81       	ldd	r24, Y+1	; 0x01
    2188:	28 2f       	mov	r18, r24
    218a:	33 27       	eor	r19, r19
    218c:	27 fd       	sbrc	r18, 7
    218e:	30 95       	com	r19
    2190:	ce 01       	movw	r24, r28
    2192:	04 96       	adiw	r24, 0x04	; 4
    2194:	fc 01       	movw	r30, r24
    2196:	e2 0f       	add	r30, r18
    2198:	f3 1f       	adc	r31, r19
    219a:	80 81       	ld	r24, Z
    219c:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_voidSendData>
		    	Copy_s32Number /= 10;
		    	Local_chNumberArr[Local_u8Counter1] = Local_u8RightDigit + '0';		//Store that dig in array
		    	Local_u8Counter1++;
		    }

		    for (Local_s8Counter2 = Local_u8Counter1 - 1; Local_s8Counter2 >= 0; Local_s8Counter2--)
    21a0:	89 81       	ldd	r24, Y+1	; 0x01
    21a2:	81 50       	subi	r24, 0x01	; 1
    21a4:	89 83       	std	Y+1, r24	; 0x01
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
    21a8:	88 23       	and	r24, r24
    21aa:	6c f7       	brge	.-38     	; 0x2186 <LCD_voidSendNumber+0xe2>
		    {
		    	LCD_voidSendData(Local_chNumberArr[Local_s8Counter2]);
		    }
}
    21ac:	61 96       	adiw	r28, 0x11	; 17
    21ae:	0f b6       	in	r0, 0x3f	; 63
    21b0:	f8 94       	cli
    21b2:	de bf       	out	0x3e, r29	; 62
    21b4:	0f be       	out	0x3f, r0	; 63
    21b6:	cd bf       	out	0x3d, r28	; 61
    21b8:	cf 91       	pop	r28
    21ba:	df 91       	pop	r29
    21bc:	08 95       	ret

000021be <LCD_voidSendBinary>:

void LCD_voidSendBinary(s32 Copy_s32DecimalNumber){
    21be:	df 93       	push	r29
    21c0:	cf 93       	push	r28
    21c2:	cd b7       	in	r28, 0x3d	; 61
    21c4:	de b7       	in	r29, 0x3e	; 62
    21c6:	63 97       	sbiw	r28, 0x13	; 19
    21c8:	0f b6       	in	r0, 0x3f	; 63
    21ca:	f8 94       	cli
    21cc:	de bf       	out	0x3e, r29	; 62
    21ce:	0f be       	out	0x3f, r0	; 63
    21d0:	cd bf       	out	0x3d, r28	; 61
    21d2:	68 8b       	std	Y+16, r22	; 0x10
    21d4:	79 8b       	std	Y+17, r23	; 0x11
    21d6:	8a 8b       	std	Y+18, r24	; 0x12
    21d8:	9b 8b       	std	Y+19, r25	; 0x13
	u8 Local_u8DigitsArr[14];
	s8 Local_s8DigitIndex;

	for (Local_s8DigitIndex = 0; Local_s8DigitIndex < 14; Local_s8DigitIndex++)
    21da:	19 82       	std	Y+1, r1	; 0x01
    21dc:	20 c0       	rjmp	.+64     	; 0x221e <LCD_voidSendBinary+0x60>
	{
		Local_u8DigitsArr[Local_s8DigitIndex] = GET_BIT(Copy_s32DecimalNumber, Local_s8DigitIndex);
    21de:	89 81       	ldd	r24, Y+1	; 0x01
    21e0:	48 2f       	mov	r20, r24
    21e2:	55 27       	eor	r21, r21
    21e4:	47 fd       	sbrc	r20, 7
    21e6:	50 95       	com	r21
    21e8:	89 81       	ldd	r24, Y+1	; 0x01
    21ea:	28 2f       	mov	r18, r24
    21ec:	33 27       	eor	r19, r19
    21ee:	27 fd       	sbrc	r18, 7
    21f0:	30 95       	com	r19
    21f2:	88 89       	ldd	r24, Y+16	; 0x10
    21f4:	99 89       	ldd	r25, Y+17	; 0x11
    21f6:	aa 89       	ldd	r26, Y+18	; 0x12
    21f8:	bb 89       	ldd	r27, Y+19	; 0x13
    21fa:	04 c0       	rjmp	.+8      	; 0x2204 <LCD_voidSendBinary+0x46>
    21fc:	b5 95       	asr	r27
    21fe:	a7 95       	ror	r26
    2200:	97 95       	ror	r25
    2202:	87 95       	ror	r24
    2204:	2a 95       	dec	r18
    2206:	d2 f7       	brpl	.-12     	; 0x21fc <LCD_voidSendBinary+0x3e>
    2208:	28 2f       	mov	r18, r24
    220a:	21 70       	andi	r18, 0x01	; 1
    220c:	ce 01       	movw	r24, r28
    220e:	02 96       	adiw	r24, 0x02	; 2
    2210:	fc 01       	movw	r30, r24
    2212:	e4 0f       	add	r30, r20
    2214:	f5 1f       	adc	r31, r21
    2216:	20 83       	st	Z, r18

void LCD_voidSendBinary(s32 Copy_s32DecimalNumber){
	u8 Local_u8DigitsArr[14];
	s8 Local_s8DigitIndex;

	for (Local_s8DigitIndex = 0; Local_s8DigitIndex < 14; Local_s8DigitIndex++)
    2218:	89 81       	ldd	r24, Y+1	; 0x01
    221a:	8f 5f       	subi	r24, 0xFF	; 255
    221c:	89 83       	std	Y+1, r24	; 0x01
    221e:	89 81       	ldd	r24, Y+1	; 0x01
    2220:	8e 30       	cpi	r24, 0x0E	; 14
    2222:	ec f2       	brlt	.-70     	; 0x21de <LCD_voidSendBinary+0x20>
	{
		Local_u8DigitsArr[Local_s8DigitIndex] = GET_BIT(Copy_s32DecimalNumber, Local_s8DigitIndex);
	}

	LCD_voidSendNumber(Copy_s32DecimalNumber);
    2224:	88 89       	ldd	r24, Y+16	; 0x10
    2226:	99 89       	ldd	r25, Y+17	; 0x11
    2228:	aa 89       	ldd	r26, Y+18	; 0x12
    222a:	bb 89       	ldd	r27, Y+19	; 0x13
    222c:	bc 01       	movw	r22, r24
    222e:	cd 01       	movw	r24, r26
    2230:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_voidSendNumber>
	LCD_SendString(" to Binary:");
    2234:	80 e6       	ldi	r24, 0x60	; 96
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	0e 94 25 10 	call	0x204a	; 0x204a <LCD_SendString>
	LCD_voidGoToXY(0,1);
    223c:	80 e0       	ldi	r24, 0x00	; 0
    223e:	61 e0       	ldi	r22, 0x01	; 1
    2240:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidGoToXY>
	LCD_SendString("0b");
    2244:	8c e6       	ldi	r24, 0x6C	; 108
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	0e 94 25 10 	call	0x204a	; 0x204a <LCD_SendString>

	for (Local_s8DigitIndex = 13; Local_s8DigitIndex >= 0; Local_s8DigitIndex--)
    224c:	8d e0       	ldi	r24, 0x0D	; 13
    224e:	89 83       	std	Y+1, r24	; 0x01
    2250:	16 c0       	rjmp	.+44     	; 0x227e <LCD_voidSendBinary+0xc0>
	{
		LCD_voidSendNumber(Local_u8DigitsArr[Local_s8DigitIndex]);
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	28 2f       	mov	r18, r24
    2256:	33 27       	eor	r19, r19
    2258:	27 fd       	sbrc	r18, 7
    225a:	30 95       	com	r19
    225c:	ce 01       	movw	r24, r28
    225e:	02 96       	adiw	r24, 0x02	; 2
    2260:	fc 01       	movw	r30, r24
    2262:	e2 0f       	add	r30, r18
    2264:	f3 1f       	adc	r31, r19
    2266:	80 81       	ld	r24, Z
    2268:	88 2f       	mov	r24, r24
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	a0 e0       	ldi	r26, 0x00	; 0
    226e:	b0 e0       	ldi	r27, 0x00	; 0
    2270:	bc 01       	movw	r22, r24
    2272:	cd 01       	movw	r24, r26
    2274:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_voidSendNumber>
	LCD_voidSendNumber(Copy_s32DecimalNumber);
	LCD_SendString(" to Binary:");
	LCD_voidGoToXY(0,1);
	LCD_SendString("0b");

	for (Local_s8DigitIndex = 13; Local_s8DigitIndex >= 0; Local_s8DigitIndex--)
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	81 50       	subi	r24, 0x01	; 1
    227c:	89 83       	std	Y+1, r24	; 0x01
    227e:	89 81       	ldd	r24, Y+1	; 0x01
    2280:	88 23       	and	r24, r24
    2282:	3c f7       	brge	.-50     	; 0x2252 <LCD_voidSendBinary+0x94>
	{
		LCD_voidSendNumber(Local_u8DigitsArr[Local_s8DigitIndex]);
	}

}
    2284:	63 96       	adiw	r28, 0x13	; 19
    2286:	0f b6       	in	r0, 0x3f	; 63
    2288:	f8 94       	cli
    228a:	de bf       	out	0x3e, r29	; 62
    228c:	0f be       	out	0x3f, r0	; 63
    228e:	cd bf       	out	0x3d, r28	; 61
    2290:	cf 91       	pop	r28
    2292:	df 91       	pop	r29
    2294:	08 95       	ret

00002296 <LCD_voidSendHex>:

void LCD_voidSendHex(s32 Copy_s32DecimalNumber){
    2296:	0f 93       	push	r16
    2298:	1f 93       	push	r17
    229a:	df 93       	push	r29
    229c:	cf 93       	push	r28
    229e:	cd b7       	in	r28, 0x3d	; 61
    22a0:	de b7       	in	r29, 0x3e	; 62
    22a2:	69 97       	sbiw	r28, 0x19	; 25
    22a4:	0f b6       	in	r0, 0x3f	; 63
    22a6:	f8 94       	cli
    22a8:	de bf       	out	0x3e, r29	; 62
    22aa:	0f be       	out	0x3f, r0	; 63
    22ac:	cd bf       	out	0x3d, r28	; 61
    22ae:	6c 8b       	std	Y+20, r22	; 0x14
    22b0:	7d 8b       	std	Y+21, r23	; 0x15
    22b2:	8e 8b       	std	Y+22, r24	; 0x16
    22b4:	9f 8b       	std	Y+23, r25	; 0x17
	u8 Local_u8DigitsArr[14];
	s8 Local_s8DigitIndex;
	s32 Local_s8Holder = Copy_s32DecimalNumber;
    22b6:	8c 89       	ldd	r24, Y+20	; 0x14
    22b8:	9d 89       	ldd	r25, Y+21	; 0x15
    22ba:	ae 89       	ldd	r26, Y+22	; 0x16
    22bc:	bf 89       	ldd	r27, Y+23	; 0x17
    22be:	89 83       	std	Y+1, r24	; 0x01
    22c0:	9a 83       	std	Y+2, r25	; 0x02
    22c2:	ab 83       	std	Y+3, r26	; 0x03
    22c4:	bc 83       	std	Y+4, r27	; 0x04

	for (Local_s8DigitIndex = 13; Local_s8DigitIndex >= 0;)
    22c6:	8d e0       	ldi	r24, 0x0D	; 13
    22c8:	8d 83       	std	Y+5, r24	; 0x05
    22ca:	cb c0       	rjmp	.+406    	; 0x2462 <LCD_voidSendHex+0x1cc>





		if (Copy_s32DecimalNumber % 16 == Copy_s32DecimalNumber)
    22cc:	8c 89       	ldd	r24, Y+20	; 0x14
    22ce:	9d 89       	ldd	r25, Y+21	; 0x15
    22d0:	ae 89       	ldd	r26, Y+22	; 0x16
    22d2:	bf 89       	ldd	r27, Y+23	; 0x17
    22d4:	20 e1       	ldi	r18, 0x10	; 16
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	40 e0       	ldi	r20, 0x00	; 0
    22da:	50 e0       	ldi	r21, 0x00	; 0
    22dc:	bc 01       	movw	r22, r24
    22de:	cd 01       	movw	r24, r26
    22e0:	0e 94 b4 18 	call	0x3168	; 0x3168 <__divmodsi4>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	9c 01       	movw	r18, r24
    22ea:	ad 01       	movw	r20, r26
    22ec:	8c 89       	ldd	r24, Y+20	; 0x14
    22ee:	9d 89       	ldd	r25, Y+21	; 0x15
    22f0:	ae 89       	ldd	r26, Y+22	; 0x16
    22f2:	bf 89       	ldd	r27, Y+23	; 0x17
    22f4:	28 17       	cp	r18, r24
    22f6:	39 07       	cpc	r19, r25
    22f8:	4a 07       	cpc	r20, r26
    22fa:	5b 07       	cpc	r21, r27
    22fc:	01 f5       	brne	.+64     	; 0x233e <LCD_voidSendHex+0xa8>
		{
			Local_u8DigitsArr[Local_s8DigitIndex] = 0;
    22fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2300:	28 2f       	mov	r18, r24
    2302:	33 27       	eor	r19, r19
    2304:	27 fd       	sbrc	r18, 7
    2306:	30 95       	com	r19
    2308:	ce 01       	movw	r24, r28
    230a:	06 96       	adiw	r24, 0x06	; 6
    230c:	fc 01       	movw	r30, r24
    230e:	e2 0f       	add	r30, r18
    2310:	f3 1f       	adc	r31, r19
    2312:	10 82       	st	Z, r1
			Local_s8DigitIndex--;
    2314:	8d 81       	ldd	r24, Y+5	; 0x05
    2316:	81 50       	subi	r24, 0x01	; 1
    2318:	8d 83       	std	Y+5, r24	; 0x05
			Copy_s32DecimalNumber /= 16;
    231a:	8c 89       	ldd	r24, Y+20	; 0x14
    231c:	9d 89       	ldd	r25, Y+21	; 0x15
    231e:	ae 89       	ldd	r26, Y+22	; 0x16
    2320:	bf 89       	ldd	r27, Y+23	; 0x17
    2322:	20 e1       	ldi	r18, 0x10	; 16
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	40 e0       	ldi	r20, 0x00	; 0
    2328:	50 e0       	ldi	r21, 0x00	; 0
    232a:	bc 01       	movw	r22, r24
    232c:	cd 01       	movw	r24, r26
    232e:	0e 94 b4 18 	call	0x3168	; 0x3168 <__divmodsi4>
    2332:	da 01       	movw	r26, r20
    2334:	c9 01       	movw	r24, r18
    2336:	8c 8b       	std	Y+20, r24	; 0x14
    2338:	9d 8b       	std	Y+21, r25	; 0x15
    233a:	ae 8b       	std	Y+22, r26	; 0x16
    233c:	bf 8b       	std	Y+23, r27	; 0x17
		}

		if ((Copy_s32DecimalNumber / 16) < 16)
    233e:	8c 89       	ldd	r24, Y+20	; 0x14
    2340:	9d 89       	ldd	r25, Y+21	; 0x15
    2342:	ae 89       	ldd	r26, Y+22	; 0x16
    2344:	bf 89       	ldd	r27, Y+23	; 0x17
    2346:	8f 3f       	cpi	r24, 0xFF	; 255
    2348:	91 05       	cpc	r25, r1
    234a:	a1 05       	cpc	r26, r1
    234c:	b1 05       	cpc	r27, r1
    234e:	11 f0       	breq	.+4      	; 0x2354 <LCD_voidSendHex+0xbe>
    2350:	0c f0       	brlt	.+2      	; 0x2354 <LCD_voidSendHex+0xbe>
    2352:	4c c0       	rjmp	.+152    	; 0x23ec <LCD_voidSendHex+0x156>
		{
			Local_u8DigitsArr[Local_s8DigitIndex] = Copy_s32DecimalNumber % 16;
    2354:	8d 81       	ldd	r24, Y+5	; 0x05
    2356:	08 2f       	mov	r16, r24
    2358:	11 27       	eor	r17, r17
    235a:	07 fd       	sbrc	r16, 7
    235c:	10 95       	com	r17
    235e:	8c 89       	ldd	r24, Y+20	; 0x14
    2360:	9d 89       	ldd	r25, Y+21	; 0x15
    2362:	ae 89       	ldd	r26, Y+22	; 0x16
    2364:	bf 89       	ldd	r27, Y+23	; 0x17
    2366:	20 e1       	ldi	r18, 0x10	; 16
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	40 e0       	ldi	r20, 0x00	; 0
    236c:	50 e0       	ldi	r21, 0x00	; 0
    236e:	bc 01       	movw	r22, r24
    2370:	cd 01       	movw	r24, r26
    2372:	0e 94 b4 18 	call	0x3168	; 0x3168 <__divmodsi4>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	28 2f       	mov	r18, r24
    237c:	ce 01       	movw	r24, r28
    237e:	06 96       	adiw	r24, 0x06	; 6
    2380:	fc 01       	movw	r30, r24
    2382:	e0 0f       	add	r30, r16
    2384:	f1 1f       	adc	r31, r17
    2386:	20 83       	st	Z, r18
			Local_u8DigitsArr[Local_s8DigitIndex - 1] = Copy_s32DecimalNumber / 16;
    2388:	8d 81       	ldd	r24, Y+5	; 0x05
    238a:	99 27       	eor	r25, r25
    238c:	87 fd       	sbrc	r24, 7
    238e:	90 95       	com	r25
    2390:	8c 01       	movw	r16, r24
    2392:	01 50       	subi	r16, 0x01	; 1
    2394:	10 40       	sbci	r17, 0x00	; 0
    2396:	8c 89       	ldd	r24, Y+20	; 0x14
    2398:	9d 89       	ldd	r25, Y+21	; 0x15
    239a:	ae 89       	ldd	r26, Y+22	; 0x16
    239c:	bf 89       	ldd	r27, Y+23	; 0x17
    239e:	20 e1       	ldi	r18, 0x10	; 16
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	40 e0       	ldi	r20, 0x00	; 0
    23a4:	50 e0       	ldi	r21, 0x00	; 0
    23a6:	bc 01       	movw	r22, r24
    23a8:	cd 01       	movw	r24, r26
    23aa:	0e 94 b4 18 	call	0x3168	; 0x3168 <__divmodsi4>
    23ae:	da 01       	movw	r26, r20
    23b0:	c9 01       	movw	r24, r18
    23b2:	28 2f       	mov	r18, r24
    23b4:	ce 01       	movw	r24, r28
    23b6:	06 96       	adiw	r24, 0x06	; 6
    23b8:	fc 01       	movw	r30, r24
    23ba:	e0 0f       	add	r30, r16
    23bc:	f1 1f       	adc	r31, r17
    23be:	20 83       	st	Z, r18
			Local_s8DigitIndex-= 2;
    23c0:	8d 81       	ldd	r24, Y+5	; 0x05
    23c2:	82 50       	subi	r24, 0x02	; 2
    23c4:	8d 83       	std	Y+5, r24	; 0x05
			Copy_s32DecimalNumber /= 16;
    23c6:	8c 89       	ldd	r24, Y+20	; 0x14
    23c8:	9d 89       	ldd	r25, Y+21	; 0x15
    23ca:	ae 89       	ldd	r26, Y+22	; 0x16
    23cc:	bf 89       	ldd	r27, Y+23	; 0x17
    23ce:	20 e1       	ldi	r18, 0x10	; 16
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	40 e0       	ldi	r20, 0x00	; 0
    23d4:	50 e0       	ldi	r21, 0x00	; 0
    23d6:	bc 01       	movw	r22, r24
    23d8:	cd 01       	movw	r24, r26
    23da:	0e 94 b4 18 	call	0x3168	; 0x3168 <__divmodsi4>
    23de:	da 01       	movw	r26, r20
    23e0:	c9 01       	movw	r24, r18
    23e2:	8c 8b       	std	Y+20, r24	; 0x14
    23e4:	9d 8b       	std	Y+21, r25	; 0x15
    23e6:	ae 8b       	std	Y+22, r26	; 0x16
    23e8:	bf 8b       	std	Y+23, r27	; 0x17
    23ea:	3b c0       	rjmp	.+118    	; 0x2462 <LCD_voidSendHex+0x1cc>
		}

		else if ((Copy_s32DecimalNumber / 16) > 16)
    23ec:	8c 89       	ldd	r24, Y+20	; 0x14
    23ee:	9d 89       	ldd	r25, Y+21	; 0x15
    23f0:	ae 89       	ldd	r26, Y+22	; 0x16
    23f2:	bf 89       	ldd	r27, Y+23	; 0x17
    23f4:	80 31       	cpi	r24, 0x10	; 16
    23f6:	21 e0       	ldi	r18, 0x01	; 1
    23f8:	92 07       	cpc	r25, r18
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	a2 07       	cpc	r26, r18
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	b2 07       	cpc	r27, r18
    2402:	7c f1       	brlt	.+94     	; 0x2462 <LCD_voidSendHex+0x1cc>
		{
			Local_u8DigitsArr[Local_s8DigitIndex] = Copy_s32DecimalNumber % 16;
    2404:	8d 81       	ldd	r24, Y+5	; 0x05
    2406:	08 2f       	mov	r16, r24
    2408:	11 27       	eor	r17, r17
    240a:	07 fd       	sbrc	r16, 7
    240c:	10 95       	com	r17
    240e:	8c 89       	ldd	r24, Y+20	; 0x14
    2410:	9d 89       	ldd	r25, Y+21	; 0x15
    2412:	ae 89       	ldd	r26, Y+22	; 0x16
    2414:	bf 89       	ldd	r27, Y+23	; 0x17
    2416:	20 e1       	ldi	r18, 0x10	; 16
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	40 e0       	ldi	r20, 0x00	; 0
    241c:	50 e0       	ldi	r21, 0x00	; 0
    241e:	bc 01       	movw	r22, r24
    2420:	cd 01       	movw	r24, r26
    2422:	0e 94 b4 18 	call	0x3168	; 0x3168 <__divmodsi4>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	28 2f       	mov	r18, r24
    242c:	ce 01       	movw	r24, r28
    242e:	06 96       	adiw	r24, 0x06	; 6
    2430:	fc 01       	movw	r30, r24
    2432:	e0 0f       	add	r30, r16
    2434:	f1 1f       	adc	r31, r17
    2436:	20 83       	st	Z, r18
			Copy_s32DecimalNumber /= 16;
    2438:	8c 89       	ldd	r24, Y+20	; 0x14
    243a:	9d 89       	ldd	r25, Y+21	; 0x15
    243c:	ae 89       	ldd	r26, Y+22	; 0x16
    243e:	bf 89       	ldd	r27, Y+23	; 0x17
    2440:	20 e1       	ldi	r18, 0x10	; 16
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	40 e0       	ldi	r20, 0x00	; 0
    2446:	50 e0       	ldi	r21, 0x00	; 0
    2448:	bc 01       	movw	r22, r24
    244a:	cd 01       	movw	r24, r26
    244c:	0e 94 b4 18 	call	0x3168	; 0x3168 <__divmodsi4>
    2450:	da 01       	movw	r26, r20
    2452:	c9 01       	movw	r24, r18
    2454:	8c 8b       	std	Y+20, r24	; 0x14
    2456:	9d 8b       	std	Y+21, r25	; 0x15
    2458:	ae 8b       	std	Y+22, r26	; 0x16
    245a:	bf 8b       	std	Y+23, r27	; 0x17
			Local_s8DigitIndex--;
    245c:	8d 81       	ldd	r24, Y+5	; 0x05
    245e:	81 50       	subi	r24, 0x01	; 1
    2460:	8d 83       	std	Y+5, r24	; 0x05
void LCD_voidSendHex(s32 Copy_s32DecimalNumber){
	u8 Local_u8DigitsArr[14];
	s8 Local_s8DigitIndex;
	s32 Local_s8Holder = Copy_s32DecimalNumber;

	for (Local_s8DigitIndex = 13; Local_s8DigitIndex >= 0;)
    2462:	8d 81       	ldd	r24, Y+5	; 0x05
    2464:	88 23       	and	r24, r24
    2466:	0c f0       	brlt	.+2      	; 0x246a <LCD_voidSendHex+0x1d4>
    2468:	31 cf       	rjmp	.-414    	; 0x22cc <LCD_voidSendHex+0x36>
			Copy_s32DecimalNumber /= 16;
			Local_s8DigitIndex--;
		}
	}

	LCD_voidSendNumber(Local_s8Holder);
    246a:	89 81       	ldd	r24, Y+1	; 0x01
    246c:	9a 81       	ldd	r25, Y+2	; 0x02
    246e:	ab 81       	ldd	r26, Y+3	; 0x03
    2470:	bc 81       	ldd	r27, Y+4	; 0x04
    2472:	bc 01       	movw	r22, r24
    2474:	cd 01       	movw	r24, r26
    2476:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_voidSendNumber>
	LCD_SendString(" to Hex:");
    247a:	8f e6       	ldi	r24, 0x6F	; 111
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	0e 94 25 10 	call	0x204a	; 0x204a <LCD_SendString>
	LCD_voidGoToXY(0,1);
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	61 e0       	ldi	r22, 0x01	; 1
    2486:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidGoToXY>
	LCD_SendString("0x");
    248a:	88 e7       	ldi	r24, 0x78	; 120
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	0e 94 25 10 	call	0x204a	; 0x204a <LCD_SendString>

	for (Local_s8DigitIndex = 0; Local_s8DigitIndex < 14; Local_s8DigitIndex++)
    2492:	1d 82       	std	Y+5, r1	; 0x05
    2494:	6f c0       	rjmp	.+222    	; 0x2574 <LCD_voidSendHex+0x2de>
	{
		if (Local_u8DigitsArr[Local_s8DigitIndex] < 10)
    2496:	8d 81       	ldd	r24, Y+5	; 0x05
    2498:	28 2f       	mov	r18, r24
    249a:	33 27       	eor	r19, r19
    249c:	27 fd       	sbrc	r18, 7
    249e:	30 95       	com	r19
    24a0:	ce 01       	movw	r24, r28
    24a2:	06 96       	adiw	r24, 0x06	; 6
    24a4:	fc 01       	movw	r30, r24
    24a6:	e2 0f       	add	r30, r18
    24a8:	f3 1f       	adc	r31, r19
    24aa:	80 81       	ld	r24, Z
    24ac:	8a 30       	cpi	r24, 0x0A	; 10
    24ae:	a0 f4       	brcc	.+40     	; 0x24d8 <LCD_voidSendHex+0x242>
		{
			LCD_voidSendNumber(Local_u8DigitsArr[Local_s8DigitIndex]);
    24b0:	8d 81       	ldd	r24, Y+5	; 0x05
    24b2:	28 2f       	mov	r18, r24
    24b4:	33 27       	eor	r19, r19
    24b6:	27 fd       	sbrc	r18, 7
    24b8:	30 95       	com	r19
    24ba:	ce 01       	movw	r24, r28
    24bc:	06 96       	adiw	r24, 0x06	; 6
    24be:	fc 01       	movw	r30, r24
    24c0:	e2 0f       	add	r30, r18
    24c2:	f3 1f       	adc	r31, r19
    24c4:	80 81       	ld	r24, Z
    24c6:	88 2f       	mov	r24, r24
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	a0 e0       	ldi	r26, 0x00	; 0
    24cc:	b0 e0       	ldi	r27, 0x00	; 0
    24ce:	bc 01       	movw	r22, r24
    24d0:	cd 01       	movw	r24, r26
    24d2:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_voidSendNumber>
    24d6:	4b c0       	rjmp	.+150    	; 0x256e <LCD_voidSendHex+0x2d8>
		}

		else
		{
			switch (Local_u8DigitsArr[Local_s8DigitIndex])
    24d8:	8d 81       	ldd	r24, Y+5	; 0x05
    24da:	28 2f       	mov	r18, r24
    24dc:	33 27       	eor	r19, r19
    24de:	27 fd       	sbrc	r18, 7
    24e0:	30 95       	com	r19
    24e2:	ce 01       	movw	r24, r28
    24e4:	06 96       	adiw	r24, 0x06	; 6
    24e6:	fc 01       	movw	r30, r24
    24e8:	e2 0f       	add	r30, r18
    24ea:	f3 1f       	adc	r31, r19
    24ec:	80 81       	ld	r24, Z
    24ee:	28 2f       	mov	r18, r24
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	39 8f       	std	Y+25, r19	; 0x19
    24f4:	28 8f       	std	Y+24, r18	; 0x18
    24f6:	88 8d       	ldd	r24, Y+24	; 0x18
    24f8:	99 8d       	ldd	r25, Y+25	; 0x19
    24fa:	8c 30       	cpi	r24, 0x0C	; 12
    24fc:	91 05       	cpc	r25, r1
    24fe:	41 f1       	breq	.+80     	; 0x2550 <LCD_voidSendHex+0x2ba>
    2500:	28 8d       	ldd	r18, Y+24	; 0x18
    2502:	39 8d       	ldd	r19, Y+25	; 0x19
    2504:	2d 30       	cpi	r18, 0x0D	; 13
    2506:	31 05       	cpc	r19, r1
    2508:	5c f4       	brge	.+22     	; 0x2520 <LCD_voidSendHex+0x28a>
    250a:	88 8d       	ldd	r24, Y+24	; 0x18
    250c:	99 8d       	ldd	r25, Y+25	; 0x19
    250e:	8a 30       	cpi	r24, 0x0A	; 10
    2510:	91 05       	cpc	r25, r1
    2512:	b1 f0       	breq	.+44     	; 0x2540 <LCD_voidSendHex+0x2aa>
    2514:	28 8d       	ldd	r18, Y+24	; 0x18
    2516:	39 8d       	ldd	r19, Y+25	; 0x19
    2518:	2b 30       	cpi	r18, 0x0B	; 11
    251a:	31 05       	cpc	r19, r1
    251c:	a9 f0       	breq	.+42     	; 0x2548 <LCD_voidSendHex+0x2b2>
    251e:	27 c0       	rjmp	.+78     	; 0x256e <LCD_voidSendHex+0x2d8>
    2520:	88 8d       	ldd	r24, Y+24	; 0x18
    2522:	99 8d       	ldd	r25, Y+25	; 0x19
    2524:	8e 30       	cpi	r24, 0x0E	; 14
    2526:	91 05       	cpc	r25, r1
    2528:	d9 f0       	breq	.+54     	; 0x2560 <LCD_voidSendHex+0x2ca>
    252a:	28 8d       	ldd	r18, Y+24	; 0x18
    252c:	39 8d       	ldd	r19, Y+25	; 0x19
    252e:	2e 30       	cpi	r18, 0x0E	; 14
    2530:	31 05       	cpc	r19, r1
    2532:	94 f0       	brlt	.+36     	; 0x2558 <LCD_voidSendHex+0x2c2>
    2534:	88 8d       	ldd	r24, Y+24	; 0x18
    2536:	99 8d       	ldd	r25, Y+25	; 0x19
    2538:	8f 30       	cpi	r24, 0x0F	; 15
    253a:	91 05       	cpc	r25, r1
    253c:	a9 f0       	breq	.+42     	; 0x2568 <LCD_voidSendHex+0x2d2>
    253e:	17 c0       	rjmp	.+46     	; 0x256e <LCD_voidSendHex+0x2d8>
			{
				case 10: LCD_voidSendData('A');	break;
    2540:	81 e4       	ldi	r24, 0x41	; 65
    2542:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_voidSendData>
    2546:	13 c0       	rjmp	.+38     	; 0x256e <LCD_voidSendHex+0x2d8>
				case 11: LCD_voidSendData('B');	break;
    2548:	82 e4       	ldi	r24, 0x42	; 66
    254a:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_voidSendData>
    254e:	0f c0       	rjmp	.+30     	; 0x256e <LCD_voidSendHex+0x2d8>
				case 12: LCD_voidSendData('C');	break;
    2550:	83 e4       	ldi	r24, 0x43	; 67
    2552:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_voidSendData>
    2556:	0b c0       	rjmp	.+22     	; 0x256e <LCD_voidSendHex+0x2d8>
				case 13: LCD_voidSendData('D');	break;
    2558:	84 e4       	ldi	r24, 0x44	; 68
    255a:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_voidSendData>
    255e:	07 c0       	rjmp	.+14     	; 0x256e <LCD_voidSendHex+0x2d8>
				case 14: LCD_voidSendData('E');	break;
    2560:	85 e4       	ldi	r24, 0x45	; 69
    2562:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_voidSendData>
    2566:	03 c0       	rjmp	.+6      	; 0x256e <LCD_voidSendHex+0x2d8>
				case 15: LCD_voidSendData('F');	break;
    2568:	86 e4       	ldi	r24, 0x46	; 70
    256a:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_voidSendData>
	LCD_voidSendNumber(Local_s8Holder);
	LCD_SendString(" to Hex:");
	LCD_voidGoToXY(0,1);
	LCD_SendString("0x");

	for (Local_s8DigitIndex = 0; Local_s8DigitIndex < 14; Local_s8DigitIndex++)
    256e:	8d 81       	ldd	r24, Y+5	; 0x05
    2570:	8f 5f       	subi	r24, 0xFF	; 255
    2572:	8d 83       	std	Y+5, r24	; 0x05
    2574:	8d 81       	ldd	r24, Y+5	; 0x05
    2576:	8e 30       	cpi	r24, 0x0E	; 14
    2578:	0c f4       	brge	.+2      	; 0x257c <LCD_voidSendHex+0x2e6>
    257a:	8d cf       	rjmp	.-230    	; 0x2496 <LCD_voidSendHex+0x200>
			}
		}
	}


}
    257c:	69 96       	adiw	r28, 0x19	; 25
    257e:	0f b6       	in	r0, 0x3f	; 63
    2580:	f8 94       	cli
    2582:	de bf       	out	0x3e, r29	; 62
    2584:	0f be       	out	0x3f, r0	; 63
    2586:	cd bf       	out	0x3d, r28	; 61
    2588:	cf 91       	pop	r28
    258a:	df 91       	pop	r29
    258c:	1f 91       	pop	r17
    258e:	0f 91       	pop	r16
    2590:	08 95       	ret

00002592 <LCD_voidGoToXY>:

void LCD_voidGoToXY(u8 Copy_u8XPos, u8 Copy_u8yPos){
    2592:	df 93       	push	r29
    2594:	cf 93       	push	r28
    2596:	00 d0       	rcall	.+0      	; 0x2598 <LCD_voidGoToXY+0x6>
    2598:	0f 92       	push	r0
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
    259e:	8a 83       	std	Y+2, r24	; 0x02
    25a0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8DDRamAdd;

		if (Copy_u8yPos == 0)
    25a2:	8b 81       	ldd	r24, Y+3	; 0x03
    25a4:	88 23       	and	r24, r24
    25a6:	19 f4       	brne	.+6      	; 0x25ae <LCD_voidGoToXY+0x1c>
		{
			Local_u8DDRamAdd = Copy_u8XPos;
    25a8:	8a 81       	ldd	r24, Y+2	; 0x02
    25aa:	89 83       	std	Y+1, r24	; 0x01
    25ac:	06 c0       	rjmp	.+12     	; 0x25ba <LCD_voidGoToXY+0x28>
		}

		else if (Copy_u8yPos == 1)
    25ae:	8b 81       	ldd	r24, Y+3	; 0x03
    25b0:	81 30       	cpi	r24, 0x01	; 1
    25b2:	19 f4       	brne	.+6      	; 0x25ba <LCD_voidGoToXY+0x28>
		{
			Local_u8DDRamAdd = 0x40 + Copy_u8XPos;
    25b4:	8a 81       	ldd	r24, Y+2	; 0x02
    25b6:	80 5c       	subi	r24, 0xC0	; 192
    25b8:	89 83       	std	Y+1, r24	; 0x01
		}

		/*Set bit 7, for setting DDRAM address command*/
		SET_BIT(Local_u8DDRamAdd, 7);
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
    25bc:	80 68       	ori	r24, 0x80	; 128
    25be:	89 83       	std	Y+1, r24	; 0x01

		LCD_voidSendCmd(Local_u8DDRamAdd);
    25c0:	89 81       	ldd	r24, Y+1	; 0x01
    25c2:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <LCD_voidSendCmd>
}
    25c6:	0f 90       	pop	r0
    25c8:	0f 90       	pop	r0
    25ca:	0f 90       	pop	r0
    25cc:	cf 91       	pop	r28
    25ce:	df 91       	pop	r29
    25d0:	08 95       	ret

000025d2 <LCD_voidSendSpecialChar>:

void LCD_voidSendSpecialChar(u8 *Copy_u8Pattern, u8 Copy_u8PatternNumber, u8 Copy_u8XPos, u8 Copy_u8YPos){
    25d2:	df 93       	push	r29
    25d4:	cf 93       	push	r28
    25d6:	cd b7       	in	r28, 0x3d	; 61
    25d8:	de b7       	in	r29, 0x3e	; 62
    25da:	27 97       	sbiw	r28, 0x07	; 7
    25dc:	0f b6       	in	r0, 0x3f	; 63
    25de:	f8 94       	cli
    25e0:	de bf       	out	0x3e, r29	; 62
    25e2:	0f be       	out	0x3f, r0	; 63
    25e4:	cd bf       	out	0x3d, r28	; 61
    25e6:	9c 83       	std	Y+4, r25	; 0x04
    25e8:	8b 83       	std	Y+3, r24	; 0x03
    25ea:	6d 83       	std	Y+5, r22	; 0x05
    25ec:	4e 83       	std	Y+6, r20	; 0x06
    25ee:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAdrs = Copy_u8PatternNumber * 8u;
    25f0:	8d 81       	ldd	r24, Y+5	; 0x05
    25f2:	88 2f       	mov	r24, r24
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	88 0f       	add	r24, r24
    25f8:	99 1f       	adc	r25, r25
    25fa:	88 0f       	add	r24, r24
    25fc:	99 1f       	adc	r25, r25
    25fe:	88 0f       	add	r24, r24
    2600:	99 1f       	adc	r25, r25
    2602:	8a 83       	std	Y+2, r24	; 0x02
		u8 Local_u8LoopCounter;

		/*Set bit number6, for Set_Address of CG command from datasheet*/
		SET_BIT(Local_u8CGRAMAdrs, 6);
    2604:	8a 81       	ldd	r24, Y+2	; 0x02
    2606:	80 64       	ori	r24, 0x40	; 64
    2608:	8a 83       	std	Y+2, r24	; 0x02

		/*select the address in CGRAM*/
		LCD_voidSendCmd(Local_u8CGRAMAdrs);
    260a:	8a 81       	ldd	r24, Y+2	; 0x02
    260c:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <LCD_voidSendCmd>

		/*Write the patter into CGRAM*/
		for (Local_u8LoopCounter = 0; Local_u8LoopCounter < 8u; Local_u8LoopCounter++)
    2610:	19 82       	std	Y+1, r1	; 0x01
    2612:	0e c0       	rjmp	.+28     	; 0x2630 <LCD_voidSendSpecialChar+0x5e>
		{
			LCD_voidSendData(Copy_u8Pattern[Local_u8LoopCounter]);
    2614:	89 81       	ldd	r24, Y+1	; 0x01
    2616:	28 2f       	mov	r18, r24
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	8b 81       	ldd	r24, Y+3	; 0x03
    261c:	9c 81       	ldd	r25, Y+4	; 0x04
    261e:	fc 01       	movw	r30, r24
    2620:	e2 0f       	add	r30, r18
    2622:	f3 1f       	adc	r31, r19
    2624:	80 81       	ld	r24, Z
    2626:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_voidSendData>

		/*select the address in CGRAM*/
		LCD_voidSendCmd(Local_u8CGRAMAdrs);

		/*Write the patter into CGRAM*/
		for (Local_u8LoopCounter = 0; Local_u8LoopCounter < 8u; Local_u8LoopCounter++)
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	8f 5f       	subi	r24, 0xFF	; 255
    262e:	89 83       	std	Y+1, r24	; 0x01
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	88 30       	cpi	r24, 0x08	; 8
    2634:	78 f3       	brcs	.-34     	; 0x2614 <LCD_voidSendSpecialChar+0x42>
		{
			LCD_voidSendData(Copy_u8Pattern[Local_u8LoopCounter]);
		}

		/*back to DDRAM, to display the patterns*/
		LCD_voidGoToXY(Copy_u8XPos, Copy_u8YPos);
    2636:	8e 81       	ldd	r24, Y+6	; 0x06
    2638:	6f 81       	ldd	r22, Y+7	; 0x07
    263a:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidGoToXY>

		/*Display the pattern written inside the CGRAM*/
		LCD_voidSendData(Copy_u8PatternNumber);
    263e:	8d 81       	ldd	r24, Y+5	; 0x05
    2640:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_voidSendData>
}
    2644:	27 96       	adiw	r28, 0x07	; 7
    2646:	0f b6       	in	r0, 0x3f	; 63
    2648:	f8 94       	cli
    264a:	de bf       	out	0x3e, r29	; 62
    264c:	0f be       	out	0x3f, r0	; 63
    264e:	cd bf       	out	0x3d, r28	; 61
    2650:	cf 91       	pop	r28
    2652:	df 91       	pop	r29
    2654:	08 95       	ret

00002656 <LED_Init>:
#include "defines.h"

#include "LED.h"

/* leds from A2 to A7 and PB4 PB0 */
void LED_Init(void){
    2656:	df 93       	push	r29
    2658:	cf 93       	push	r28
    265a:	cd b7       	in	r28, 0x3d	; 61
    265c:	de b7       	in	r29, 0x3e	; 62
	// 0xFC = 0b11111100
	DioSetPortDirection(portA,0xFC);
    265e:	80 e0       	ldi	r24, 0x00	; 0
    2660:	6c ef       	ldi	r22, 0xFC	; 252
    2662:	0e 94 cd 0c 	call	0x199a	; 0x199a <DioSetPortDirection>
	DioSetPinDirection(portB,pin0,OUTPUT);
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	60 e0       	ldi	r22, 0x00	; 0
    266a:	41 e0       	ldi	r20, 0x01	; 1
    266c:	0e 94 38 0a 	call	0x1470	; 0x1470 <DioSetPinDirection>
	DioSetPinDirection(portB,pin4,OUTPUT);
    2670:	81 e0       	ldi	r24, 0x01	; 1
    2672:	64 e0       	ldi	r22, 0x04	; 4
    2674:	41 e0       	ldi	r20, 0x01	; 1
    2676:	0e 94 38 0a 	call	0x1470	; 0x1470 <DioSetPinDirection>
}
    267a:	cf 91       	pop	r28
    267c:	df 91       	pop	r29
    267e:	08 95       	ret

00002680 <LED_ON>:
void LED_ON(u8 n_LEDs){
    2680:	df 93       	push	r29
    2682:	cf 93       	push	r28
    2684:	00 d0       	rcall	.+0      	; 0x2686 <LED_ON+0x6>
    2686:	0f 92       	push	r0
    2688:	cd b7       	in	r28, 0x3d	; 61
    268a:	de b7       	in	r29, 0x3e	; 62
    268c:	89 83       	std	Y+1, r24	; 0x01
	switch(n_LEDs)
    268e:	89 81       	ldd	r24, Y+1	; 0x01
    2690:	28 2f       	mov	r18, r24
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	3b 83       	std	Y+3, r19	; 0x03
    2696:	2a 83       	std	Y+2, r18	; 0x02
    2698:	8a 81       	ldd	r24, Y+2	; 0x02
    269a:	9b 81       	ldd	r25, Y+3	; 0x03
    269c:	84 30       	cpi	r24, 0x04	; 4
    269e:	91 05       	cpc	r25, r1
    26a0:	c9 f1       	breq	.+114    	; 0x2714 <LED_ON+0x94>
    26a2:	2a 81       	ldd	r18, Y+2	; 0x02
    26a4:	3b 81       	ldd	r19, Y+3	; 0x03
    26a6:	25 30       	cpi	r18, 0x05	; 5
    26a8:	31 05       	cpc	r19, r1
    26aa:	84 f4       	brge	.+32     	; 0x26cc <LED_ON+0x4c>
    26ac:	8a 81       	ldd	r24, Y+2	; 0x02
    26ae:	9b 81       	ldd	r25, Y+3	; 0x03
    26b0:	82 30       	cpi	r24, 0x02	; 2
    26b2:	91 05       	cpc	r25, r1
    26b4:	29 f1       	breq	.+74     	; 0x2700 <LED_ON+0x80>
    26b6:	2a 81       	ldd	r18, Y+2	; 0x02
    26b8:	3b 81       	ldd	r19, Y+3	; 0x03
    26ba:	23 30       	cpi	r18, 0x03	; 3
    26bc:	31 05       	cpc	r19, r1
    26be:	2c f5       	brge	.+74     	; 0x270a <LED_ON+0x8a>
    26c0:	8a 81       	ldd	r24, Y+2	; 0x02
    26c2:	9b 81       	ldd	r25, Y+3	; 0x03
    26c4:	81 30       	cpi	r24, 0x01	; 1
    26c6:	91 05       	cpc	r25, r1
    26c8:	b1 f0       	breq	.+44     	; 0x26f6 <LED_ON+0x76>
    26ca:	4c c0       	rjmp	.+152    	; 0x2764 <LED_ON+0xe4>
    26cc:	2a 81       	ldd	r18, Y+2	; 0x02
    26ce:	3b 81       	ldd	r19, Y+3	; 0x03
    26d0:	26 30       	cpi	r18, 0x06	; 6
    26d2:	31 05       	cpc	r19, r1
    26d4:	49 f1       	breq	.+82     	; 0x2728 <LED_ON+0xa8>
    26d6:	8a 81       	ldd	r24, Y+2	; 0x02
    26d8:	9b 81       	ldd	r25, Y+3	; 0x03
    26da:	86 30       	cpi	r24, 0x06	; 6
    26dc:	91 05       	cpc	r25, r1
    26de:	fc f0       	brlt	.+62     	; 0x271e <LED_ON+0x9e>
    26e0:	2a 81       	ldd	r18, Y+2	; 0x02
    26e2:	3b 81       	ldd	r19, Y+3	; 0x03
    26e4:	27 30       	cpi	r18, 0x07	; 7
    26e6:	31 05       	cpc	r19, r1
    26e8:	21 f1       	breq	.+72     	; 0x2732 <LED_ON+0xb2>
    26ea:	8a 81       	ldd	r24, Y+2	; 0x02
    26ec:	9b 81       	ldd	r25, Y+3	; 0x03
    26ee:	88 30       	cpi	r24, 0x08	; 8
    26f0:	91 05       	cpc	r25, r1
    26f2:	49 f1       	breq	.+82     	; 0x2746 <LED_ON+0xc6>
    26f4:	37 c0       	rjmp	.+110    	; 0x2764 <LED_ON+0xe4>
	{
	case 1: DioSetPortValue(portA,0x4); break;
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	64 e0       	ldi	r22, 0x04	; 4
    26fa:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <DioSetPortValue>
    26fe:	40 c0       	rjmp	.+128    	; 0x2780 <LED_ON+0x100>
	case 2: DioSetPortValue(portA,0x0C); break;
    2700:	80 e0       	ldi	r24, 0x00	; 0
    2702:	6c e0       	ldi	r22, 0x0C	; 12
    2704:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <DioSetPortValue>
    2708:	3b c0       	rjmp	.+118    	; 0x2780 <LED_ON+0x100>
	case 3: DioSetPortValue(portA,0x1C); break;
    270a:	80 e0       	ldi	r24, 0x00	; 0
    270c:	6c e1       	ldi	r22, 0x1C	; 28
    270e:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <DioSetPortValue>
    2712:	36 c0       	rjmp	.+108    	; 0x2780 <LED_ON+0x100>
	case 4: DioSetPortValue(portA,0x3C); break;
    2714:	80 e0       	ldi	r24, 0x00	; 0
    2716:	6c e3       	ldi	r22, 0x3C	; 60
    2718:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <DioSetPortValue>
    271c:	31 c0       	rjmp	.+98     	; 0x2780 <LED_ON+0x100>
	case 5: DioSetPortValue(portA,0x7C); break;
    271e:	80 e0       	ldi	r24, 0x00	; 0
    2720:	6c e7       	ldi	r22, 0x7C	; 124
    2722:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <DioSetPortValue>
    2726:	2c c0       	rjmp	.+88     	; 0x2780 <LED_ON+0x100>
	case 6:  DioSetPortValue(portA,0xFC); break;
    2728:	80 e0       	ldi	r24, 0x00	; 0
    272a:	6c ef       	ldi	r22, 0xFC	; 252
    272c:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <DioSetPortValue>
    2730:	27 c0       	rjmp	.+78     	; 0x2780 <LED_ON+0x100>
	case 7: DioSetPortValue(portA,0xFC);
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	6c ef       	ldi	r22, 0xFC	; 252
    2736:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <DioSetPortValue>
	DioSetPinValue(portB,pin0,HIGH);
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	60 e0       	ldi	r22, 0x00	; 0
    273e:	41 e0       	ldi	r20, 0x01	; 1
    2740:	0e 94 3c 0b 	call	0x1678	; 0x1678 <DioSetPinValue>
    2744:	1d c0       	rjmp	.+58     	; 0x2780 <LED_ON+0x100>
	break;
	case 8: DioSetPortValue(portA,0xFC);
    2746:	80 e0       	ldi	r24, 0x00	; 0
    2748:	6c ef       	ldi	r22, 0xFC	; 252
    274a:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <DioSetPortValue>
	DioSetPinValue(portB,pin0,HIGH);
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	60 e0       	ldi	r22, 0x00	; 0
    2752:	41 e0       	ldi	r20, 0x01	; 1
    2754:	0e 94 3c 0b 	call	0x1678	; 0x1678 <DioSetPinValue>
	DioSetPinValue(portB,pin4,HIGH);
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	64 e0       	ldi	r22, 0x04	; 4
    275c:	41 e0       	ldi	r20, 0x01	; 1
    275e:	0e 94 3c 0b 	call	0x1678	; 0x1678 <DioSetPinValue>
    2762:	0e c0       	rjmp	.+28     	; 0x2780 <LED_ON+0x100>
	break;
	default :  DioSetPortValue(portA,0);
    2764:	80 e0       	ldi	r24, 0x00	; 0
    2766:	60 e0       	ldi	r22, 0x00	; 0
    2768:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <DioSetPortValue>
	DioSetPinValue(portB,pin0,LOW);
    276c:	81 e0       	ldi	r24, 0x01	; 1
    276e:	60 e0       	ldi	r22, 0x00	; 0
    2770:	40 e0       	ldi	r20, 0x00	; 0
    2772:	0e 94 3c 0b 	call	0x1678	; 0x1678 <DioSetPinValue>
	DioSetPinValue(portB,pin4,LOW);
    2776:	81 e0       	ldi	r24, 0x01	; 1
    2778:	64 e0       	ldi	r22, 0x04	; 4
    277a:	40 e0       	ldi	r20, 0x00	; 0
    277c:	0e 94 3c 0b 	call	0x1678	; 0x1678 <DioSetPinValue>
	break;
	}
}
    2780:	0f 90       	pop	r0
    2782:	0f 90       	pop	r0
    2784:	0f 90       	pop	r0
    2786:	cf 91       	pop	r28
    2788:	df 91       	pop	r29
    278a:	08 95       	ret

0000278c <LED_OFF>:
void LED_OFF(){
    278c:	df 93       	push	r29
    278e:	cf 93       	push	r28
    2790:	cd b7       	in	r28, 0x3d	; 61
    2792:	de b7       	in	r29, 0x3e	; 62
	DioSetPortValue(portA,0);
    2794:	80 e0       	ldi	r24, 0x00	; 0
    2796:	60 e0       	ldi	r22, 0x00	; 0
    2798:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <DioSetPortValue>
	DioSetPinValue(portB,pin0,LOW);
    279c:	81 e0       	ldi	r24, 0x01	; 1
    279e:	60 e0       	ldi	r22, 0x00	; 0
    27a0:	40 e0       	ldi	r20, 0x00	; 0
    27a2:	0e 94 3c 0b 	call	0x1678	; 0x1678 <DioSetPinValue>
	DioSetPinValue(portB,pin4,LOW);
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	64 e0       	ldi	r22, 0x04	; 4
    27aa:	40 e0       	ldi	r20, 0x00	; 0
    27ac:	0e 94 3c 0b 	call	0x1678	; 0x1678 <DioSetPinValue>
}
    27b0:	cf 91       	pop	r28
    27b2:	df 91       	pop	r29
    27b4:	08 95       	ret

000027b6 <main>:
void Fan(void);
void home_login(void);
void home_screen(void);
void LED(void);
int main()
{
    27b6:	df 93       	push	r29
    27b8:	cf 93       	push	r28
    27ba:	cd b7       	in	r28, 0x3d	; 61
    27bc:	de b7       	in	r29, 0x3e	; 62
	LCD_voidInit();
    27be:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <LCD_voidInit>
	keyPad_Init();
    27c2:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <keyPad_Init>
	ADC_voidInit();
    27c6:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>
	DC_MotorInit();
    27ca:	0e 94 45 07 	call	0xe8a	; 0xe8a <DC_MotorInit>
	Buzzer_Init();
    27ce:	0e 94 0f 07 	call	0xe1e	; 0xe1e <Buzzer_Init>
	LED_Init();
    27d2:	0e 94 2b 13 	call	0x2656	; 0x2656 <LED_Init>
	//EXTI_voidInitInt0();
	//EXTI_voidInitInt1();
	welcome_ms();
    27d6:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <welcome_ms>

	home_login();
    27da:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <home_login>
	while(1)
	{
		LED();
    27de:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <LED>
		Fan();
    27e2:	0e 94 84 14 	call	0x2908	; 0x2908 <Fan>
    27e6:	fb cf       	rjmp	.-10     	; 0x27de <main+0x28>

000027e8 <welcome_ms>:
	}
	return 0;
}
void welcome_ms(void){
    27e8:	df 93       	push	r29
    27ea:	cf 93       	push	r28
    27ec:	cd b7       	in	r28, 0x3d	; 61
    27ee:	de b7       	in	r29, 0x3e	; 62
    27f0:	2e 97       	sbiw	r28, 0x0e	; 14
    27f2:	0f b6       	in	r0, 0x3f	; 63
    27f4:	f8 94       	cli
    27f6:	de bf       	out	0x3e, r29	; 62
    27f8:	0f be       	out	0x3f, r0	; 63
    27fa:	cd bf       	out	0x3d, r28	; 61
	LCD_voidGoToXY(0,2);
    27fc:	80 e0       	ldi	r24, 0x00	; 0
    27fe:	62 e0       	ldi	r22, 0x02	; 2
    2800:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidGoToXY>
	LCD_SendString("Welcome Home");
    2804:	8b e7       	ldi	r24, 0x7B	; 123
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	0e 94 25 10 	call	0x204a	; 0x204a <LCD_SendString>
    280c:	80 e0       	ldi	r24, 0x00	; 0
    280e:	90 e8       	ldi	r25, 0x80	; 128
    2810:	ab eb       	ldi	r26, 0xBB	; 187
    2812:	b4 e4       	ldi	r27, 0x44	; 68
    2814:	8b 87       	std	Y+11, r24	; 0x0b
    2816:	9c 87       	std	Y+12, r25	; 0x0c
    2818:	ad 87       	std	Y+13, r26	; 0x0d
    281a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    281c:	6b 85       	ldd	r22, Y+11	; 0x0b
    281e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2820:	8d 85       	ldd	r24, Y+13	; 0x0d
    2822:	9e 85       	ldd	r25, Y+14	; 0x0e
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	4a ef       	ldi	r20, 0xFA	; 250
    282a:	54 e4       	ldi	r21, 0x44	; 68
    282c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	8f 83       	std	Y+7, r24	; 0x07
    2836:	98 87       	std	Y+8, r25	; 0x08
    2838:	a9 87       	std	Y+9, r26	; 0x09
    283a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    283c:	6f 81       	ldd	r22, Y+7	; 0x07
    283e:	78 85       	ldd	r23, Y+8	; 0x08
    2840:	89 85       	ldd	r24, Y+9	; 0x09
    2842:	9a 85       	ldd	r25, Y+10	; 0x0a
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	40 e8       	ldi	r20, 0x80	; 128
    284a:	5f e3       	ldi	r21, 0x3F	; 63
    284c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2850:	88 23       	and	r24, r24
    2852:	2c f4       	brge	.+10     	; 0x285e <welcome_ms+0x76>
		__ticks = 1;
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	9e 83       	std	Y+6, r25	; 0x06
    285a:	8d 83       	std	Y+5, r24	; 0x05
    285c:	3f c0       	rjmp	.+126    	; 0x28dc <welcome_ms+0xf4>
	else if (__tmp > 65535)
    285e:	6f 81       	ldd	r22, Y+7	; 0x07
    2860:	78 85       	ldd	r23, Y+8	; 0x08
    2862:	89 85       	ldd	r24, Y+9	; 0x09
    2864:	9a 85       	ldd	r25, Y+10	; 0x0a
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	3f ef       	ldi	r19, 0xFF	; 255
    286a:	4f e7       	ldi	r20, 0x7F	; 127
    286c:	57 e4       	ldi	r21, 0x47	; 71
    286e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2872:	18 16       	cp	r1, r24
    2874:	4c f5       	brge	.+82     	; 0x28c8 <welcome_ms+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2876:	6b 85       	ldd	r22, Y+11	; 0x0b
    2878:	7c 85       	ldd	r23, Y+12	; 0x0c
    287a:	8d 85       	ldd	r24, Y+13	; 0x0d
    287c:	9e 85       	ldd	r25, Y+14	; 0x0e
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	40 e2       	ldi	r20, 0x20	; 32
    2884:	51 e4       	ldi	r21, 0x41	; 65
    2886:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	bc 01       	movw	r22, r24
    2890:	cd 01       	movw	r24, r26
    2892:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2896:	dc 01       	movw	r26, r24
    2898:	cb 01       	movw	r24, r22
    289a:	9e 83       	std	Y+6, r25	; 0x06
    289c:	8d 83       	std	Y+5, r24	; 0x05
    289e:	0f c0       	rjmp	.+30     	; 0x28be <welcome_ms+0xd6>
    28a0:	88 ec       	ldi	r24, 0xC8	; 200
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	9c 83       	std	Y+4, r25	; 0x04
    28a6:	8b 83       	std	Y+3, r24	; 0x03
    28a8:	8b 81       	ldd	r24, Y+3	; 0x03
    28aa:	9c 81       	ldd	r25, Y+4	; 0x04
    28ac:	01 97       	sbiw	r24, 0x01	; 1
    28ae:	f1 f7       	brne	.-4      	; 0x28ac <welcome_ms+0xc4>
    28b0:	9c 83       	std	Y+4, r25	; 0x04
    28b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b4:	8d 81       	ldd	r24, Y+5	; 0x05
    28b6:	9e 81       	ldd	r25, Y+6	; 0x06
    28b8:	01 97       	sbiw	r24, 0x01	; 1
    28ba:	9e 83       	std	Y+6, r25	; 0x06
    28bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28be:	8d 81       	ldd	r24, Y+5	; 0x05
    28c0:	9e 81       	ldd	r25, Y+6	; 0x06
    28c2:	00 97       	sbiw	r24, 0x00	; 0
    28c4:	69 f7       	brne	.-38     	; 0x28a0 <welcome_ms+0xb8>
    28c6:	14 c0       	rjmp	.+40     	; 0x28f0 <welcome_ms+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c8:	6f 81       	ldd	r22, Y+7	; 0x07
    28ca:	78 85       	ldd	r23, Y+8	; 0x08
    28cc:	89 85       	ldd	r24, Y+9	; 0x09
    28ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	9e 83       	std	Y+6, r25	; 0x06
    28da:	8d 83       	std	Y+5, r24	; 0x05
    28dc:	8d 81       	ldd	r24, Y+5	; 0x05
    28de:	9e 81       	ldd	r25, Y+6	; 0x06
    28e0:	9a 83       	std	Y+2, r25	; 0x02
    28e2:	89 83       	std	Y+1, r24	; 0x01
    28e4:	89 81       	ldd	r24, Y+1	; 0x01
    28e6:	9a 81       	ldd	r25, Y+2	; 0x02
    28e8:	01 97       	sbiw	r24, 0x01	; 1
    28ea:	f1 f7       	brne	.-4      	; 0x28e8 <welcome_ms+0x100>
    28ec:	9a 83       	std	Y+2, r25	; 0x02
    28ee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1500);
	LCD_voidSendCmd(CLR_SCREEN);
    28f0:	81 e0       	ldi	r24, 0x01	; 1
    28f2:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <LCD_voidSendCmd>

}
    28f6:	2e 96       	adiw	r28, 0x0e	; 14
    28f8:	0f b6       	in	r0, 0x3f	; 63
    28fa:	f8 94       	cli
    28fc:	de bf       	out	0x3e, r29	; 62
    28fe:	0f be       	out	0x3f, r0	; 63
    2900:	cd bf       	out	0x3d, r28	; 61
    2902:	cf 91       	pop	r28
    2904:	df 91       	pop	r29
    2906:	08 95       	ret

00002908 <Fan>:
void Fan(void){
    2908:	df 93       	push	r29
    290a:	cf 93       	push	r28
    290c:	cd b7       	in	r28, 0x3d	; 61
    290e:	de b7       	in	r29, 0x3e	; 62
    2910:	6c 97       	sbiw	r28, 0x1c	; 28
    2912:	0f b6       	in	r0, 0x3f	; 63
    2914:	f8 94       	cli
    2916:	de bf       	out	0x3e, r29	; 62
    2918:	0f be       	out	0x3f, r0	; 63
    291a:	cd bf       	out	0x3d, r28	; 61
	g_temperature = Get_temperature();
    291c:	0e 94 59 18 	call	0x30b2	; 0x30b2 <Get_temperature>
    2920:	80 93 11 01 	sts	0x0111, r24
	LCD_voidGoToXY(6,0);
    2924:	86 e0       	ldi	r24, 0x06	; 6
    2926:	60 e0       	ldi	r22, 0x00	; 0
    2928:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidGoToXY>
	LCD_voidSendNumber(g_temperature);
    292c:	80 91 11 01 	lds	r24, 0x0111
    2930:	88 2f       	mov	r24, r24
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	a0 e0       	ldi	r26, 0x00	; 0
    2936:	b0 e0       	ldi	r27, 0x00	; 0
    2938:	bc 01       	movw	r22, r24
    293a:	cd 01       	movw	r24, r26
    293c:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_voidSendNumber>
	if(g_temperature >= 45)
    2940:	80 91 11 01 	lds	r24, 0x0111
    2944:	8d 32       	cpi	r24, 0x2D	; 45
    2946:	08 f4       	brcc	.+2      	; 0x294a <Fan+0x42>
    2948:	f3 c0       	rjmp	.+486    	; 0x2b30 <Fan+0x228>
	{
		DC_MotorRotate(95);
    294a:	8f e5       	ldi	r24, 0x5F	; 95
    294c:	0e 94 67 07 	call	0xece	; 0xece <DC_MotorRotate>
		LCD_voidSendCmd(CLR_SCREEN);
    2950:	81 e0       	ldi	r24, 0x01	; 1
    2952:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <LCD_voidSendCmd>
		LCD_SendString("ALarm Fire");
    2956:	88 e8       	ldi	r24, 0x88	; 136
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	0e 94 25 10 	call	0x204a	; 0x204a <LCD_SendString>
		Buzzer_ON();
    295e:	0e 94 1b 07 	call	0xe36	; 0xe36 <Buzzer_ON>
    2962:	80 e0       	ldi	r24, 0x00	; 0
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	a8 ec       	ldi	r26, 0xC8	; 200
    2968:	b2 e4       	ldi	r27, 0x42	; 66
    296a:	89 8f       	std	Y+25, r24	; 0x19
    296c:	9a 8f       	std	Y+26, r25	; 0x1a
    296e:	ab 8f       	std	Y+27, r26	; 0x1b
    2970:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2972:	69 8d       	ldd	r22, Y+25	; 0x19
    2974:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2976:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2978:	9c 8d       	ldd	r25, Y+28	; 0x1c
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	4a ef       	ldi	r20, 0xFA	; 250
    2980:	54 e4       	ldi	r21, 0x44	; 68
    2982:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	8d 8b       	std	Y+21, r24	; 0x15
    298c:	9e 8b       	std	Y+22, r25	; 0x16
    298e:	af 8b       	std	Y+23, r26	; 0x17
    2990:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2992:	6d 89       	ldd	r22, Y+21	; 0x15
    2994:	7e 89       	ldd	r23, Y+22	; 0x16
    2996:	8f 89       	ldd	r24, Y+23	; 0x17
    2998:	98 8d       	ldd	r25, Y+24	; 0x18
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	40 e8       	ldi	r20, 0x80	; 128
    29a0:	5f e3       	ldi	r21, 0x3F	; 63
    29a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29a6:	88 23       	and	r24, r24
    29a8:	2c f4       	brge	.+10     	; 0x29b4 <Fan+0xac>
		__ticks = 1;
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	9c 8b       	std	Y+20, r25	; 0x14
    29b0:	8b 8b       	std	Y+19, r24	; 0x13
    29b2:	3f c0       	rjmp	.+126    	; 0x2a32 <Fan+0x12a>
	else if (__tmp > 65535)
    29b4:	6d 89       	ldd	r22, Y+21	; 0x15
    29b6:	7e 89       	ldd	r23, Y+22	; 0x16
    29b8:	8f 89       	ldd	r24, Y+23	; 0x17
    29ba:	98 8d       	ldd	r25, Y+24	; 0x18
    29bc:	20 e0       	ldi	r18, 0x00	; 0
    29be:	3f ef       	ldi	r19, 0xFF	; 255
    29c0:	4f e7       	ldi	r20, 0x7F	; 127
    29c2:	57 e4       	ldi	r21, 0x47	; 71
    29c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29c8:	18 16       	cp	r1, r24
    29ca:	4c f5       	brge	.+82     	; 0x2a1e <Fan+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29cc:	69 8d       	ldd	r22, Y+25	; 0x19
    29ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	40 e2       	ldi	r20, 0x20	; 32
    29da:	51 e4       	ldi	r21, 0x41	; 65
    29dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e0:	dc 01       	movw	r26, r24
    29e2:	cb 01       	movw	r24, r22
    29e4:	bc 01       	movw	r22, r24
    29e6:	cd 01       	movw	r24, r26
    29e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ec:	dc 01       	movw	r26, r24
    29ee:	cb 01       	movw	r24, r22
    29f0:	9c 8b       	std	Y+20, r25	; 0x14
    29f2:	8b 8b       	std	Y+19, r24	; 0x13
    29f4:	0f c0       	rjmp	.+30     	; 0x2a14 <Fan+0x10c>
    29f6:	88 ec       	ldi	r24, 0xC8	; 200
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	9a 8b       	std	Y+18, r25	; 0x12
    29fc:	89 8b       	std	Y+17, r24	; 0x11
    29fe:	89 89       	ldd	r24, Y+17	; 0x11
    2a00:	9a 89       	ldd	r25, Y+18	; 0x12
    2a02:	01 97       	sbiw	r24, 0x01	; 1
    2a04:	f1 f7       	brne	.-4      	; 0x2a02 <Fan+0xfa>
    2a06:	9a 8b       	std	Y+18, r25	; 0x12
    2a08:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a0a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a0c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a0e:	01 97       	sbiw	r24, 0x01	; 1
    2a10:	9c 8b       	std	Y+20, r25	; 0x14
    2a12:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a14:	8b 89       	ldd	r24, Y+19	; 0x13
    2a16:	9c 89       	ldd	r25, Y+20	; 0x14
    2a18:	00 97       	sbiw	r24, 0x00	; 0
    2a1a:	69 f7       	brne	.-38     	; 0x29f6 <Fan+0xee>
    2a1c:	14 c0       	rjmp	.+40     	; 0x2a46 <Fan+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a1e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a20:	7e 89       	ldd	r23, Y+22	; 0x16
    2a22:	8f 89       	ldd	r24, Y+23	; 0x17
    2a24:	98 8d       	ldd	r25, Y+24	; 0x18
    2a26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	9c 8b       	std	Y+20, r25	; 0x14
    2a30:	8b 8b       	std	Y+19, r24	; 0x13
    2a32:	8b 89       	ldd	r24, Y+19	; 0x13
    2a34:	9c 89       	ldd	r25, Y+20	; 0x14
    2a36:	98 8b       	std	Y+16, r25	; 0x10
    2a38:	8f 87       	std	Y+15, r24	; 0x0f
    2a3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a3c:	98 89       	ldd	r25, Y+16	; 0x10
    2a3e:	01 97       	sbiw	r24, 0x01	; 1
    2a40:	f1 f7       	brne	.-4      	; 0x2a3e <Fan+0x136>
    2a42:	98 8b       	std	Y+16, r25	; 0x10
    2a44:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		Buzzer_OFF();
    2a46:	0e 94 27 07 	call	0xe4e	; 0xe4e <Buzzer_OFF>
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	a8 ec       	ldi	r26, 0xC8	; 200
    2a50:	b2 e4       	ldi	r27, 0x42	; 66
    2a52:	8b 87       	std	Y+11, r24	; 0x0b
    2a54:	9c 87       	std	Y+12, r25	; 0x0c
    2a56:	ad 87       	std	Y+13, r26	; 0x0d
    2a58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a60:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	4a ef       	ldi	r20, 0xFA	; 250
    2a68:	54 e4       	ldi	r21, 0x44	; 68
    2a6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	8f 83       	std	Y+7, r24	; 0x07
    2a74:	98 87       	std	Y+8, r25	; 0x08
    2a76:	a9 87       	std	Y+9, r26	; 0x09
    2a78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a7c:	78 85       	ldd	r23, Y+8	; 0x08
    2a7e:	89 85       	ldd	r24, Y+9	; 0x09
    2a80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a82:	20 e0       	ldi	r18, 0x00	; 0
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	40 e8       	ldi	r20, 0x80	; 128
    2a88:	5f e3       	ldi	r21, 0x3F	; 63
    2a8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a8e:	88 23       	and	r24, r24
    2a90:	2c f4       	brge	.+10     	; 0x2a9c <Fan+0x194>
		__ticks = 1;
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	9e 83       	std	Y+6, r25	; 0x06
    2a98:	8d 83       	std	Y+5, r24	; 0x05
    2a9a:	3f c0       	rjmp	.+126    	; 0x2b1a <Fan+0x212>
	else if (__tmp > 65535)
    2a9c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a9e:	78 85       	ldd	r23, Y+8	; 0x08
    2aa0:	89 85       	ldd	r24, Y+9	; 0x09
    2aa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	3f ef       	ldi	r19, 0xFF	; 255
    2aa8:	4f e7       	ldi	r20, 0x7F	; 127
    2aaa:	57 e4       	ldi	r21, 0x47	; 71
    2aac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ab0:	18 16       	cp	r1, r24
    2ab2:	4c f5       	brge	.+82     	; 0x2b06 <Fan+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ab4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ab6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ab8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aba:	9e 85       	ldd	r25, Y+14	; 0x0e
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	40 e2       	ldi	r20, 0x20	; 32
    2ac2:	51 e4       	ldi	r21, 0x41	; 65
    2ac4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	bc 01       	movw	r22, r24
    2ace:	cd 01       	movw	r24, r26
    2ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	9e 83       	std	Y+6, r25	; 0x06
    2ada:	8d 83       	std	Y+5, r24	; 0x05
    2adc:	0f c0       	rjmp	.+30     	; 0x2afc <Fan+0x1f4>
    2ade:	88 ec       	ldi	r24, 0xC8	; 200
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	9c 83       	std	Y+4, r25	; 0x04
    2ae4:	8b 83       	std	Y+3, r24	; 0x03
    2ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aea:	01 97       	sbiw	r24, 0x01	; 1
    2aec:	f1 f7       	brne	.-4      	; 0x2aea <Fan+0x1e2>
    2aee:	9c 83       	std	Y+4, r25	; 0x04
    2af0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af2:	8d 81       	ldd	r24, Y+5	; 0x05
    2af4:	9e 81       	ldd	r25, Y+6	; 0x06
    2af6:	01 97       	sbiw	r24, 0x01	; 1
    2af8:	9e 83       	std	Y+6, r25	; 0x06
    2afa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2afc:	8d 81       	ldd	r24, Y+5	; 0x05
    2afe:	9e 81       	ldd	r25, Y+6	; 0x06
    2b00:	00 97       	sbiw	r24, 0x00	; 0
    2b02:	69 f7       	brne	.-38     	; 0x2ade <Fan+0x1d6>
    2b04:	3b c0       	rjmp	.+118    	; 0x2b7c <Fan+0x274>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b06:	6f 81       	ldd	r22, Y+7	; 0x07
    2b08:	78 85       	ldd	r23, Y+8	; 0x08
    2b0a:	89 85       	ldd	r24, Y+9	; 0x09
    2b0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	9e 83       	std	Y+6, r25	; 0x06
    2b18:	8d 83       	std	Y+5, r24	; 0x05
    2b1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b1e:	9a 83       	std	Y+2, r25	; 0x02
    2b20:	89 83       	std	Y+1, r24	; 0x01
    2b22:	89 81       	ldd	r24, Y+1	; 0x01
    2b24:	9a 81       	ldd	r25, Y+2	; 0x02
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	f1 f7       	brne	.-4      	; 0x2b26 <Fan+0x21e>
    2b2a:	9a 83       	std	Y+2, r25	; 0x02
    2b2c:	89 83       	std	Y+1, r24	; 0x01
    2b2e:	26 c0       	rjmp	.+76     	; 0x2b7c <Fan+0x274>
		_delay_ms(100);

	}
	else if (g_temperature < 45  && g_temperature >= 35 ){
    2b30:	80 91 11 01 	lds	r24, 0x0111
    2b34:	8d 32       	cpi	r24, 0x2D	; 45
    2b36:	40 f4       	brcc	.+16     	; 0x2b48 <Fan+0x240>
    2b38:	80 91 11 01 	lds	r24, 0x0111
    2b3c:	83 32       	cpi	r24, 0x23	; 35
    2b3e:	20 f0       	brcs	.+8      	; 0x2b48 <Fan+0x240>
		DC_MotorRotate(80);
    2b40:	80 e5       	ldi	r24, 0x50	; 80
    2b42:	0e 94 67 07 	call	0xece	; 0xece <DC_MotorRotate>
    2b46:	1a c0       	rjmp	.+52     	; 0x2b7c <Fan+0x274>

	}
	else if (g_temperature < 35 && g_temperature >= 25)
    2b48:	80 91 11 01 	lds	r24, 0x0111
    2b4c:	83 32       	cpi	r24, 0x23	; 35
    2b4e:	40 f4       	brcc	.+16     	; 0x2b60 <Fan+0x258>
    2b50:	80 91 11 01 	lds	r24, 0x0111
    2b54:	89 31       	cpi	r24, 0x19	; 25
    2b56:	20 f0       	brcs	.+8      	; 0x2b60 <Fan+0x258>
	{
		DC_MotorRotate(60);
    2b58:	8c e3       	ldi	r24, 0x3C	; 60
    2b5a:	0e 94 67 07 	call	0xece	; 0xece <DC_MotorRotate>
    2b5e:	0e c0       	rjmp	.+28     	; 0x2b7c <Fan+0x274>

	}
	else if (g_temperature < 25  && g_temperature >= 20){
    2b60:	80 91 11 01 	lds	r24, 0x0111
    2b64:	89 31       	cpi	r24, 0x19	; 25
    2b66:	40 f4       	brcc	.+16     	; 0x2b78 <Fan+0x270>
    2b68:	80 91 11 01 	lds	r24, 0x0111
    2b6c:	84 31       	cpi	r24, 0x14	; 20
    2b6e:	20 f0       	brcs	.+8      	; 0x2b78 <Fan+0x270>
		DC_MotorRotate(30);
    2b70:	8e e1       	ldi	r24, 0x1E	; 30
    2b72:	0e 94 67 07 	call	0xece	; 0xece <DC_MotorRotate>
    2b76:	02 c0       	rjmp	.+4      	; 0x2b7c <Fan+0x274>
	}
	else
	{
		DC_MotorOff();
    2b78:	0e 94 95 07 	call	0xf2a	; 0xf2a <DC_MotorOff>
	}
}
    2b7c:	6c 96       	adiw	r28, 0x1c	; 28
    2b7e:	0f b6       	in	r0, 0x3f	; 63
    2b80:	f8 94       	cli
    2b82:	de bf       	out	0x3e, r29	; 62
    2b84:	0f be       	out	0x3f, r0	; 63
    2b86:	cd bf       	out	0x3d, r28	; 61
    2b88:	cf 91       	pop	r28
    2b8a:	df 91       	pop	r29
    2b8c:	08 95       	ret

00002b8e <home_login>:
void home_login(void){
    2b8e:	df 93       	push	r29
    2b90:	cf 93       	push	r28
    2b92:	cd b7       	in	r28, 0x3d	; 61
    2b94:	de b7       	in	r29, 0x3e	; 62
    2b96:	e6 97       	sbiw	r28, 0x36	; 54
    2b98:	0f b6       	in	r0, 0x3f	; 63
    2b9a:	f8 94       	cli
    2b9c:	de bf       	out	0x3e, r29	; 62
    2b9e:	0f be       	out	0x3f, r0	; 63
    2ba0:	cd bf       	out	0x3d, r28	; 61
	u8 local_ID[5]; u8 i =0;
    2ba2:	1c a6       	std	Y+44, r1	; 0x2c
	u8 local_pass[5];
	u8 pressedKey = 0xff;
    2ba4:	8f ef       	ldi	r24, 0xFF	; 255
    2ba6:	8b a7       	std	Y+43, r24	; 0x2b

	LCD_SendString("Enter ID :  ");
    2ba8:	83 e9       	ldi	r24, 0x93	; 147
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	0e 94 25 10 	call	0x204a	; 0x204a <LCD_SendString>
	LCD_voidGoToXY(0,1);
    2bb0:	80 e0       	ldi	r24, 0x00	; 0
    2bb2:	61 e0       	ldi	r22, 0x01	; 1
    2bb4:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidGoToXY>
	for(i=0;i<4;i++)
    2bb8:	1c a6       	std	Y+44, r1	; 0x2c
    2bba:	18 c0       	rjmp	.+48     	; 0x2bec <home_login+0x5e>
	{
		while(pressedKey == 0xff)
		{
			pressedKey = KeyPadGetPressedKey();
    2bbc:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <KeyPadGetPressedKey>
    2bc0:	8b a7       	std	Y+43, r24	; 0x2b

	LCD_SendString("Enter ID :  ");
	LCD_voidGoToXY(0,1);
	for(i=0;i<4;i++)
	{
		while(pressedKey == 0xff)
    2bc2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bc4:	8f 3f       	cpi	r24, 0xFF	; 255
    2bc6:	d1 f3       	breq	.-12     	; 0x2bbc <home_login+0x2e>
		{
			pressedKey = KeyPadGetPressedKey();
		}
		local_ID[i] = pressedKey;
    2bc8:	8c a5       	ldd	r24, Y+44	; 0x2c
    2bca:	28 2f       	mov	r18, r24
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	ce 01       	movw	r24, r28
    2bd0:	8d 96       	adiw	r24, 0x2d	; 45
    2bd2:	fc 01       	movw	r30, r24
    2bd4:	e2 0f       	add	r30, r18
    2bd6:	f3 1f       	adc	r31, r19
    2bd8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bda:	80 83       	st	Z, r24
		LCD_voidSendData(pressedKey);
    2bdc:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bde:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_voidSendData>
		pressedKey = 0xff;
    2be2:	8f ef       	ldi	r24, 0xFF	; 255
    2be4:	8b a7       	std	Y+43, r24	; 0x2b
	u8 local_pass[5];
	u8 pressedKey = 0xff;

	LCD_SendString("Enter ID :  ");
	LCD_voidGoToXY(0,1);
	for(i=0;i<4;i++)
    2be6:	8c a5       	ldd	r24, Y+44	; 0x2c
    2be8:	8f 5f       	subi	r24, 0xFF	; 255
    2bea:	8c a7       	std	Y+44, r24	; 0x2c
    2bec:	8c a5       	ldd	r24, Y+44	; 0x2c
    2bee:	84 30       	cpi	r24, 0x04	; 4
    2bf0:	40 f3       	brcs	.-48     	; 0x2bc2 <home_login+0x34>
		}
		local_ID[i] = pressedKey;
		LCD_voidSendData(pressedKey);
		pressedKey = 0xff;
	}
	if(local_ID[0] == g_ID[0] && local_ID[1] == g_ID[1]
    2bf2:	9d a5       	ldd	r25, Y+45	; 0x2d
    2bf4:	80 91 fb 00 	lds	r24, 0x00FB
    2bf8:	98 17       	cp	r25, r24
    2bfa:	09 f0       	breq	.+2      	; 0x2bfe <home_login+0x70>
    2bfc:	4e c1       	rjmp	.+668    	; 0x2e9a <home_login+0x30c>
    2bfe:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c00:	80 91 fc 00 	lds	r24, 0x00FC
    2c04:	98 17       	cp	r25, r24
    2c06:	09 f0       	breq	.+2      	; 0x2c0a <home_login+0x7c>
    2c08:	48 c1       	rjmp	.+656    	; 0x2e9a <home_login+0x30c>
    2c0a:	9f a5       	ldd	r25, Y+47	; 0x2f
    2c0c:	80 91 fd 00 	lds	r24, 0x00FD
    2c10:	98 17       	cp	r25, r24
    2c12:	09 f0       	breq	.+2      	; 0x2c16 <home_login+0x88>
    2c14:	42 c1       	rjmp	.+644    	; 0x2e9a <home_login+0x30c>
    2c16:	98 a9       	ldd	r25, Y+48	; 0x30
    2c18:	80 91 fe 00 	lds	r24, 0x00FE
    2c1c:	98 17       	cp	r25, r24
    2c1e:	09 f0       	breq	.+2      	; 0x2c22 <home_login+0x94>
    2c20:	3c c1       	rjmp	.+632    	; 0x2e9a <home_login+0x30c>
													 && local_ID[2] == g_ID[2] && local_ID[3] == g_ID[3])
	{
		LCD_voidSendCmd(CLR_SCREEN);
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <LCD_voidSendCmd>
		LCD_SendString("Enter Password :  ");
    2c28:	80 ea       	ldi	r24, 0xA0	; 160
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	0e 94 25 10 	call	0x204a	; 0x204a <LCD_SendString>
		LCD_voidGoToXY(0,1);
    2c30:	80 e0       	ldi	r24, 0x00	; 0
    2c32:	61 e0       	ldi	r22, 0x01	; 1
    2c34:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidGoToXY>
		for(i=0;i<4;i++)
    2c38:	1c a6       	std	Y+44, r1	; 0x2c
    2c3a:	91 c0       	rjmp	.+290    	; 0x2d5e <home_login+0x1d0>
		{
			while(pressedKey == 0xff)
			{
				pressedKey = KeyPadGetPressedKey();
    2c3c:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <KeyPadGetPressedKey>
    2c40:	8b a7       	std	Y+43, r24	; 0x2b
		LCD_voidSendCmd(CLR_SCREEN);
		LCD_SendString("Enter Password :  ");
		LCD_voidGoToXY(0,1);
		for(i=0;i<4;i++)
		{
			while(pressedKey == 0xff)
    2c42:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c44:	8f 3f       	cpi	r24, 0xFF	; 255
    2c46:	d1 f3       	breq	.-12     	; 0x2c3c <home_login+0xae>
			{
				pressedKey = KeyPadGetPressedKey();
			}
			local_pass[i] = pressedKey;
    2c48:	8c a5       	ldd	r24, Y+44	; 0x2c
    2c4a:	28 2f       	mov	r18, r24
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	ce 01       	movw	r24, r28
    2c50:	c2 96       	adiw	r24, 0x32	; 50
    2c52:	fc 01       	movw	r30, r24
    2c54:	e2 0f       	add	r30, r18
    2c56:	f3 1f       	adc	r31, r19
    2c58:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c5a:	80 83       	st	Z, r24
			LCD_voidSendData(pressedKey);
    2c5c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c5e:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_voidSendData>
    2c62:	80 e0       	ldi	r24, 0x00	; 0
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	a8 ec       	ldi	r26, 0xC8	; 200
    2c68:	b2 e4       	ldi	r27, 0x42	; 66
    2c6a:	8f a3       	std	Y+39, r24	; 0x27
    2c6c:	98 a7       	std	Y+40, r25	; 0x28
    2c6e:	a9 a7       	std	Y+41, r26	; 0x29
    2c70:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c72:	6f a1       	ldd	r22, Y+39	; 0x27
    2c74:	78 a5       	ldd	r23, Y+40	; 0x28
    2c76:	89 a5       	ldd	r24, Y+41	; 0x29
    2c78:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c7a:	20 e0       	ldi	r18, 0x00	; 0
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	4a ef       	ldi	r20, 0xFA	; 250
    2c80:	54 e4       	ldi	r21, 0x44	; 68
    2c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c86:	dc 01       	movw	r26, r24
    2c88:	cb 01       	movw	r24, r22
    2c8a:	8b a3       	std	Y+35, r24	; 0x23
    2c8c:	9c a3       	std	Y+36, r25	; 0x24
    2c8e:	ad a3       	std	Y+37, r26	; 0x25
    2c90:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c92:	6b a1       	ldd	r22, Y+35	; 0x23
    2c94:	7c a1       	ldd	r23, Y+36	; 0x24
    2c96:	8d a1       	ldd	r24, Y+37	; 0x25
    2c98:	9e a1       	ldd	r25, Y+38	; 0x26
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	40 e8       	ldi	r20, 0x80	; 128
    2ca0:	5f e3       	ldi	r21, 0x3F	; 63
    2ca2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ca6:	88 23       	and	r24, r24
    2ca8:	2c f4       	brge	.+10     	; 0x2cb4 <home_login+0x126>
		__ticks = 1;
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	9a a3       	std	Y+34, r25	; 0x22
    2cb0:	89 a3       	std	Y+33, r24	; 0x21
    2cb2:	3f c0       	rjmp	.+126    	; 0x2d32 <home_login+0x1a4>
	else if (__tmp > 65535)
    2cb4:	6b a1       	ldd	r22, Y+35	; 0x23
    2cb6:	7c a1       	ldd	r23, Y+36	; 0x24
    2cb8:	8d a1       	ldd	r24, Y+37	; 0x25
    2cba:	9e a1       	ldd	r25, Y+38	; 0x26
    2cbc:	20 e0       	ldi	r18, 0x00	; 0
    2cbe:	3f ef       	ldi	r19, 0xFF	; 255
    2cc0:	4f e7       	ldi	r20, 0x7F	; 127
    2cc2:	57 e4       	ldi	r21, 0x47	; 71
    2cc4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cc8:	18 16       	cp	r1, r24
    2cca:	4c f5       	brge	.+82     	; 0x2d1e <home_login+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ccc:	6f a1       	ldd	r22, Y+39	; 0x27
    2cce:	78 a5       	ldd	r23, Y+40	; 0x28
    2cd0:	89 a5       	ldd	r24, Y+41	; 0x29
    2cd2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cd4:	20 e0       	ldi	r18, 0x00	; 0
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	40 e2       	ldi	r20, 0x20	; 32
    2cda:	51 e4       	ldi	r21, 0x41	; 65
    2cdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	cb 01       	movw	r24, r22
    2ce4:	bc 01       	movw	r22, r24
    2ce6:	cd 01       	movw	r24, r26
    2ce8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	9a a3       	std	Y+34, r25	; 0x22
    2cf2:	89 a3       	std	Y+33, r24	; 0x21
    2cf4:	0f c0       	rjmp	.+30     	; 0x2d14 <home_login+0x186>
    2cf6:	88 ec       	ldi	r24, 0xC8	; 200
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	98 a3       	std	Y+32, r25	; 0x20
    2cfc:	8f 8f       	std	Y+31, r24	; 0x1f
    2cfe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d00:	98 a1       	ldd	r25, Y+32	; 0x20
    2d02:	01 97       	sbiw	r24, 0x01	; 1
    2d04:	f1 f7       	brne	.-4      	; 0x2d02 <home_login+0x174>
    2d06:	98 a3       	std	Y+32, r25	; 0x20
    2d08:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d0a:	89 a1       	ldd	r24, Y+33	; 0x21
    2d0c:	9a a1       	ldd	r25, Y+34	; 0x22
    2d0e:	01 97       	sbiw	r24, 0x01	; 1
    2d10:	9a a3       	std	Y+34, r25	; 0x22
    2d12:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d14:	89 a1       	ldd	r24, Y+33	; 0x21
    2d16:	9a a1       	ldd	r25, Y+34	; 0x22
    2d18:	00 97       	sbiw	r24, 0x00	; 0
    2d1a:	69 f7       	brne	.-38     	; 0x2cf6 <home_login+0x168>
    2d1c:	14 c0       	rjmp	.+40     	; 0x2d46 <home_login+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d1e:	6b a1       	ldd	r22, Y+35	; 0x23
    2d20:	7c a1       	ldd	r23, Y+36	; 0x24
    2d22:	8d a1       	ldd	r24, Y+37	; 0x25
    2d24:	9e a1       	ldd	r25, Y+38	; 0x26
    2d26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d2a:	dc 01       	movw	r26, r24
    2d2c:	cb 01       	movw	r24, r22
    2d2e:	9a a3       	std	Y+34, r25	; 0x22
    2d30:	89 a3       	std	Y+33, r24	; 0x21
    2d32:	89 a1       	ldd	r24, Y+33	; 0x21
    2d34:	9a a1       	ldd	r25, Y+34	; 0x22
    2d36:	9e 8f       	std	Y+30, r25	; 0x1e
    2d38:	8d 8f       	std	Y+29, r24	; 0x1d
    2d3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d3c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d3e:	01 97       	sbiw	r24, 0x01	; 1
    2d40:	f1 f7       	brne	.-4      	; 0x2d3e <home_login+0x1b0>
    2d42:	9e 8f       	std	Y+30, r25	; 0x1e
    2d44:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(100);
			LCD_voidGoToXY(i,1);
    2d46:	8c a5       	ldd	r24, Y+44	; 0x2c
    2d48:	61 e0       	ldi	r22, 0x01	; 1
    2d4a:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidGoToXY>
			LCD_voidSendData('*');
    2d4e:	8a e2       	ldi	r24, 0x2A	; 42
    2d50:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_voidSendData>
			pressedKey = 0xff;
    2d54:	8f ef       	ldi	r24, 0xFF	; 255
    2d56:	8b a7       	std	Y+43, r24	; 0x2b
													 && local_ID[2] == g_ID[2] && local_ID[3] == g_ID[3])
	{
		LCD_voidSendCmd(CLR_SCREEN);
		LCD_SendString("Enter Password :  ");
		LCD_voidGoToXY(0,1);
		for(i=0;i<4;i++)
    2d58:	8c a5       	ldd	r24, Y+44	; 0x2c
    2d5a:	8f 5f       	subi	r24, 0xFF	; 255
    2d5c:	8c a7       	std	Y+44, r24	; 0x2c
    2d5e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2d60:	84 30       	cpi	r24, 0x04	; 4
    2d62:	08 f4       	brcc	.+2      	; 0x2d66 <home_login+0x1d8>
    2d64:	6e cf       	rjmp	.-292    	; 0x2c42 <home_login+0xb4>
			_delay_ms(100);
			LCD_voidGoToXY(i,1);
			LCD_voidSendData('*');
			pressedKey = 0xff;
		}
		LCD_voidSendCmd(CLR_SCREEN);
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <LCD_voidSendCmd>
		if(local_pass[0] == g_pass[0] && local_pass[1] == g_pass[1]
    2d6c:	9a a9       	ldd	r25, Y+50	; 0x32
    2d6e:	80 91 00 01 	lds	r24, 0x0100
    2d72:	98 17       	cp	r25, r24
    2d74:	b1 f4       	brne	.+44     	; 0x2da2 <home_login+0x214>
    2d76:	9b a9       	ldd	r25, Y+51	; 0x33
    2d78:	80 91 01 01 	lds	r24, 0x0101
    2d7c:	98 17       	cp	r25, r24
    2d7e:	89 f4       	brne	.+34     	; 0x2da2 <home_login+0x214>
    2d80:	9c a9       	ldd	r25, Y+52	; 0x34
    2d82:	80 91 02 01 	lds	r24, 0x0102
    2d86:	98 17       	cp	r25, r24
    2d88:	61 f4       	brne	.+24     	; 0x2da2 <home_login+0x214>
    2d8a:	9d a9       	ldd	r25, Y+53	; 0x35
    2d8c:	80 91 03 01 	lds	r24, 0x0103
    2d90:	98 17       	cp	r25, r24
    2d92:	39 f4       	brne	.+14     	; 0x2da2 <home_login+0x214>
																 && local_pass[2] == g_pass[2] && local_pass[3] == g_pass[3])
		{
			LCD_SendString("Welcome");
    2d94:	83 eb       	ldi	r24, 0xB3	; 179
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	0e 94 25 10 	call	0x204a	; 0x204a <LCD_SendString>
			home_screen();
    2d9c:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <home_screen>
    2da0:	fa c0       	rjmp	.+500    	; 0x2f96 <home_login+0x408>
		}
		else
		{
			LCD_SendString("Wrong pass/ID");
    2da2:	8b eb       	ldi	r24, 0xBB	; 187
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	0e 94 25 10 	call	0x204a	; 0x204a <LCD_SendString>
    2daa:	80 e0       	ldi	r24, 0x00	; 0
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	aa e7       	ldi	r26, 0x7A	; 122
    2db0:	b4 e4       	ldi	r27, 0x44	; 68
    2db2:	89 8f       	std	Y+25, r24	; 0x19
    2db4:	9a 8f       	std	Y+26, r25	; 0x1a
    2db6:	ab 8f       	std	Y+27, r26	; 0x1b
    2db8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dba:	69 8d       	ldd	r22, Y+25	; 0x19
    2dbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dc2:	20 e0       	ldi	r18, 0x00	; 0
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	4a ef       	ldi	r20, 0xFA	; 250
    2dc8:	54 e4       	ldi	r21, 0x44	; 68
    2dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dce:	dc 01       	movw	r26, r24
    2dd0:	cb 01       	movw	r24, r22
    2dd2:	8d 8b       	std	Y+21, r24	; 0x15
    2dd4:	9e 8b       	std	Y+22, r25	; 0x16
    2dd6:	af 8b       	std	Y+23, r26	; 0x17
    2dd8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2dda:	6d 89       	ldd	r22, Y+21	; 0x15
    2ddc:	7e 89       	ldd	r23, Y+22	; 0x16
    2dde:	8f 89       	ldd	r24, Y+23	; 0x17
    2de0:	98 8d       	ldd	r25, Y+24	; 0x18
    2de2:	20 e0       	ldi	r18, 0x00	; 0
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	40 e8       	ldi	r20, 0x80	; 128
    2de8:	5f e3       	ldi	r21, 0x3F	; 63
    2dea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dee:	88 23       	and	r24, r24
    2df0:	2c f4       	brge	.+10     	; 0x2dfc <home_login+0x26e>
		__ticks = 1;
    2df2:	81 e0       	ldi	r24, 0x01	; 1
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	9c 8b       	std	Y+20, r25	; 0x14
    2df8:	8b 8b       	std	Y+19, r24	; 0x13
    2dfa:	3f c0       	rjmp	.+126    	; 0x2e7a <home_login+0x2ec>
	else if (__tmp > 65535)
    2dfc:	6d 89       	ldd	r22, Y+21	; 0x15
    2dfe:	7e 89       	ldd	r23, Y+22	; 0x16
    2e00:	8f 89       	ldd	r24, Y+23	; 0x17
    2e02:	98 8d       	ldd	r25, Y+24	; 0x18
    2e04:	20 e0       	ldi	r18, 0x00	; 0
    2e06:	3f ef       	ldi	r19, 0xFF	; 255
    2e08:	4f e7       	ldi	r20, 0x7F	; 127
    2e0a:	57 e4       	ldi	r21, 0x47	; 71
    2e0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e10:	18 16       	cp	r1, r24
    2e12:	4c f5       	brge	.+82     	; 0x2e66 <home_login+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e14:	69 8d       	ldd	r22, Y+25	; 0x19
    2e16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e1c:	20 e0       	ldi	r18, 0x00	; 0
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	40 e2       	ldi	r20, 0x20	; 32
    2e22:	51 e4       	ldi	r21, 0x41	; 65
    2e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e28:	dc 01       	movw	r26, r24
    2e2a:	cb 01       	movw	r24, r22
    2e2c:	bc 01       	movw	r22, r24
    2e2e:	cd 01       	movw	r24, r26
    2e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e34:	dc 01       	movw	r26, r24
    2e36:	cb 01       	movw	r24, r22
    2e38:	9c 8b       	std	Y+20, r25	; 0x14
    2e3a:	8b 8b       	std	Y+19, r24	; 0x13
    2e3c:	0f c0       	rjmp	.+30     	; 0x2e5c <home_login+0x2ce>
    2e3e:	88 ec       	ldi	r24, 0xC8	; 200
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	9a 8b       	std	Y+18, r25	; 0x12
    2e44:	89 8b       	std	Y+17, r24	; 0x11
    2e46:	89 89       	ldd	r24, Y+17	; 0x11
    2e48:	9a 89       	ldd	r25, Y+18	; 0x12
    2e4a:	01 97       	sbiw	r24, 0x01	; 1
    2e4c:	f1 f7       	brne	.-4      	; 0x2e4a <home_login+0x2bc>
    2e4e:	9a 8b       	std	Y+18, r25	; 0x12
    2e50:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e52:	8b 89       	ldd	r24, Y+19	; 0x13
    2e54:	9c 89       	ldd	r25, Y+20	; 0x14
    2e56:	01 97       	sbiw	r24, 0x01	; 1
    2e58:	9c 8b       	std	Y+20, r25	; 0x14
    2e5a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e5c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e5e:	9c 89       	ldd	r25, Y+20	; 0x14
    2e60:	00 97       	sbiw	r24, 0x00	; 0
    2e62:	69 f7       	brne	.-38     	; 0x2e3e <home_login+0x2b0>
    2e64:	14 c0       	rjmp	.+40     	; 0x2e8e <home_login+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e66:	6d 89       	ldd	r22, Y+21	; 0x15
    2e68:	7e 89       	ldd	r23, Y+22	; 0x16
    2e6a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e6c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e72:	dc 01       	movw	r26, r24
    2e74:	cb 01       	movw	r24, r22
    2e76:	9c 8b       	std	Y+20, r25	; 0x14
    2e78:	8b 8b       	std	Y+19, r24	; 0x13
    2e7a:	8b 89       	ldd	r24, Y+19	; 0x13
    2e7c:	9c 89       	ldd	r25, Y+20	; 0x14
    2e7e:	98 8b       	std	Y+16, r25	; 0x10
    2e80:	8f 87       	std	Y+15, r24	; 0x0f
    2e82:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e84:	98 89       	ldd	r25, Y+16	; 0x10
    2e86:	01 97       	sbiw	r24, 0x01	; 1
    2e88:	f1 f7       	brne	.-4      	; 0x2e86 <home_login+0x2f8>
    2e8a:	98 8b       	std	Y+16, r25	; 0x10
    2e8c:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			LCD_voidSendCmd(CLR_SCREEN);
    2e8e:	81 e0       	ldi	r24, 0x01	; 1
    2e90:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <LCD_voidSendCmd>
			home_login();
    2e94:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <home_login>
    2e98:	7e c0       	rjmp	.+252    	; 0x2f96 <home_login+0x408>
		}
	}
	else
	{
		LCD_voidSendCmd(CLR_SCREEN);
    2e9a:	81 e0       	ldi	r24, 0x01	; 1
    2e9c:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <LCD_voidSendCmd>
		LCD_SendString("Wrong pass/ID");
    2ea0:	8b eb       	ldi	r24, 0xBB	; 187
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	0e 94 25 10 	call	0x204a	; 0x204a <LCD_SendString>
    2ea8:	80 e0       	ldi	r24, 0x00	; 0
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	aa e7       	ldi	r26, 0x7A	; 122
    2eae:	b4 e4       	ldi	r27, 0x44	; 68
    2eb0:	8b 87       	std	Y+11, r24	; 0x0b
    2eb2:	9c 87       	std	Y+12, r25	; 0x0c
    2eb4:	ad 87       	std	Y+13, r26	; 0x0d
    2eb6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eba:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ebc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ebe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	4a ef       	ldi	r20, 0xFA	; 250
    2ec6:	54 e4       	ldi	r21, 0x44	; 68
    2ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ecc:	dc 01       	movw	r26, r24
    2ece:	cb 01       	movw	r24, r22
    2ed0:	8f 83       	std	Y+7, r24	; 0x07
    2ed2:	98 87       	std	Y+8, r25	; 0x08
    2ed4:	a9 87       	std	Y+9, r26	; 0x09
    2ed6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ed8:	6f 81       	ldd	r22, Y+7	; 0x07
    2eda:	78 85       	ldd	r23, Y+8	; 0x08
    2edc:	89 85       	ldd	r24, Y+9	; 0x09
    2ede:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ee0:	20 e0       	ldi	r18, 0x00	; 0
    2ee2:	30 e0       	ldi	r19, 0x00	; 0
    2ee4:	40 e8       	ldi	r20, 0x80	; 128
    2ee6:	5f e3       	ldi	r21, 0x3F	; 63
    2ee8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2eec:	88 23       	and	r24, r24
    2eee:	2c f4       	brge	.+10     	; 0x2efa <home_login+0x36c>
		__ticks = 1;
    2ef0:	81 e0       	ldi	r24, 0x01	; 1
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	9e 83       	std	Y+6, r25	; 0x06
    2ef6:	8d 83       	std	Y+5, r24	; 0x05
    2ef8:	3f c0       	rjmp	.+126    	; 0x2f78 <home_login+0x3ea>
	else if (__tmp > 65535)
    2efa:	6f 81       	ldd	r22, Y+7	; 0x07
    2efc:	78 85       	ldd	r23, Y+8	; 0x08
    2efe:	89 85       	ldd	r24, Y+9	; 0x09
    2f00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f02:	20 e0       	ldi	r18, 0x00	; 0
    2f04:	3f ef       	ldi	r19, 0xFF	; 255
    2f06:	4f e7       	ldi	r20, 0x7F	; 127
    2f08:	57 e4       	ldi	r21, 0x47	; 71
    2f0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f0e:	18 16       	cp	r1, r24
    2f10:	4c f5       	brge	.+82     	; 0x2f64 <home_login+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f12:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f14:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f16:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f18:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f1a:	20 e0       	ldi	r18, 0x00	; 0
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	40 e2       	ldi	r20, 0x20	; 32
    2f20:	51 e4       	ldi	r21, 0x41	; 65
    2f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f26:	dc 01       	movw	r26, r24
    2f28:	cb 01       	movw	r24, r22
    2f2a:	bc 01       	movw	r22, r24
    2f2c:	cd 01       	movw	r24, r26
    2f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f32:	dc 01       	movw	r26, r24
    2f34:	cb 01       	movw	r24, r22
    2f36:	9e 83       	std	Y+6, r25	; 0x06
    2f38:	8d 83       	std	Y+5, r24	; 0x05
    2f3a:	0f c0       	rjmp	.+30     	; 0x2f5a <home_login+0x3cc>
    2f3c:	88 ec       	ldi	r24, 0xC8	; 200
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	9c 83       	std	Y+4, r25	; 0x04
    2f42:	8b 83       	std	Y+3, r24	; 0x03
    2f44:	8b 81       	ldd	r24, Y+3	; 0x03
    2f46:	9c 81       	ldd	r25, Y+4	; 0x04
    2f48:	01 97       	sbiw	r24, 0x01	; 1
    2f4a:	f1 f7       	brne	.-4      	; 0x2f48 <home_login+0x3ba>
    2f4c:	9c 83       	std	Y+4, r25	; 0x04
    2f4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f50:	8d 81       	ldd	r24, Y+5	; 0x05
    2f52:	9e 81       	ldd	r25, Y+6	; 0x06
    2f54:	01 97       	sbiw	r24, 0x01	; 1
    2f56:	9e 83       	std	Y+6, r25	; 0x06
    2f58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f5e:	00 97       	sbiw	r24, 0x00	; 0
    2f60:	69 f7       	brne	.-38     	; 0x2f3c <home_login+0x3ae>
    2f62:	14 c0       	rjmp	.+40     	; 0x2f8c <home_login+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f64:	6f 81       	ldd	r22, Y+7	; 0x07
    2f66:	78 85       	ldd	r23, Y+8	; 0x08
    2f68:	89 85       	ldd	r24, Y+9	; 0x09
    2f6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f70:	dc 01       	movw	r26, r24
    2f72:	cb 01       	movw	r24, r22
    2f74:	9e 83       	std	Y+6, r25	; 0x06
    2f76:	8d 83       	std	Y+5, r24	; 0x05
    2f78:	8d 81       	ldd	r24, Y+5	; 0x05
    2f7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f7c:	9a 83       	std	Y+2, r25	; 0x02
    2f7e:	89 83       	std	Y+1, r24	; 0x01
    2f80:	89 81       	ldd	r24, Y+1	; 0x01
    2f82:	9a 81       	ldd	r25, Y+2	; 0x02
    2f84:	01 97       	sbiw	r24, 0x01	; 1
    2f86:	f1 f7       	brne	.-4      	; 0x2f84 <home_login+0x3f6>
    2f88:	9a 83       	std	Y+2, r25	; 0x02
    2f8a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		LCD_voidSendCmd(CLR_SCREEN);
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <LCD_voidSendCmd>
		home_login();
    2f92:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <home_login>
	}


}
    2f96:	e6 96       	adiw	r28, 0x36	; 54
    2f98:	0f b6       	in	r0, 0x3f	; 63
    2f9a:	f8 94       	cli
    2f9c:	de bf       	out	0x3e, r29	; 62
    2f9e:	0f be       	out	0x3f, r0	; 63
    2fa0:	cd bf       	out	0x3d, r28	; 61
    2fa2:	cf 91       	pop	r28
    2fa4:	df 91       	pop	r29
    2fa6:	08 95       	ret

00002fa8 <home_screen>:
void home_screen(void){
    2fa8:	df 93       	push	r29
    2faa:	cf 93       	push	r28
    2fac:	cd b7       	in	r28, 0x3d	; 61
    2fae:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCmd(CLR_SCREEN);
    2fb0:	81 e0       	ldi	r24, 0x01	; 1
    2fb2:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <LCD_voidSendCmd>
	LCD_SendString("Temp:  'C");
    2fb6:	89 ec       	ldi	r24, 0xC9	; 201
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	0e 94 25 10 	call	0x204a	; 0x204a <LCD_SendString>

	LCD_voidGoToXY(0,1);
    2fbe:	80 e0       	ldi	r24, 0x00	; 0
    2fc0:	61 e0       	ldi	r22, 0x01	; 1
    2fc2:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidGoToXY>

	LCD_SendString("LEDs: ");
    2fc6:	83 ed       	ldi	r24, 0xD3	; 211
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	0e 94 25 10 	call	0x204a	; 0x204a <LCD_SendString>
}
    2fce:	cf 91       	pop	r28
    2fd0:	df 91       	pop	r29
    2fd2:	08 95       	ret

00002fd4 <LED>:
void LED(void)
{
    2fd4:	df 93       	push	r29
    2fd6:	cf 93       	push	r28
    2fd8:	0f 92       	push	r0
    2fda:	cd b7       	in	r28, 0x3d	; 61
    2fdc:	de b7       	in	r29, 0x3e	; 62
	u8 Digital;
	ADC_u8StartConversionSynch(ADC_SINGLE_ENDED_CH1,(u16*)&Digital);
    2fde:	9e 01       	movw	r18, r28
    2fe0:	2f 5f       	subi	r18, 0xFF	; 255
    2fe2:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe4:	81 e0       	ldi	r24, 0x01	; 1
    2fe6:	b9 01       	movw	r22, r18
    2fe8:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <ADC_u8StartConversionSynch>


	if (Digital <= 20)
    2fec:	89 81       	ldd	r24, Y+1	; 0x01
    2fee:	85 31       	cpi	r24, 0x15	; 21
    2ff0:	30 f4       	brcc	.+12     	; 0x2ffe <LED+0x2a>
		{

		g_led = 8;
    2ff2:	88 e0       	ldi	r24, 0x08	; 8
    2ff4:	80 93 10 01 	sts	0x0110, r24
		LED_OFF();
    2ff8:	0e 94 c6 13 	call	0x278c	; 0x278c <LED_OFF>
    2ffc:	44 c0       	rjmp	.+136    	; 0x3086 <LED+0xb2>

		}

		else if((Digital > 20) && (Digital <= 40))
    2ffe:	89 81       	ldd	r24, Y+1	; 0x01
    3000:	85 31       	cpi	r24, 0x15	; 21
    3002:	48 f0       	brcs	.+18     	; 0x3016 <LED+0x42>
    3004:	89 81       	ldd	r24, Y+1	; 0x01
    3006:	89 32       	cpi	r24, 0x29	; 41
    3008:	30 f4       	brcc	.+12     	; 0x3016 <LED+0x42>
		{

			g_led = 7;
    300a:	87 e0       	ldi	r24, 0x07	; 7
    300c:	80 93 10 01 	sts	0x0110, r24
			LED_OFF();
    3010:	0e 94 c6 13 	call	0x278c	; 0x278c <LED_OFF>
    3014:	38 c0       	rjmp	.+112    	; 0x3086 <LED+0xb2>

		}

		else if((Digital > 40) && (Digital <= 60))
    3016:	89 81       	ldd	r24, Y+1	; 0x01
    3018:	89 32       	cpi	r24, 0x29	; 41
    301a:	48 f0       	brcs	.+18     	; 0x302e <LED+0x5a>
    301c:	89 81       	ldd	r24, Y+1	; 0x01
    301e:	8d 33       	cpi	r24, 0x3D	; 61
    3020:	30 f4       	brcc	.+12     	; 0x302e <LED+0x5a>
		{

			g_led = 6;
    3022:	86 e0       	ldi	r24, 0x06	; 6
    3024:	80 93 10 01 	sts	0x0110, r24
			LED_OFF();
    3028:	0e 94 c6 13 	call	0x278c	; 0x278c <LED_OFF>
    302c:	2c c0       	rjmp	.+88     	; 0x3086 <LED+0xb2>

		}

		else if((Digital > 60) && (Digital <= 70))
    302e:	89 81       	ldd	r24, Y+1	; 0x01
    3030:	8d 33       	cpi	r24, 0x3D	; 61
    3032:	48 f0       	brcs	.+18     	; 0x3046 <LED+0x72>
    3034:	89 81       	ldd	r24, Y+1	; 0x01
    3036:	87 34       	cpi	r24, 0x47	; 71
    3038:	30 f4       	brcc	.+12     	; 0x3046 <LED+0x72>
		{

			g_led = 5;
    303a:	85 e0       	ldi	r24, 0x05	; 5
    303c:	80 93 10 01 	sts	0x0110, r24
			LED_OFF();
    3040:	0e 94 c6 13 	call	0x278c	; 0x278c <LED_OFF>
    3044:	20 c0       	rjmp	.+64     	; 0x3086 <LED+0xb2>

		}

		else if((Digital > 70) && (Digital <= 80))
    3046:	89 81       	ldd	r24, Y+1	; 0x01
    3048:	87 34       	cpi	r24, 0x47	; 71
    304a:	48 f0       	brcs	.+18     	; 0x305e <LED+0x8a>
    304c:	89 81       	ldd	r24, Y+1	; 0x01
    304e:	81 35       	cpi	r24, 0x51	; 81
    3050:	30 f4       	brcc	.+12     	; 0x305e <LED+0x8a>
		{

			g_led = 4;
    3052:	84 e0       	ldi	r24, 0x04	; 4
    3054:	80 93 10 01 	sts	0x0110, r24
			LED_OFF();
    3058:	0e 94 c6 13 	call	0x278c	; 0x278c <LED_OFF>
    305c:	14 c0       	rjmp	.+40     	; 0x3086 <LED+0xb2>
		}

		else if((Digital > 80) && (Digital <= 90))
    305e:	89 81       	ldd	r24, Y+1	; 0x01
    3060:	81 35       	cpi	r24, 0x51	; 81
    3062:	48 f0       	brcs	.+18     	; 0x3076 <LED+0xa2>
    3064:	89 81       	ldd	r24, Y+1	; 0x01
    3066:	8b 35       	cpi	r24, 0x5B	; 91
    3068:	30 f4       	brcc	.+12     	; 0x3076 <LED+0xa2>
		{

			g_led = 3;
    306a:	83 e0       	ldi	r24, 0x03	; 3
    306c:	80 93 10 01 	sts	0x0110, r24
			LED_OFF();
    3070:	0e 94 c6 13 	call	0x278c	; 0x278c <LED_OFF>
    3074:	08 c0       	rjmp	.+16     	; 0x3086 <LED+0xb2>
		}

		else if (Digital > 90)
    3076:	89 81       	ldd	r24, Y+1	; 0x01
    3078:	8b 35       	cpi	r24, 0x5B	; 91
    307a:	28 f0       	brcs	.+10     	; 0x3086 <LED+0xb2>
		{

			g_led = 2;
    307c:	82 e0       	ldi	r24, 0x02	; 2
    307e:	80 93 10 01 	sts	0x0110, r24
			LED_OFF();
    3082:	0e 94 c6 13 	call	0x278c	; 0x278c <LED_OFF>

		}
	    LED_ON(g_led);
    3086:	80 91 10 01 	lds	r24, 0x0110
    308a:	0e 94 40 13 	call	0x2680	; 0x2680 <LED_ON>
		LCD_voidGoToXY(6,1);
    308e:	86 e0       	ldi	r24, 0x06	; 6
    3090:	61 e0       	ldi	r22, 0x01	; 1
    3092:	0e 94 c9 12 	call	0x2592	; 0x2592 <LCD_voidGoToXY>
		LCD_voidSendNumber(g_led);
    3096:	80 91 10 01 	lds	r24, 0x0110
    309a:	88 2f       	mov	r24, r24
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	a0 e0       	ldi	r26, 0x00	; 0
    30a0:	b0 e0       	ldi	r27, 0x00	; 0
    30a2:	bc 01       	movw	r22, r24
    30a4:	cd 01       	movw	r24, r26
    30a6:	0e 94 52 10 	call	0x20a4	; 0x20a4 <LCD_voidSendNumber>
}
    30aa:	0f 90       	pop	r0
    30ac:	cf 91       	pop	r28
    30ae:	df 91       	pop	r29
    30b0:	08 95       	ret

000030b2 <Get_temperature>:

#include "ADC.h"
#include "registers.h"


u8 Get_temperature(void){
    30b2:	df 93       	push	r29
    30b4:	cf 93       	push	r28
    30b6:	00 d0       	rcall	.+0      	; 0x30b8 <Get_temperature+0x6>
    30b8:	0f 92       	push	r0
    30ba:	cd b7       	in	r28, 0x3d	; 61
    30bc:	de b7       	in	r29, 0x3e	; 62

	u8 temperature_;
	u16 digitalResult;
	ADC_u8StartConversionSynch(ADC_SINGLE_ENDED_CH0,(u16 *)&digitalResult);
    30be:	9e 01       	movw	r18, r28
    30c0:	2e 5f       	subi	r18, 0xFE	; 254
    30c2:	3f 4f       	sbci	r19, 0xFF	; 255
    30c4:	80 e0       	ldi	r24, 0x00	; 0
    30c6:	b9 01       	movw	r22, r18
    30c8:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <ADC_u8StartConversionSynch>
	temperature_ = ((u8)(((u32)digitalResult * 500UL) / 256UL));
    30cc:	8a 81       	ldd	r24, Y+2	; 0x02
    30ce:	9b 81       	ldd	r25, Y+3	; 0x03
    30d0:	cc 01       	movw	r24, r24
    30d2:	a0 e0       	ldi	r26, 0x00	; 0
    30d4:	b0 e0       	ldi	r27, 0x00	; 0
    30d6:	24 ef       	ldi	r18, 0xF4	; 244
    30d8:	31 e0       	ldi	r19, 0x01	; 1
    30da:	40 e0       	ldi	r20, 0x00	; 0
    30dc:	50 e0       	ldi	r21, 0x00	; 0
    30de:	bc 01       	movw	r22, r24
    30e0:	cd 01       	movw	r24, r26
    30e2:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsi3>
    30e6:	dc 01       	movw	r26, r24
    30e8:	cb 01       	movw	r24, r22
    30ea:	89 2f       	mov	r24, r25
    30ec:	9a 2f       	mov	r25, r26
    30ee:	ab 2f       	mov	r26, r27
    30f0:	bb 27       	eor	r27, r27
    30f2:	89 83       	std	Y+1, r24	; 0x01
	return temperature_ ;
    30f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    30f6:	0f 90       	pop	r0
    30f8:	0f 90       	pop	r0
    30fa:	0f 90       	pop	r0
    30fc:	cf 91       	pop	r28
    30fe:	df 91       	pop	r29
    3100:	08 95       	ret

00003102 <__mulsi3>:
    3102:	62 9f       	mul	r22, r18
    3104:	d0 01       	movw	r26, r0
    3106:	73 9f       	mul	r23, r19
    3108:	f0 01       	movw	r30, r0
    310a:	82 9f       	mul	r24, r18
    310c:	e0 0d       	add	r30, r0
    310e:	f1 1d       	adc	r31, r1
    3110:	64 9f       	mul	r22, r20
    3112:	e0 0d       	add	r30, r0
    3114:	f1 1d       	adc	r31, r1
    3116:	92 9f       	mul	r25, r18
    3118:	f0 0d       	add	r31, r0
    311a:	83 9f       	mul	r24, r19
    311c:	f0 0d       	add	r31, r0
    311e:	74 9f       	mul	r23, r20
    3120:	f0 0d       	add	r31, r0
    3122:	65 9f       	mul	r22, r21
    3124:	f0 0d       	add	r31, r0
    3126:	99 27       	eor	r25, r25
    3128:	72 9f       	mul	r23, r18
    312a:	b0 0d       	add	r27, r0
    312c:	e1 1d       	adc	r30, r1
    312e:	f9 1f       	adc	r31, r25
    3130:	63 9f       	mul	r22, r19
    3132:	b0 0d       	add	r27, r0
    3134:	e1 1d       	adc	r30, r1
    3136:	f9 1f       	adc	r31, r25
    3138:	bd 01       	movw	r22, r26
    313a:	cf 01       	movw	r24, r30
    313c:	11 24       	eor	r1, r1
    313e:	08 95       	ret

00003140 <__udivmodhi4>:
    3140:	aa 1b       	sub	r26, r26
    3142:	bb 1b       	sub	r27, r27
    3144:	51 e1       	ldi	r21, 0x11	; 17
    3146:	07 c0       	rjmp	.+14     	; 0x3156 <__udivmodhi4_ep>

00003148 <__udivmodhi4_loop>:
    3148:	aa 1f       	adc	r26, r26
    314a:	bb 1f       	adc	r27, r27
    314c:	a6 17       	cp	r26, r22
    314e:	b7 07       	cpc	r27, r23
    3150:	10 f0       	brcs	.+4      	; 0x3156 <__udivmodhi4_ep>
    3152:	a6 1b       	sub	r26, r22
    3154:	b7 0b       	sbc	r27, r23

00003156 <__udivmodhi4_ep>:
    3156:	88 1f       	adc	r24, r24
    3158:	99 1f       	adc	r25, r25
    315a:	5a 95       	dec	r21
    315c:	a9 f7       	brne	.-22     	; 0x3148 <__udivmodhi4_loop>
    315e:	80 95       	com	r24
    3160:	90 95       	com	r25
    3162:	bc 01       	movw	r22, r24
    3164:	cd 01       	movw	r24, r26
    3166:	08 95       	ret

00003168 <__divmodsi4>:
    3168:	97 fb       	bst	r25, 7
    316a:	09 2e       	mov	r0, r25
    316c:	05 26       	eor	r0, r21
    316e:	0e d0       	rcall	.+28     	; 0x318c <__divmodsi4_neg1>
    3170:	57 fd       	sbrc	r21, 7
    3172:	04 d0       	rcall	.+8      	; 0x317c <__divmodsi4_neg2>
    3174:	14 d0       	rcall	.+40     	; 0x319e <__udivmodsi4>
    3176:	0a d0       	rcall	.+20     	; 0x318c <__divmodsi4_neg1>
    3178:	00 1c       	adc	r0, r0
    317a:	38 f4       	brcc	.+14     	; 0x318a <__divmodsi4_exit>

0000317c <__divmodsi4_neg2>:
    317c:	50 95       	com	r21
    317e:	40 95       	com	r20
    3180:	30 95       	com	r19
    3182:	21 95       	neg	r18
    3184:	3f 4f       	sbci	r19, 0xFF	; 255
    3186:	4f 4f       	sbci	r20, 0xFF	; 255
    3188:	5f 4f       	sbci	r21, 0xFF	; 255

0000318a <__divmodsi4_exit>:
    318a:	08 95       	ret

0000318c <__divmodsi4_neg1>:
    318c:	f6 f7       	brtc	.-4      	; 0x318a <__divmodsi4_exit>
    318e:	90 95       	com	r25
    3190:	80 95       	com	r24
    3192:	70 95       	com	r23
    3194:	61 95       	neg	r22
    3196:	7f 4f       	sbci	r23, 0xFF	; 255
    3198:	8f 4f       	sbci	r24, 0xFF	; 255
    319a:	9f 4f       	sbci	r25, 0xFF	; 255
    319c:	08 95       	ret

0000319e <__udivmodsi4>:
    319e:	a1 e2       	ldi	r26, 0x21	; 33
    31a0:	1a 2e       	mov	r1, r26
    31a2:	aa 1b       	sub	r26, r26
    31a4:	bb 1b       	sub	r27, r27
    31a6:	fd 01       	movw	r30, r26
    31a8:	0d c0       	rjmp	.+26     	; 0x31c4 <__udivmodsi4_ep>

000031aa <__udivmodsi4_loop>:
    31aa:	aa 1f       	adc	r26, r26
    31ac:	bb 1f       	adc	r27, r27
    31ae:	ee 1f       	adc	r30, r30
    31b0:	ff 1f       	adc	r31, r31
    31b2:	a2 17       	cp	r26, r18
    31b4:	b3 07       	cpc	r27, r19
    31b6:	e4 07       	cpc	r30, r20
    31b8:	f5 07       	cpc	r31, r21
    31ba:	20 f0       	brcs	.+8      	; 0x31c4 <__udivmodsi4_ep>
    31bc:	a2 1b       	sub	r26, r18
    31be:	b3 0b       	sbc	r27, r19
    31c0:	e4 0b       	sbc	r30, r20
    31c2:	f5 0b       	sbc	r31, r21

000031c4 <__udivmodsi4_ep>:
    31c4:	66 1f       	adc	r22, r22
    31c6:	77 1f       	adc	r23, r23
    31c8:	88 1f       	adc	r24, r24
    31ca:	99 1f       	adc	r25, r25
    31cc:	1a 94       	dec	r1
    31ce:	69 f7       	brne	.-38     	; 0x31aa <__udivmodsi4_loop>
    31d0:	60 95       	com	r22
    31d2:	70 95       	com	r23
    31d4:	80 95       	com	r24
    31d6:	90 95       	com	r25
    31d8:	9b 01       	movw	r18, r22
    31da:	ac 01       	movw	r20, r24
    31dc:	bd 01       	movw	r22, r26
    31de:	cf 01       	movw	r24, r30
    31e0:	08 95       	ret

000031e2 <__prologue_saves__>:
    31e2:	2f 92       	push	r2
    31e4:	3f 92       	push	r3
    31e6:	4f 92       	push	r4
    31e8:	5f 92       	push	r5
    31ea:	6f 92       	push	r6
    31ec:	7f 92       	push	r7
    31ee:	8f 92       	push	r8
    31f0:	9f 92       	push	r9
    31f2:	af 92       	push	r10
    31f4:	bf 92       	push	r11
    31f6:	cf 92       	push	r12
    31f8:	df 92       	push	r13
    31fa:	ef 92       	push	r14
    31fc:	ff 92       	push	r15
    31fe:	0f 93       	push	r16
    3200:	1f 93       	push	r17
    3202:	cf 93       	push	r28
    3204:	df 93       	push	r29
    3206:	cd b7       	in	r28, 0x3d	; 61
    3208:	de b7       	in	r29, 0x3e	; 62
    320a:	ca 1b       	sub	r28, r26
    320c:	db 0b       	sbc	r29, r27
    320e:	0f b6       	in	r0, 0x3f	; 63
    3210:	f8 94       	cli
    3212:	de bf       	out	0x3e, r29	; 62
    3214:	0f be       	out	0x3f, r0	; 63
    3216:	cd bf       	out	0x3d, r28	; 61
    3218:	09 94       	ijmp

0000321a <__epilogue_restores__>:
    321a:	2a 88       	ldd	r2, Y+18	; 0x12
    321c:	39 88       	ldd	r3, Y+17	; 0x11
    321e:	48 88       	ldd	r4, Y+16	; 0x10
    3220:	5f 84       	ldd	r5, Y+15	; 0x0f
    3222:	6e 84       	ldd	r6, Y+14	; 0x0e
    3224:	7d 84       	ldd	r7, Y+13	; 0x0d
    3226:	8c 84       	ldd	r8, Y+12	; 0x0c
    3228:	9b 84       	ldd	r9, Y+11	; 0x0b
    322a:	aa 84       	ldd	r10, Y+10	; 0x0a
    322c:	b9 84       	ldd	r11, Y+9	; 0x09
    322e:	c8 84       	ldd	r12, Y+8	; 0x08
    3230:	df 80       	ldd	r13, Y+7	; 0x07
    3232:	ee 80       	ldd	r14, Y+6	; 0x06
    3234:	fd 80       	ldd	r15, Y+5	; 0x05
    3236:	0c 81       	ldd	r16, Y+4	; 0x04
    3238:	1b 81       	ldd	r17, Y+3	; 0x03
    323a:	aa 81       	ldd	r26, Y+2	; 0x02
    323c:	b9 81       	ldd	r27, Y+1	; 0x01
    323e:	ce 0f       	add	r28, r30
    3240:	d1 1d       	adc	r29, r1
    3242:	0f b6       	in	r0, 0x3f	; 63
    3244:	f8 94       	cli
    3246:	de bf       	out	0x3e, r29	; 62
    3248:	0f be       	out	0x3f, r0	; 63
    324a:	cd bf       	out	0x3d, r28	; 61
    324c:	ed 01       	movw	r28, r26
    324e:	08 95       	ret

00003250 <_exit>:
    3250:	f8 94       	cli

00003252 <__stop_program>:
    3252:	ff cf       	rjmp	.-2      	; 0x3252 <__stop_program>
